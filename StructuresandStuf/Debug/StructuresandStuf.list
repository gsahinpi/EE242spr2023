
StructuresandStuf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000760  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008e8  080008e8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008e8  080008e8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080008e8  080008e8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008e8  080008e8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008e8  080008e8  000108e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008ec  080008ec  000108ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080008f0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011dd  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004b0  00000000  00000000  00021211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  000216c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000180  00000000  00000000  00021890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000100d  00000000  00000000  00021a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000191f  00000000  00000000  00022a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb565  00000000  00000000  0002433c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000df8a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000608  00000000  00000000  000df8f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080008d0 	.word	0x080008d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080008d0 	.word	0x080008d0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <main>:
}komplexRectangle;

  komplex addcomplex( komplex,komplex);

int main()
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b0bb      	sub	sp, #236	; 0xec
 8000544:	af00      	add	r7, sp, #0
	int num=5;
 8000546:	2305      	movs	r3, #5
 8000548:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	double * realptr;
	double * imaginaryptr;
	komplex  komplexNumberArray [5];
	komplexRectangle firstrectangle;
	//assign the value 5+2*i to komplexNumber1
	komplexNumber1.imaginarypart=2;
 800054c:	f04f 0200 	mov.w	r2, #0
 8000550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000554:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	komplexNumber1.realpart=5;
 8000558:	f04f 0200 	mov.w	r2, #0
 800055c:	4b62      	ldr	r3, [pc, #392]	; (80006e8 <main+0x1a8>)
 800055e:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	komplexNumber2=komplexNumber1;
 8000562:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000566:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800056a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800056c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	real=komplexNumber2.realpart;
 8000570:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8000574:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	komplexNumber2.realpart=8;
 8000578:	f04f 0200 	mov.w	r2, #0
 800057c:	4b5b      	ldr	r3, [pc, #364]	; (80006ec <main+0x1ac>)
 800057e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	komplexNumber2.imaginarypart=9;
 8000582:	f04f 0200 	mov.w	r2, #0
 8000586:	4b5a      	ldr	r3, [pc, #360]	; (80006f0 <main+0x1b0>)
 8000588:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	komplex *kpoint;
   realptr=&(komplexNumber1.realpart);
 800058c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000590:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
   imaginaryptr=&(komplexNumber2.imaginarypart);
 8000594:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000598:	3308      	adds	r3, #8
 800059a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	for (int i=0;i<5;i++)
 800059e:	2300      	movs	r3, #0
 80005a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80005a4:	e024      	b.n	80005f0 <main+0xb0>
	{
		komplexNumberArray[i].imaginarypart=i+1;
 80005a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80005aa:	3301      	adds	r3, #1
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff ff5d 	bl	800046c <__aeabi_i2d>
 80005b2:	4602      	mov	r2, r0
 80005b4:	460b      	mov	r3, r1
 80005b6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80005ba:	0109      	lsls	r1, r1, #4
 80005bc:	31e8      	adds	r1, #232	; 0xe8
 80005be:	4439      	add	r1, r7
 80005c0:	39a0      	subs	r1, #160	; 0xa0
 80005c2:	e9c1 2300 	strd	r2, r3, [r1]
		komplexNumberArray[i].realpart=i*2;
 80005c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ff4d 	bl	800046c <__aeabi_i2d>
 80005d2:	4602      	mov	r2, r0
 80005d4:	460b      	mov	r3, r1
 80005d6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80005da:	0109      	lsls	r1, r1, #4
 80005dc:	31e8      	adds	r1, #232	; 0xe8
 80005de:	4439      	add	r1, r7
 80005e0:	39a8      	subs	r1, #168	; 0xa8
 80005e2:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i=0;i<5;i++)
 80005e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80005ea:	3301      	adds	r3, #1
 80005ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80005f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80005f4:	2b04      	cmp	r3, #4
 80005f6:	ddd6      	ble.n	80005a6 <main+0x66>
	}
for (int i=0;i<5;i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80005fe:	e024      	b.n	800064a <main+0x10a>
{
 firstrectangle.corners[i].imaginarypart=i+1;
 8000600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000604:	3301      	adds	r3, #1
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ff30 	bl	800046c <__aeabi_i2d>
 800060c:	4602      	mov	r2, r0
 800060e:	460b      	mov	r3, r1
 8000610:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8000614:	0109      	lsls	r1, r1, #4
 8000616:	31e8      	adds	r1, #232	; 0xe8
 8000618:	4439      	add	r1, r7
 800061a:	39e0      	subs	r1, #224	; 0xe0
 800061c:	e9c1 2300 	strd	r2, r3, [r1]
 firstrectangle.corners[i].realpart=i+2;
 8000620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000624:	3302      	adds	r3, #2
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ff20 	bl	800046c <__aeabi_i2d>
 800062c:	4602      	mov	r2, r0
 800062e:	460b      	mov	r3, r1
 8000630:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8000634:	0109      	lsls	r1, r1, #4
 8000636:	31e8      	adds	r1, #232	; 0xe8
 8000638:	4439      	add	r1, r7
 800063a:	39e8      	subs	r1, #232	; 0xe8
 800063c:	e9c1 2300 	strd	r2, r3, [r1]
for (int i=0;i<5;i++)
 8000640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000644:	3301      	adds	r3, #1
 8000646:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800064a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800064e:	2b04      	cmp	r3, #4
 8000650:	ddd6      	ble.n	8000600 <main+0xc0>
}

monitor=addcomplex(komplexNumber2, komplexNumber1);
 8000652:	ed97 4b2c 	vldr	d4, [r7, #176]	; 0xb0
 8000656:	ed97 5b2e 	vldr	d5, [r7, #184]	; 0xb8
 800065a:	ed97 6b28 	vldr	d6, [r7, #160]	; 0xa0
 800065e:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 8000662:	eeb0 2a44 	vmov.f32	s4, s8
 8000666:	eef0 2a64 	vmov.f32	s5, s9
 800066a:	eeb0 3a45 	vmov.f32	s6, s10
 800066e:	eef0 3a65 	vmov.f32	s7, s11
 8000672:	eeb0 0a46 	vmov.f32	s0, s12
 8000676:	eef0 0a66 	vmov.f32	s1, s13
 800067a:	eeb0 1a47 	vmov.f32	s2, s14
 800067e:	eef0 1a67 	vmov.f32	s3, s15
 8000682:	f000 f83d 	bl	8000700 <addcomplex>
 8000686:	eeb0 6a40 	vmov.f32	s12, s0
 800068a:	eef0 6a60 	vmov.f32	s13, s1
 800068e:	eeb0 7a41 	vmov.f32	s14, s2
 8000692:	eef0 7a61 	vmov.f32	s15, s3
 8000696:	ed87 6b24 	vstr	d6, [r7, #144]	; 0x90
 800069a:	ed87 7b26 	vstr	d7, [r7, #152]	; 0x98
kpoint=&komplexNumber1;
 800069e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80006a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
(*kpoint).realpart=3;
 80006a6:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80006aa:	f04f 0200 	mov.w	r2, #0
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <main+0x1b4>)
 80006b0:	e9c1 2300 	strd	r2, r3, [r1]
(*kpoint).imaginarypart=6;
 80006b4:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80006b8:	f04f 0200 	mov.w	r2, #0
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <main+0x1b8>)
 80006be:	e9c1 2302 	strd	r2, r3, [r1, #8]
kpoint->realpart=9;//(*kpoint).realpart=9;
 80006c2:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80006c6:	f04f 0200 	mov.w	r2, #0
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <main+0x1b0>)
 80006cc:	e9c1 2300 	strd	r2, r3, [r1]
kpoint->imaginarypart=12;
 80006d0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80006d4:	f04f 0200 	mov.w	r2, #0
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <main+0x1bc>)
 80006da:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80006de:	2300      	movs	r3, #0


}//main
 80006e0:	4618      	mov	r0, r3
 80006e2:	37ec      	adds	r7, #236	; 0xec
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd90      	pop	{r4, r7, pc}
 80006e8:	40140000 	.word	0x40140000
 80006ec:	40200000 	.word	0x40200000
 80006f0:	40220000 	.word	0x40220000
 80006f4:	40080000 	.word	0x40080000
 80006f8:	40180000 	.word	0x40180000
 80006fc:	40280000 	.word	0x40280000

08000700 <addcomplex>:
komplex addcomplex( komplex num1,komplex num2)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b095      	sub	sp, #84	; 0x54
 8000704:	af00      	add	r7, sp, #0
 8000706:	eeb0 4a40 	vmov.f32	s8, s0
 800070a:	eef0 4a60 	vmov.f32	s9, s1
 800070e:	eeb0 5a41 	vmov.f32	s10, s2
 8000712:	eef0 5a61 	vmov.f32	s11, s3
 8000716:	eeb0 6a42 	vmov.f32	s12, s4
 800071a:	eef0 6a62 	vmov.f32	s13, s5
 800071e:	eeb0 7a43 	vmov.f32	s14, s6
 8000722:	eef0 7a63 	vmov.f32	s15, s7
 8000726:	ed87 4b08 	vstr	d4, [r7, #32]
 800072a:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 800072e:	ed87 6b04 	vstr	d6, [r7, #16]
 8000732:	ed87 7b06 	vstr	d7, [r7, #24]
	komplex result;
	result.realpart=num1.realpart+num2.realpart;
 8000736:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800073a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800073e:	f7ff fd49 	bl	80001d4 <__adddf3>
 8000742:	4602      	mov	r2, r0
 8000744:	460b      	mov	r3, r1
 8000746:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	result.imaginarypart=num1.imaginarypart+num2.imaginarypart;
 800074a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800074e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000752:	f7ff fd3f 	bl	80001d4 <__adddf3>
 8000756:	4602      	mov	r2, r0
 8000758:	460b      	mov	r3, r1
 800075a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	return result;
 800075e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000762:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000766:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000768:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800076c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000770:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000774:	ec41 0b16 	vmov	d6, r0, r1
 8000778:	ec43 2b17 	vmov	d7, r2, r3
}//addcomplex
 800077c:	eeb0 0a46 	vmov.f32	s0, s12
 8000780:	eef0 0a66 	vmov.f32	s1, s13
 8000784:	eeb0 1a47 	vmov.f32	s2, s14
 8000788:	eef0 1a67 	vmov.f32	s3, s15
 800078c:	3754      	adds	r7, #84	; 0x54
 800078e:	46bd      	mov	sp, r7
 8000790:	bd90      	pop	{r4, r7, pc}

08000792 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <NMI_Handler+0x4>

08000798 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <HardFault_Handler+0x4>

0800079e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <MemManage_Handler+0x4>

080007a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <BusFault_Handler+0x4>

080007aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <UsageFault_Handler+0x4>

080007b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007de:	f000 f83f 	bl	8000860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <SystemInit+0x20>)
 80007ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007f2:	4a05      	ldr	r2, [pc, #20]	; (8000808 <SystemInit+0x20>)
 80007f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800080c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000844 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000812:	490e      	ldr	r1, [pc, #56]	; (800084c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000814:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000818:	e002      	b.n	8000820 <LoopCopyDataInit>

0800081a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800081c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081e:	3304      	adds	r3, #4

08000820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000824:	d3f9      	bcc.n	800081a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000826:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000828:	4c0b      	ldr	r4, [pc, #44]	; (8000858 <LoopFillZerobss+0x26>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800082c:	e001      	b.n	8000832 <LoopFillZerobss>

0800082e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000830:	3204      	adds	r2, #4

08000832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000834:	d3fb      	bcc.n	800082e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000836:	f7ff ffd7 	bl	80007e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800083a:	f000 f825 	bl	8000888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800083e:	f7ff fe7f 	bl	8000540 <main>
  bx  lr    
 8000842:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000844:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800084c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000850:	080008f0 	.word	0x080008f0
  ldr r2, =_sbss
 8000854:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000858:	20000024 	.word	0x20000024

0800085c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC_IRQHandler>
	...

08000860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_IncTick+0x20>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_IncTick+0x24>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4413      	add	r3, r2
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <HAL_IncTick+0x24>)
 8000872:	6013      	str	r3, [r2, #0]
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000000 	.word	0x20000000
 8000884:	20000020 	.word	0x20000020

08000888 <__libc_init_array>:
 8000888:	b570      	push	{r4, r5, r6, lr}
 800088a:	4d0d      	ldr	r5, [pc, #52]	; (80008c0 <__libc_init_array+0x38>)
 800088c:	4c0d      	ldr	r4, [pc, #52]	; (80008c4 <__libc_init_array+0x3c>)
 800088e:	1b64      	subs	r4, r4, r5
 8000890:	10a4      	asrs	r4, r4, #2
 8000892:	2600      	movs	r6, #0
 8000894:	42a6      	cmp	r6, r4
 8000896:	d109      	bne.n	80008ac <__libc_init_array+0x24>
 8000898:	4d0b      	ldr	r5, [pc, #44]	; (80008c8 <__libc_init_array+0x40>)
 800089a:	4c0c      	ldr	r4, [pc, #48]	; (80008cc <__libc_init_array+0x44>)
 800089c:	f000 f818 	bl	80008d0 <_init>
 80008a0:	1b64      	subs	r4, r4, r5
 80008a2:	10a4      	asrs	r4, r4, #2
 80008a4:	2600      	movs	r6, #0
 80008a6:	42a6      	cmp	r6, r4
 80008a8:	d105      	bne.n	80008b6 <__libc_init_array+0x2e>
 80008aa:	bd70      	pop	{r4, r5, r6, pc}
 80008ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80008b0:	4798      	blx	r3
 80008b2:	3601      	adds	r6, #1
 80008b4:	e7ee      	b.n	8000894 <__libc_init_array+0xc>
 80008b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ba:	4798      	blx	r3
 80008bc:	3601      	adds	r6, #1
 80008be:	e7f2      	b.n	80008a6 <__libc_init_array+0x1e>
 80008c0:	080008e8 	.word	0x080008e8
 80008c4:	080008e8 	.word	0x080008e8
 80008c8:	080008e8 	.word	0x080008e8
 80008cc:	080008ec 	.word	0x080008ec

080008d0 <_init>:
 80008d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008d2:	bf00      	nop
 80008d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008d6:	bc08      	pop	{r3}
 80008d8:	469e      	mov	lr, r3
 80008da:	4770      	bx	lr

080008dc <_fini>:
 80008dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008de:	bf00      	nop
 80008e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008e2:	bc08      	pop	{r3}
 80008e4:	469e      	mov	lr, r3
 80008e6:	4770      	bx	lr
