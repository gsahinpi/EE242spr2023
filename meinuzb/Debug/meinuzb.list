
meinuzb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c30  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006db8  08006db8  00016db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e10  08006e10  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08006e10  08006e10  00016e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e18  08006e18  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e18  08006e18  00016e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e1c  08006e1c  00016e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08006e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001c2c  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d28  20001d28  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc57  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000286d  00000000  00000000  0002dd83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  000305f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a00  00000000  00000000  00031128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b49  00000000  00000000  00031b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ebae  00000000  00000000  00054671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3dac  00000000  00000000  0006321f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00126fcb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c60  00000000  00000000  0012701c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006da0 	.word	0x08006da0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08006da0 	.word	0x08006da0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 f944 	bl	800075c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f806 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f86c 	bl	80005b4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004dc:	f005 ff40 	bl	8006360 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <main+0x14>
	...

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b094      	sub	sp, #80	; 0x50
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0320 	add.w	r3, r7, #32
 80004ee:	2230      	movs	r2, #48	; 0x30
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f006 fc4c 	bl	8006d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000508:	2300      	movs	r3, #0
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	4b27      	ldr	r3, [pc, #156]	; (80005ac <SystemClock_Config+0xc8>)
 800050e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000510:	4a26      	ldr	r2, [pc, #152]	; (80005ac <SystemClock_Config+0xc8>)
 8000512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000516:	6413      	str	r3, [r2, #64]	; 0x40
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <SystemClock_Config+0xc8>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <SystemClock_Config+0xcc>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a20      	ldr	r2, [pc, #128]	; (80005b0 <SystemClock_Config+0xcc>)
 800052e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000532:	6013      	str	r3, [r2, #0]
 8000534:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <SystemClock_Config+0xcc>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000540:	2301      	movs	r3, #1
 8000542:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000544:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000548:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000552:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000554:	2304      	movs	r3, #4
 8000556:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000558:	2348      	movs	r3, #72	; 0x48
 800055a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800055c:	2302      	movs	r3, #2
 800055e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000560:	2303      	movs	r3, #3
 8000562:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	f107 0320 	add.w	r3, r7, #32
 8000568:	4618      	mov	r0, r3
 800056a:	f001 feb9 	bl	80022e0 <HAL_RCC_OscConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000574:	f000 f854 	bl	8000620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000578:	230f      	movs	r3, #15
 800057a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057c:	2302      	movs	r3, #2
 800057e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000588:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2102      	movs	r1, #2
 8000594:	4618      	mov	r0, r3
 8000596:	f002 f91b 	bl	80027d0 <HAL_RCC_ClockConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005a0:	f000 f83e 	bl	8000620 <Error_Handler>
  }
}
 80005a4:	bf00      	nop
 80005a6:	3750      	adds	r7, #80	; 0x50
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40007000 	.word	0x40007000

080005b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <MX_GPIO_Init+0x68>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a16      	ldr	r2, [pc, #88]	; (800061c <MX_GPIO_Init+0x68>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <MX_GPIO_Init+0x68>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <MX_GPIO_Init+0x68>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a0f      	ldr	r2, [pc, #60]	; (800061c <MX_GPIO_Init+0x68>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <MX_GPIO_Init+0x68>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_GPIO_Init+0x68>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a08      	ldr	r2, [pc, #32]	; (800061c <MX_GPIO_Init+0x68>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <MX_GPIO_Init+0x68>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	e7fe      	b.n	8000628 <Error_Handler+0x8>
	...

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <HAL_MspInit+0x4c>)
 8000638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063a:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <HAL_MspInit+0x4c>)
 800063c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000640:	6453      	str	r3, [r2, #68]	; 0x44
 8000642:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <HAL_MspInit+0x4c>)
 8000644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <HAL_MspInit+0x4c>)
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	4a08      	ldr	r2, [pc, #32]	; (8000678 <HAL_MspInit+0x4c>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065c:	6413      	str	r3, [r2, #64]	; 0x40
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_MspInit+0x4c>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800066a:	2007      	movs	r0, #7
 800066c:	f000 f9dc 	bl	8000a28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800

0800067c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <NMI_Handler+0x4>

08000682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <HardFault_Handler+0x4>

08000688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800068c:	e7fe      	b.n	800068c <MemManage_Handler+0x4>

0800068e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <BusFault_Handler+0x4>

08000694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <UsageFault_Handler+0x4>

0800069a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c8:	f000 f89a 	bl	8000800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006d4:	4802      	ldr	r0, [pc, #8]	; (80006e0 <OTG_FS_IRQHandler+0x10>)
 80006d6:	f000 fcd5 	bl	8001084 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200015fc 	.word	0x200015fc

080006e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <SystemInit+0x20>)
 80006ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ee:	4a05      	ldr	r2, [pc, #20]	; (8000704 <SystemInit+0x20>)
 80006f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000740 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800070e:	490e      	ldr	r1, [pc, #56]	; (8000748 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000710:	4a0e      	ldr	r2, [pc, #56]	; (800074c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800071c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000724:	4c0b      	ldr	r4, [pc, #44]	; (8000754 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000732:	f7ff ffd7 	bl	80006e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000736:	f006 fb07 	bl	8006d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800073a:	f7ff fec7 	bl	80004cc <main>
  bx  lr    
 800073e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000740:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000748:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800074c:	08006e20 	.word	0x08006e20
  ldr r2, =_sbss
 8000750:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000754:	20001d28 	.word	0x20001d28

08000758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC_IRQHandler>
	...

0800075c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <HAL_Init+0x40>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0d      	ldr	r2, [pc, #52]	; (800079c <HAL_Init+0x40>)
 8000766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800076a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800076c:	4b0b      	ldr	r3, [pc, #44]	; (800079c <HAL_Init+0x40>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a0a      	ldr	r2, [pc, #40]	; (800079c <HAL_Init+0x40>)
 8000772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000776:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <HAL_Init+0x40>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a07      	ldr	r2, [pc, #28]	; (800079c <HAL_Init+0x40>)
 800077e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000784:	2003      	movs	r0, #3
 8000786:	f000 f94f 	bl	8000a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800078a:	2000      	movs	r0, #0
 800078c:	f000 f808 	bl	80007a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000790:	f7ff ff4c 	bl	800062c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023c00 	.word	0x40023c00

080007a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <HAL_InitTick+0x54>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_InitTick+0x58>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4619      	mov	r1, r3
 80007b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f967 	bl	8000a92 <HAL_SYSTICK_Config>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	e00e      	b.n	80007ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b0f      	cmp	r3, #15
 80007d2:	d80a      	bhi.n	80007ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d4:	2200      	movs	r2, #0
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	f000 f92f 	bl	8000a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e0:	4a06      	ldr	r2, [pc, #24]	; (80007fc <HAL_InitTick+0x5c>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007e6:	2300      	movs	r3, #0
 80007e8:	e000      	b.n	80007ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000000 	.word	0x20000000
 80007f8:	20000008 	.word	0x20000008
 80007fc:	20000004 	.word	0x20000004

08000800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_IncTick+0x20>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_IncTick+0x24>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4413      	add	r3, r2
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <HAL_IncTick+0x24>)
 8000812:	6013      	str	r3, [r2, #0]
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20000008 	.word	0x20000008
 8000824:	20000118 	.word	0x20000118

08000828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return uwTick;
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <HAL_GetTick+0x14>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	20000118 	.word	0x20000118

08000840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000848:	f7ff ffee 	bl	8000828 <HAL_GetTick>
 800084c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000858:	d005      	beq.n	8000866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HAL_Delay+0x44>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	461a      	mov	r2, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	4413      	add	r3, r2
 8000864:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000866:	bf00      	nop
 8000868:	f7ff ffde 	bl	8000828 <HAL_GetTick>
 800086c:	4602      	mov	r2, r0
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	429a      	cmp	r2, r3
 8000876:	d8f7      	bhi.n	8000868 <HAL_Delay+0x28>
  {
  }
}
 8000878:	bf00      	nop
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000008 	.word	0x20000008

08000888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a4:	4013      	ands	r3, r2
 80008a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ba:	4a04      	ldr	r2, [pc, #16]	; (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	60d3      	str	r3, [r2, #12]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <__NVIC_GetPriorityGrouping+0x18>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	f003 0307 	and.w	r3, r3, #7
}
 80008de:	4618      	mov	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	db0b      	blt.n	8000916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	f003 021f 	and.w	r2, r3, #31
 8000904:	4907      	ldr	r1, [pc, #28]	; (8000924 <__NVIC_EnableIRQ+0x38>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	095b      	lsrs	r3, r3, #5
 800090c:	2001      	movs	r0, #1
 800090e:	fa00 f202 	lsl.w	r2, r0, r2
 8000912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000e100 	.word	0xe000e100

08000928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	db0a      	blt.n	8000952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	490c      	ldr	r1, [pc, #48]	; (8000974 <__NVIC_SetPriority+0x4c>)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	0112      	lsls	r2, r2, #4
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	440b      	add	r3, r1
 800094c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000950:	e00a      	b.n	8000968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4908      	ldr	r1, [pc, #32]	; (8000978 <__NVIC_SetPriority+0x50>)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	f003 030f 	and.w	r3, r3, #15
 800095e:	3b04      	subs	r3, #4
 8000960:	0112      	lsls	r2, r2, #4
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	440b      	add	r3, r1
 8000966:	761a      	strb	r2, [r3, #24]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000e100 	.word	0xe000e100
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800097c:	b480      	push	{r7}
 800097e:	b089      	sub	sp, #36	; 0x24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	f1c3 0307 	rsb	r3, r3, #7
 8000996:	2b04      	cmp	r3, #4
 8000998:	bf28      	it	cs
 800099a:	2304      	movcs	r3, #4
 800099c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3304      	adds	r3, #4
 80009a2:	2b06      	cmp	r3, #6
 80009a4:	d902      	bls.n	80009ac <NVIC_EncodePriority+0x30>
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3b03      	subs	r3, #3
 80009aa:	e000      	b.n	80009ae <NVIC_EncodePriority+0x32>
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	f04f 32ff 	mov.w	r2, #4294967295
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43da      	mvns	r2, r3
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	401a      	ands	r2, r3
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c4:	f04f 31ff 	mov.w	r1, #4294967295
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	43d9      	mvns	r1, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	4313      	orrs	r3, r2
         );
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3724      	adds	r7, #36	; 0x24
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f4:	d301      	bcc.n	80009fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00f      	b.n	8000a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <SysTick_Config+0x40>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a02:	210f      	movs	r1, #15
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f7ff ff8e 	bl	8000928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <SysTick_Config+0x40>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <SysTick_Config+0x40>)
 8000a14:	2207      	movs	r2, #7
 8000a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	e000e010 	.word	0xe000e010

08000a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff ff29 	bl	8000888 <__NVIC_SetPriorityGrouping>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b086      	sub	sp, #24
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
 8000a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a50:	f7ff ff3e 	bl	80008d0 <__NVIC_GetPriorityGrouping>
 8000a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	68b9      	ldr	r1, [r7, #8]
 8000a5a:	6978      	ldr	r0, [r7, #20]
 8000a5c:	f7ff ff8e 	bl	800097c <NVIC_EncodePriority>
 8000a60:	4602      	mov	r2, r0
 8000a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff5d 	bl	8000928 <__NVIC_SetPriority>
}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff31 	bl	80008ec <__NVIC_EnableIRQ>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff ffa2 	bl	80009e4 <SysTick_Config>
 8000aa0:	4603      	mov	r3, r0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
 8000ac6:	e16b      	b.n	8000da0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ac8:	2201      	movs	r2, #1
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	697a      	ldr	r2, [r7, #20]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	f040 815a 	bne.w	8000d9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 0303 	and.w	r3, r3, #3
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d005      	beq.n	8000afe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d130      	bne.n	8000b60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	2203      	movs	r2, #3
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	4013      	ands	r3, r2
 8000b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	68da      	ldr	r2, [r3, #12]
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b34:	2201      	movs	r2, #1
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4013      	ands	r3, r2
 8000b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	091b      	lsrs	r3, r3, #4
 8000b4a:	f003 0201 	and.w	r2, r3, #1
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 0303 	and.w	r3, r3, #3
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d017      	beq.n	8000b9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	2203      	movs	r2, #3
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	4013      	ands	r3, r2
 8000b82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	689a      	ldr	r2, [r3, #8]
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f003 0303 	and.w	r3, r3, #3
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d123      	bne.n	8000bf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	08da      	lsrs	r2, r3, #3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3208      	adds	r2, #8
 8000bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	f003 0307 	and.w	r3, r3, #7
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	220f      	movs	r2, #15
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	691a      	ldr	r2, [r3, #16]
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	08da      	lsrs	r2, r3, #3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3208      	adds	r2, #8
 8000bea:	69b9      	ldr	r1, [r7, #24]
 8000bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4013      	ands	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f003 0203 	and.w	r2, r3, #3
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	f000 80b4 	beq.w	8000d9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b60      	ldr	r3, [pc, #384]	; (8000db8 <HAL_GPIO_Init+0x30c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a5f      	ldr	r2, [pc, #380]	; (8000db8 <HAL_GPIO_Init+0x30c>)
 8000c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b5d      	ldr	r3, [pc, #372]	; (8000db8 <HAL_GPIO_Init+0x30c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c4e:	4a5b      	ldr	r2, [pc, #364]	; (8000dbc <HAL_GPIO_Init+0x310>)
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	3302      	adds	r3, #2
 8000c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	220f      	movs	r2, #15
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a52      	ldr	r2, [pc, #328]	; (8000dc0 <HAL_GPIO_Init+0x314>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d02b      	beq.n	8000cd2 <HAL_GPIO_Init+0x226>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a51      	ldr	r2, [pc, #324]	; (8000dc4 <HAL_GPIO_Init+0x318>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d025      	beq.n	8000cce <HAL_GPIO_Init+0x222>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a50      	ldr	r2, [pc, #320]	; (8000dc8 <HAL_GPIO_Init+0x31c>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d01f      	beq.n	8000cca <HAL_GPIO_Init+0x21e>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a4f      	ldr	r2, [pc, #316]	; (8000dcc <HAL_GPIO_Init+0x320>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d019      	beq.n	8000cc6 <HAL_GPIO_Init+0x21a>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a4e      	ldr	r2, [pc, #312]	; (8000dd0 <HAL_GPIO_Init+0x324>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d013      	beq.n	8000cc2 <HAL_GPIO_Init+0x216>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a4d      	ldr	r2, [pc, #308]	; (8000dd4 <HAL_GPIO_Init+0x328>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d00d      	beq.n	8000cbe <HAL_GPIO_Init+0x212>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a4c      	ldr	r2, [pc, #304]	; (8000dd8 <HAL_GPIO_Init+0x32c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d007      	beq.n	8000cba <HAL_GPIO_Init+0x20e>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a4b      	ldr	r2, [pc, #300]	; (8000ddc <HAL_GPIO_Init+0x330>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d101      	bne.n	8000cb6 <HAL_GPIO_Init+0x20a>
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	e00e      	b.n	8000cd4 <HAL_GPIO_Init+0x228>
 8000cb6:	2308      	movs	r3, #8
 8000cb8:	e00c      	b.n	8000cd4 <HAL_GPIO_Init+0x228>
 8000cba:	2306      	movs	r3, #6
 8000cbc:	e00a      	b.n	8000cd4 <HAL_GPIO_Init+0x228>
 8000cbe:	2305      	movs	r3, #5
 8000cc0:	e008      	b.n	8000cd4 <HAL_GPIO_Init+0x228>
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x228>
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e004      	b.n	8000cd4 <HAL_GPIO_Init+0x228>
 8000cca:	2302      	movs	r3, #2
 8000ccc:	e002      	b.n	8000cd4 <HAL_GPIO_Init+0x228>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e000      	b.n	8000cd4 <HAL_GPIO_Init+0x228>
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	69fa      	ldr	r2, [r7, #28]
 8000cd6:	f002 0203 	and.w	r2, r2, #3
 8000cda:	0092      	lsls	r2, r2, #2
 8000cdc:	4093      	lsls	r3, r2
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ce4:	4935      	ldr	r1, [pc, #212]	; (8000dbc <HAL_GPIO_Init+0x310>)
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	089b      	lsrs	r3, r3, #2
 8000cea:	3302      	adds	r3, #2
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cf2:	4b3b      	ldr	r3, [pc, #236]	; (8000de0 <HAL_GPIO_Init+0x334>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d003      	beq.n	8000d16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d16:	4a32      	ldr	r2, [pc, #200]	; (8000de0 <HAL_GPIO_Init+0x334>)
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d1c:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <HAL_GPIO_Init+0x334>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d40:	4a27      	ldr	r2, [pc, #156]	; (8000de0 <HAL_GPIO_Init+0x334>)
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d46:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <HAL_GPIO_Init+0x334>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4013      	ands	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d6a:	4a1d      	ldr	r2, [pc, #116]	; (8000de0 <HAL_GPIO_Init+0x334>)
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <HAL_GPIO_Init+0x334>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d94:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <HAL_GPIO_Init+0x334>)
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	61fb      	str	r3, [r7, #28]
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	2b0f      	cmp	r3, #15
 8000da4:	f67f ae90 	bls.w	8000ac8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40013800 	.word	0x40013800
 8000dc0:	40020000 	.word	0x40020000
 8000dc4:	40020400 	.word	0x40020400
 8000dc8:	40020800 	.word	0x40020800
 8000dcc:	40020c00 	.word	0x40020c00
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40021400 	.word	0x40021400
 8000dd8:	40021800 	.word	0x40021800
 8000ddc:	40021c00 	.word	0x40021c00
 8000de0:	40013c00 	.word	0x40013c00

08000de4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de6:	b08f      	sub	sp, #60	; 0x3c
 8000de8:	af0a      	add	r7, sp, #40	; 0x28
 8000dea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d101      	bne.n	8000df6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e10f      	b.n	8001016 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d106      	bne.n	8000e16 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f005 fc85 	bl	8006720 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2203      	movs	r2, #3
 8000e1a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d102      	bne.n	8000e30 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 ffd8 	bl	8002dea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	687e      	ldr	r6, [r7, #4]
 8000e42:	466d      	mov	r5, sp
 8000e44:	f106 0410 	add.w	r4, r6, #16
 8000e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e54:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e58:	1d33      	adds	r3, r6, #4
 8000e5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e5c:	6838      	ldr	r0, [r7, #0]
 8000e5e:	f001 feaf 	bl	8002bc0 <USB_CoreInit>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d005      	beq.n	8000e74 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e0d0      	b.n	8001016 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 ffc6 	bl	8002e0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e04a      	b.n	8000f1c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e86:	7bfa      	ldrb	r2, [r7, #15]
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	4413      	add	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	440b      	add	r3, r1
 8000e94:	333d      	adds	r3, #61	; 0x3d
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e9a:	7bfa      	ldrb	r2, [r7, #15]
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	333c      	adds	r3, #60	; 0x3c
 8000eaa:	7bfa      	ldrb	r2, [r7, #15]
 8000eac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000eae:	7bfa      	ldrb	r2, [r7, #15]
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	b298      	uxth	r0, r3
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	4413      	add	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	3344      	adds	r3, #68	; 0x44
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ec6:	7bfa      	ldrb	r2, [r7, #15]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	4413      	add	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	3340      	adds	r3, #64	; 0x40
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000eda:	7bfa      	ldrb	r2, [r7, #15]
 8000edc:	6879      	ldr	r1, [r7, #4]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	4413      	add	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	3348      	adds	r3, #72	; 0x48
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000eee:	7bfa      	ldrb	r2, [r7, #15]
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	4413      	add	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	440b      	add	r3, r1
 8000efc:	334c      	adds	r3, #76	; 0x4c
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f02:	7bfa      	ldrb	r2, [r7, #15]
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	4413      	add	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	440b      	add	r3, r1
 8000f10:	3354      	adds	r3, #84	; 0x54
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d3af      	bcc.n	8000e86 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
 8000f2a:	e044      	b.n	8000fb6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f2c:	7bfa      	ldrb	r2, [r7, #15]
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	4413      	add	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f42:	7bfa      	ldrb	r2, [r7, #15]
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000f54:	7bfa      	ldrb	r2, [r7, #15]
 8000f56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f58:	7bfa      	ldrb	r2, [r7, #15]
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	4413      	add	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f9a:	7bfa      	ldrb	r2, [r7, #15]
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d3b5      	bcc.n	8000f2c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	687e      	ldr	r6, [r7, #4]
 8000fc8:	466d      	mov	r5, sp
 8000fca:	f106 0410 	add.w	r4, r6, #16
 8000fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fda:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fde:	1d33      	adds	r3, r6, #4
 8000fe0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fe2:	6838      	ldr	r0, [r7, #0]
 8000fe4:	f001 ff5e 	bl	8002ea4 <USB_DevInit>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d005      	beq.n	8000ffa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00d      	b.n	8001016 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2201      	movs	r2, #1
 8001006:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f003 f8ad 	bl	800416e <USB_DevDisconnect>

  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800101e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001032:	2b01      	cmp	r3, #1
 8001034:	d101      	bne.n	800103a <HAL_PCD_Start+0x1c>
 8001036:	2302      	movs	r3, #2
 8001038:	e020      	b.n	800107c <HAL_PCD_Start+0x5e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2201      	movs	r2, #1
 800103e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001046:	2b01      	cmp	r3, #1
 8001048:	d109      	bne.n	800105e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800104e:	2b01      	cmp	r3, #1
 8001050:	d005      	beq.n	800105e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001056:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f001 feb0 	bl	8002dc8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f003 f85d 	bl	800412c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b08d      	sub	sp, #52	; 0x34
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001092:	6a3b      	ldr	r3, [r7, #32]
 8001094:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f003 f91b 	bl	80042d6 <USB_GetMode>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f040 848a 	bne.w	80019bc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 f87f 	bl	80041b0 <USB_ReadInterrupts>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 8480 	beq.w	80019ba <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	0a1b      	lsrs	r3, r3, #8
 80010c4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 f86c 	bl	80041b0 <USB_ReadInterrupts>
 80010d8:	4603      	mov	r3, r0
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d107      	bne.n	80010f2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	695a      	ldr	r2, [r3, #20]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f002 0202 	and.w	r2, r2, #2
 80010f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f003 f85a 	bl	80041b0 <USB_ReadInterrupts>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	2b10      	cmp	r3, #16
 8001104:	d161      	bne.n	80011ca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	699a      	ldr	r2, [r3, #24]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0210 	bic.w	r2, r2, #16
 8001114:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001116:	6a3b      	ldr	r3, [r7, #32]
 8001118:	6a1b      	ldr	r3, [r3, #32]
 800111a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	f003 020f 	and.w	r2, r3, #15
 8001122:	4613      	mov	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	3304      	adds	r3, #4
 8001134:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	0c5b      	lsrs	r3, r3, #17
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	2b02      	cmp	r3, #2
 8001140:	d124      	bne.n	800118c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d035      	beq.n	80011ba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001158:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800115c:	b29b      	uxth	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	6a38      	ldr	r0, [r7, #32]
 8001162:	f002 fe91 	bl	8003e88 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	691a      	ldr	r2, [r3, #16]
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001172:	441a      	add	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	6a1a      	ldr	r2, [r3, #32]
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	091b      	lsrs	r3, r3, #4
 8001180:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001184:	441a      	add	r2, r3
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	621a      	str	r2, [r3, #32]
 800118a:	e016      	b.n	80011ba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	0c5b      	lsrs	r3, r3, #17
 8001190:	f003 030f 	and.w	r3, r3, #15
 8001194:	2b06      	cmp	r3, #6
 8001196:	d110      	bne.n	80011ba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800119e:	2208      	movs	r2, #8
 80011a0:	4619      	mov	r1, r3
 80011a2:	6a38      	ldr	r0, [r7, #32]
 80011a4:	f002 fe70 	bl	8003e88 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	6a1a      	ldr	r2, [r3, #32]
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	091b      	lsrs	r3, r3, #4
 80011b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011b4:	441a      	add	r2, r3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	699a      	ldr	r2, [r3, #24]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f042 0210 	orr.w	r2, r2, #16
 80011c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f002 ffee 	bl	80041b0 <USB_ReadInterrupts>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011de:	f040 80a7 	bne.w	8001330 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 fff3 	bl	80041d6 <USB_ReadDevAllOutEpInterrupt>
 80011f0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80011f2:	e099      	b.n	8001328 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80011f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 808e 	beq.w	800131c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	4611      	mov	r1, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f003 f817 	bl	800423e <USB_ReadDevOutEPInterrupt>
 8001210:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00c      	beq.n	8001236 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	015a      	lsls	r2, r3, #5
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	4413      	add	r3, r2
 8001224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001228:	461a      	mov	r2, r3
 800122a:	2301      	movs	r3, #1
 800122c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800122e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 fec3 	bl	8001fbc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00c      	beq.n	800125a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	015a      	lsls	r2, r3, #5
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	4413      	add	r3, r2
 8001248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800124c:	461a      	mov	r2, r3
 800124e:	2308      	movs	r3, #8
 8001250:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 ff99 	bl	800218c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	f003 0310 	and.w	r3, r3, #16
 8001260:	2b00      	cmp	r3, #0
 8001262:	d008      	beq.n	8001276 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	015a      	lsls	r2, r3, #5
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	4413      	add	r3, r2
 800126c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001270:	461a      	mov	r2, r3
 8001272:	2310      	movs	r3, #16
 8001274:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d030      	beq.n	80012e2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001288:	2b80      	cmp	r3, #128	; 0x80
 800128a:	d109      	bne.n	80012a0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800129a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80012a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a2:	4613      	mov	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	3304      	adds	r3, #4
 80012b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	78db      	ldrb	r3, [r3, #3]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d108      	bne.n	80012d0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2200      	movs	r2, #0
 80012c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4619      	mov	r1, r3
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f005 fb2e 	bl	800692c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	015a      	lsls	r2, r3, #5
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	4413      	add	r3, r2
 80012d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012dc:	461a      	mov	r2, r3
 80012de:	2302      	movs	r3, #2
 80012e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	f003 0320 	and.w	r3, r3, #32
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d008      	beq.n	80012fe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	015a      	lsls	r2, r3, #5
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	4413      	add	r3, r2
 80012f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012f8:	461a      	mov	r2, r3
 80012fa:	2320      	movs	r3, #32
 80012fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d009      	beq.n	800131c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	015a      	lsls	r2, r3, #5
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	4413      	add	r3, r2
 8001310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001314:	461a      	mov	r2, r3
 8001316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	3301      	adds	r3, #1
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001324:	085b      	lsrs	r3, r3, #1
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132a:	2b00      	cmp	r3, #0
 800132c:	f47f af62 	bne.w	80011f4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f002 ff3b 	bl	80041b0 <USB_ReadInterrupts>
 800133a:	4603      	mov	r3, r0
 800133c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001340:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001344:	f040 80db 	bne.w	80014fe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f002 ff5c 	bl	800420a <USB_ReadDevAllInEpInterrupt>
 8001352:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001358:	e0cd      	b.n	80014f6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800135a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 80c2 	beq.w	80014ea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f002 ff82 	bl	800427a <USB_ReadDevInEPInterrupt>
 8001376:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d057      	beq.n	8001432 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	f003 030f 	and.w	r3, r3, #15
 8001388:	2201      	movs	r2, #1
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43db      	mvns	r3, r3
 800139c:	69f9      	ldr	r1, [r7, #28]
 800139e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80013a2:	4013      	ands	r3, r2
 80013a4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	015a      	lsls	r2, r3, #5
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	4413      	add	r3, r2
 80013ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013b2:	461a      	mov	r2, r3
 80013b4:	2301      	movs	r3, #1
 80013b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d132      	bne.n	8001426 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c4:	4613      	mov	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	4413      	add	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	334c      	adds	r3, #76	; 0x4c
 80013d0:	6819      	ldr	r1, [r3, #0]
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d6:	4613      	mov	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4413      	add	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4403      	add	r3, r0
 80013e0:	3348      	adds	r3, #72	; 0x48
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4419      	add	r1, r3
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ea:	4613      	mov	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4403      	add	r3, r0
 80013f4:	334c      	adds	r3, #76	; 0x4c
 80013f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d113      	bne.n	8001426 <HAL_PCD_IRQHandler+0x3a2>
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001402:	4613      	mov	r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	4413      	add	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	3354      	adds	r3, #84	; 0x54
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d108      	bne.n	8001426 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6818      	ldr	r0, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800141e:	461a      	mov	r2, r3
 8001420:	2101      	movs	r1, #1
 8001422:	f002 ff89 	bl	8004338 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4619      	mov	r1, r3
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f005 f9f8 	bl	8006822 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	2b00      	cmp	r3, #0
 800143a:	d008      	beq.n	800144e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	015a      	lsls	r2, r3, #5
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	4413      	add	r3, r2
 8001444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001448:	461a      	mov	r2, r3
 800144a:	2308      	movs	r3, #8
 800144c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	015a      	lsls	r2, r3, #5
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	4413      	add	r3, r2
 8001460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001464:	461a      	mov	r2, r3
 8001466:	2310      	movs	r3, #16
 8001468:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001470:	2b00      	cmp	r3, #0
 8001472:	d008      	beq.n	8001486 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	015a      	lsls	r2, r3, #5
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	4413      	add	r3, r2
 800147c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001480:	461a      	mov	r2, r3
 8001482:	2340      	movs	r3, #64	; 0x40
 8001484:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d023      	beq.n	80014d8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001492:	6a38      	ldr	r0, [r7, #32]
 8001494:	f001 fe6a 	bl	800316c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149a:	4613      	mov	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	3338      	adds	r3, #56	; 0x38
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	3304      	adds	r3, #4
 80014aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	78db      	ldrb	r3, [r3, #3]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d108      	bne.n	80014c6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	2200      	movs	r2, #0
 80014b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4619      	mov	r1, r3
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f005 fa45 	bl	8006950 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	015a      	lsls	r2, r3, #5
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	4413      	add	r3, r2
 80014ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014d2:	461a      	mov	r2, r3
 80014d4:	2302      	movs	r3, #2
 80014d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 fcdb 	bl	8001ea0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	3301      	adds	r3, #1
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f2:	085b      	lsrs	r3, r3, #1
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f47f af2e 	bne.w	800135a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fe54 	bl	80041b0 <USB_ReadInterrupts>
 8001508:	4603      	mov	r3, r0
 800150a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800150e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001512:	d122      	bne.n	800155a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001522:	f023 0301 	bic.w	r3, r3, #1
 8001526:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800152e:	2b01      	cmp	r3, #1
 8001530:	d108      	bne.n	8001544 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800153a:	2100      	movs	r1, #0
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 fec3 	bl	80022c8 <HAL_PCDEx_LPM_Callback>
 8001542:	e002      	b.n	800154a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f005 f9e3 	bl	8006910 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	695a      	ldr	r2, [r3, #20]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001558:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f002 fe26 	bl	80041b0 <USB_ReadInterrupts>
 8001564:	4603      	mov	r3, r0
 8001566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800156a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800156e:	d112      	bne.n	8001596 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b01      	cmp	r3, #1
 800157e:	d102      	bne.n	8001586 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f005 f99f 	bl	80068c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001594:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f002 fe08 	bl	80041b0 <USB_ReadInterrupts>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015aa:	f040 80b7 	bne.w	800171c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	69fa      	ldr	r2, [r7, #28]
 80015b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2110      	movs	r1, #16
 80015c8:	4618      	mov	r0, r3
 80015ca:	f001 fdcf 	bl	800316c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015d2:	e046      	b.n	8001662 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80015d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d6:	015a      	lsls	r2, r3, #5
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	4413      	add	r3, r2
 80015dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e0:	461a      	mov	r2, r3
 80015e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ea:	015a      	lsls	r2, r3, #5
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	4413      	add	r3, r2
 80015f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015f8:	0151      	lsls	r1, r2, #5
 80015fa:	69fa      	ldr	r2, [r7, #28]
 80015fc:	440a      	add	r2, r1
 80015fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001602:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001606:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160a:	015a      	lsls	r2, r3, #5
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	4413      	add	r3, r2
 8001610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001614:	461a      	mov	r2, r3
 8001616:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800161a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161e:	015a      	lsls	r2, r3, #5
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	4413      	add	r3, r2
 8001624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800162c:	0151      	lsls	r1, r2, #5
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	440a      	add	r2, r1
 8001632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001636:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800163a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163e:	015a      	lsls	r2, r3, #5
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	4413      	add	r3, r2
 8001644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800164c:	0151      	lsls	r1, r2, #5
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	440a      	add	r2, r1
 8001652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001656:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800165a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165e:	3301      	adds	r3, #1
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001668:	429a      	cmp	r2, r3
 800166a:	d3b3      	bcc.n	80015d4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	69fa      	ldr	r2, [r7, #28]
 8001676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800167a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800167e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	2b00      	cmp	r3, #0
 8001686:	d016      	beq.n	80016b6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800168e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001698:	f043 030b 	orr.w	r3, r3, #11
 800169c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a8:	69fa      	ldr	r2, [r7, #28]
 80016aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ae:	f043 030b 	orr.w	r3, r3, #11
 80016b2:	6453      	str	r3, [r2, #68]	; 0x44
 80016b4:	e015      	b.n	80016e2 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016c8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80016cc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016dc:	f043 030b 	orr.w	r3, r3, #11
 80016e0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80016f4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001706:	461a      	mov	r2, r3
 8001708:	f002 fe16 	bl	8004338 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800171a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f002 fd45 	bl	80041b0 <USB_ReadInterrupts>
 8001726:	4603      	mov	r3, r0
 8001728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800172c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001730:	d124      	bne.n	800177c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f002 fddb 	bl	80042f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f001 fd90 	bl	8003266 <USB_GetDevSpeed>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681c      	ldr	r4, [r3, #0]
 8001752:	f001 fa29 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8001756:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800175c:	b2db      	uxtb	r3, r3
 800175e:	461a      	mov	r2, r3
 8001760:	4620      	mov	r0, r4
 8001762:	f001 fa8f 	bl	8002c84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f005 f883 	bl	8006872 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	695a      	ldr	r2, [r3, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800177a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f002 fd15 	bl	80041b0 <USB_ReadInterrupts>
 8001786:	4603      	mov	r3, r0
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b08      	cmp	r3, #8
 800178e:	d10a      	bne.n	80017a6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f005 f860 	bl	8006856 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	695a      	ldr	r2, [r3, #20]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f002 0208 	and.w	r2, r2, #8
 80017a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f002 fd00 	bl	80041b0 <USB_ReadInterrupts>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b6:	2b80      	cmp	r3, #128	; 0x80
 80017b8:	d122      	bne.n	8001800 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017c6:	2301      	movs	r3, #1
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ca:	e014      	b.n	80017f6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d0:	4613      	mov	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	4413      	add	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d105      	bne.n	80017f0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	4619      	mov	r1, r3
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 fb27 	bl	8001e3e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	3301      	adds	r3, #1
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d3e5      	bcc.n	80017cc <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f002 fcd3 	bl	80041b0 <USB_ReadInterrupts>
 800180a:	4603      	mov	r3, r0
 800180c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001814:	d13b      	bne.n	800188e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001816:	2301      	movs	r3, #1
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	e02b      	b.n	8001874 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	015a      	lsls	r2, r3, #5
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	4413      	add	r3, r2
 8001824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	3340      	adds	r3, #64	; 0x40
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d115      	bne.n	800186e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001842:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001844:	2b00      	cmp	r3, #0
 8001846:	da12      	bge.n	800186e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184c:	4613      	mov	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	4413      	add	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	333f      	adds	r3, #63	; 0x3f
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	b2db      	uxtb	r3, r3
 8001860:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001864:	b2db      	uxtb	r3, r3
 8001866:	4619      	mov	r1, r3
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 fae8 	bl	8001e3e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	3301      	adds	r3, #1
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187a:	429a      	cmp	r2, r3
 800187c:	d3ce      	bcc.n	800181c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800188c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f002 fc8c 	bl	80041b0 <USB_ReadInterrupts>
 8001898:	4603      	mov	r3, r0
 800189a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800189e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018a2:	d155      	bne.n	8001950 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018a4:	2301      	movs	r3, #1
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
 80018a8:	e045      	b.n	8001936 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	015a      	lsls	r2, r3, #5
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	4413      	add	r3, r2
 80018b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018be:	4613      	mov	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4413      	add	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d12e      	bne.n	8001930 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018d2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	da2b      	bge.n	8001930 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80018e4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d121      	bne.n	8001930 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f0:	4613      	mov	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80018fe:	2201      	movs	r2, #1
 8001900:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10a      	bne.n	8001930 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001928:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800192c:	6053      	str	r3, [r2, #4]
            break;
 800192e:	e007      	b.n	8001940 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	3301      	adds	r3, #1
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800193c:	429a      	cmp	r2, r3
 800193e:	d3b4      	bcc.n	80018aa <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800194e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f002 fc2b 	bl	80041b0 <USB_ReadInterrupts>
 800195a:	4603      	mov	r3, r0
 800195c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001964:	d10a      	bne.n	800197c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f005 f804 	bl	8006974 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800197a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f002 fc15 	bl	80041b0 <USB_ReadInterrupts>
 8001986:	4603      	mov	r3, r0
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b04      	cmp	r3, #4
 800198e:	d115      	bne.n	80019bc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f004 fff4 	bl	8006990 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6859      	ldr	r1, [r3, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	e000      	b.n	80019bc <HAL_PCD_IRQHandler+0x938>
      return;
 80019ba:	bf00      	nop
    }
  }
}
 80019bc:	3734      	adds	r7, #52	; 0x34
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd90      	pop	{r4, r7, pc}

080019c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	460b      	mov	r3, r1
 80019cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_PCD_SetAddress+0x1a>
 80019d8:	2302      	movs	r3, #2
 80019da:	e013      	b.n	8001a04 <HAL_PCD_SetAddress+0x42>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	78fa      	ldrb	r2, [r7, #3]
 80019e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f002 fb73 	bl	80040e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	4608      	mov	r0, r1
 8001a16:	4611      	mov	r1, r2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	70fb      	strb	r3, [r7, #3]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	803b      	strh	r3, [r7, #0]
 8001a22:	4613      	mov	r3, r2
 8001a24:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	da0f      	bge.n	8001a52 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	f003 020f 	and.w	r2, r3, #15
 8001a38:	4613      	mov	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	3338      	adds	r3, #56	; 0x38
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	3304      	adds	r3, #4
 8001a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	705a      	strb	r2, [r3, #1]
 8001a50:	e00f      	b.n	8001a72 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	f003 020f 	and.w	r2, r3, #15
 8001a58:	4613      	mov	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	4413      	add	r3, r2
 8001a68:	3304      	adds	r3, #4
 8001a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	f003 030f 	and.w	r3, r3, #15
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a7e:	883a      	ldrh	r2, [r7, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	78ba      	ldrb	r2, [r7, #2]
 8001a88:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	785b      	ldrb	r3, [r3, #1]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d004      	beq.n	8001a9c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a9c:	78bb      	ldrb	r3, [r7, #2]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d102      	bne.n	8001aa8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_PCD_EP_Open+0xaa>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e00e      	b.n	8001ad4 <HAL_PCD_EP_Open+0xc8>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68f9      	ldr	r1, [r7, #12]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 fbf3 	bl	80032b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001ad2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	da0f      	bge.n	8001b10 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	f003 020f 	and.w	r2, r3, #15
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	3338      	adds	r3, #56	; 0x38
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	3304      	adds	r3, #4
 8001b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	705a      	strb	r2, [r3, #1]
 8001b0e:	e00f      	b.n	8001b30 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 020f 	and.w	r2, r3, #15
 8001b16:	4613      	mov	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	3304      	adds	r3, #4
 8001b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_PCD_EP_Close+0x6e>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e00e      	b.n	8001b68 <HAL_PCD_EP_Close+0x8c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68f9      	ldr	r1, [r7, #12]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 fc31 	bl	80033c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b80:	7afb      	ldrb	r3, [r7, #11]
 8001b82:	f003 020f 	and.w	r2, r3, #15
 8001b86:	4613      	mov	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	4413      	add	r3, r2
 8001b96:	3304      	adds	r3, #4
 8001b98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bb2:	7afb      	ldrb	r3, [r7, #11]
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d102      	bne.n	8001bcc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bcc:	7afb      	ldrb	r3, [r7, #11]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d109      	bne.n	8001bea <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	6979      	ldr	r1, [r7, #20]
 8001be4:	f001 ff10 	bl	8003a08 <USB_EP0StartXfer>
 8001be8:	e008      	b.n	8001bfc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	6979      	ldr	r1, [r7, #20]
 8001bf8:	f001 fcbe 	bl	8003578 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	f003 020f 	and.w	r2, r3, #15
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	440b      	add	r3, r1
 8001c24:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001c28:	681b      	ldr	r3, [r3, #0]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	460b      	mov	r3, r1
 8001c44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c46:	7afb      	ldrb	r3, [r7, #11]
 8001c48:	f003 020f 	and.w	r2, r3, #15
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	3338      	adds	r3, #56	; 0x38
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	4413      	add	r3, r2
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2201      	movs	r2, #1
 8001c74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c76:	7afb      	ldrb	r3, [r7, #11]
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d102      	bne.n	8001c90 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c90:	7afb      	ldrb	r3, [r7, #11]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d109      	bne.n	8001cae <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	6979      	ldr	r1, [r7, #20]
 8001ca8:	f001 feae 	bl	8003a08 <USB_EP0StartXfer>
 8001cac:	e008      	b.n	8001cc0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	461a      	mov	r2, r3
 8001cba:	6979      	ldr	r1, [r7, #20]
 8001cbc:	f001 fc5c 	bl	8003578 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	f003 020f 	and.w	r2, r3, #15
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d901      	bls.n	8001ce8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e050      	b.n	8001d8a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	da0f      	bge.n	8001d10 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	f003 020f 	and.w	r2, r3, #15
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	3338      	adds	r3, #56	; 0x38
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	3304      	adds	r3, #4
 8001d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	705a      	strb	r2, [r3, #1]
 8001d0e:	e00d      	b.n	8001d2c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d10:	78fa      	ldrb	r2, [r7, #3]
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	3304      	adds	r3, #4
 8001d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	f003 030f 	and.w	r3, r3, #15
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_PCD_EP_SetStall+0x82>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e01e      	b.n	8001d8a <HAL_PCD_EP_SetStall+0xc0>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68f9      	ldr	r1, [r7, #12]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 f8ec 	bl	8003f38 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10a      	bne.n	8001d80 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	b2d9      	uxtb	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f002 fadc 	bl	8004338 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f003 020f 	and.w	r2, r3, #15
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d901      	bls.n	8001db0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e042      	b.n	8001e36 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	da0f      	bge.n	8001dd8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	f003 020f 	and.w	r2, r3, #15
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	3338      	adds	r3, #56	; 0x38
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	3304      	adds	r3, #4
 8001dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	705a      	strb	r2, [r3, #1]
 8001dd6:	e00f      	b.n	8001df8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	f003 020f 	and.w	r2, r3, #15
 8001dde:	4613      	mov	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	4413      	add	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	3304      	adds	r3, #4
 8001df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dfe:	78fb      	ldrb	r3, [r7, #3]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_PCD_EP_ClrStall+0x86>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e00e      	b.n	8001e36 <HAL_PCD_EP_ClrStall+0xa4>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68f9      	ldr	r1, [r7, #12]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f002 f8f4 	bl	8004014 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	460b      	mov	r3, r1
 8001e48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001e4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	da0c      	bge.n	8001e6c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	f003 020f 	and.w	r2, r3, #15
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	3338      	adds	r3, #56	; 0x38
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	3304      	adds	r3, #4
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	e00c      	b.n	8001e86 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	f003 020f 	and.w	r2, r3, #15
 8001e72:	4613      	mov	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	3304      	adds	r3, #4
 8001e84:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68f9      	ldr	r1, [r7, #12]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f001 ff13 	bl	8003cb8 <USB_EPStopXfer>
 8001e92:	4603      	mov	r3, r0
 8001e94:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001e96:	7afb      	ldrb	r3, [r7, #11]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	3338      	adds	r3, #56	; 0x38
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a1a      	ldr	r2, [r3, #32]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d901      	bls.n	8001ed8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e06c      	b.n	8001fb2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	699a      	ldr	r2, [r3, #24]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d902      	bls.n	8001ef4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	3303      	adds	r3, #3
 8001ef8:	089b      	lsrs	r3, r3, #2
 8001efa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001efc:	e02b      	b.n	8001f56 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	699a      	ldr	r2, [r3, #24]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	69fa      	ldr	r2, [r7, #28]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d902      	bls.n	8001f1a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3303      	adds	r3, #3
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6919      	ldr	r1, [r3, #16]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	4603      	mov	r3, r0
 8001f38:	6978      	ldr	r0, [r7, #20]
 8001f3a:	f001 ff67 	bl	8003e0c <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	441a      	add	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6a1a      	ldr	r2, [r3, #32]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	441a      	add	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d809      	bhi.n	8001f80 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a1a      	ldr	r2, [r3, #32]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d203      	bcs.n	8001f80 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1be      	bne.n	8001efe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	699a      	ldr	r2, [r3, #24]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d811      	bhi.n	8001fb0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	2201      	movs	r2, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	6939      	ldr	r1, [r7, #16]
 8001fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fac:	4013      	ands	r3, r2
 8001fae:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3720      	adds	r7, #32
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	333c      	adds	r3, #60	; 0x3c
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d17b      	bne.n	80020ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d015      	beq.n	8002028 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	4a61      	ldr	r2, [pc, #388]	; (8002184 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	f240 80b9 	bls.w	8002178 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80b3 	beq.w	8002178 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	4413      	add	r3, r2
 800201a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800201e:	461a      	mov	r2, r3
 8002020:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002024:	6093      	str	r3, [r2, #8]
 8002026:	e0a7      	b.n	8002178 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	2b00      	cmp	r3, #0
 8002030:	d009      	beq.n	8002046 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	4413      	add	r3, r2
 800203a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800203e:	461a      	mov	r2, r3
 8002040:	2320      	movs	r3, #32
 8002042:	6093      	str	r3, [r2, #8]
 8002044:	e098      	b.n	8002178 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800204c:	2b00      	cmp	r3, #0
 800204e:	f040 8093 	bne.w	8002178 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	4a4b      	ldr	r2, [pc, #300]	; (8002184 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d90f      	bls.n	800207a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	4413      	add	r3, r2
 800206c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002070:	461a      	mov	r2, r3
 8002072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002076:	6093      	str	r3, [r2, #8]
 8002078:	e07e      	b.n	8002178 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	4413      	add	r3, r2
 800208c:	3304      	adds	r3, #4
 800208e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	69da      	ldr	r2, [r3, #28]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	0159      	lsls	r1, r3, #5
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	440b      	add	r3, r1
 800209c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a6:	1ad2      	subs	r2, r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d114      	bne.n	80020dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020c4:	461a      	mov	r2, r3
 80020c6:	2101      	movs	r1, #1
 80020c8:	f002 f936 	bl	8004338 <USB_EP0_OutStart>
 80020cc:	e006      	b.n	80020dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	441a      	add	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	4619      	mov	r1, r3
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f004 fb82 	bl	80067ec <HAL_PCD_DataOutStageCallback>
 80020e8:	e046      	b.n	8002178 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	4a26      	ldr	r2, [pc, #152]	; (8002188 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d124      	bne.n	800213c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	4413      	add	r3, r2
 8002104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002108:	461a      	mov	r2, r3
 800210a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800210e:	6093      	str	r3, [r2, #8]
 8002110:	e032      	b.n	8002178 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	015a      	lsls	r2, r3, #5
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	4413      	add	r3, r2
 8002124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002128:	461a      	mov	r2, r3
 800212a:	2320      	movs	r3, #32
 800212c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	4619      	mov	r1, r3
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f004 fb59 	bl	80067ec <HAL_PCD_DataOutStageCallback>
 800213a:	e01d      	b.n	8002178 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d114      	bne.n	800216c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d108      	bne.n	800216c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002164:	461a      	mov	r2, r3
 8002166:	2100      	movs	r1, #0
 8002168:	f002 f8e6 	bl	8004338 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	4619      	mov	r1, r3
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f004 fb3a 	bl	80067ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3720      	adds	r7, #32
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	4f54300a 	.word	0x4f54300a
 8002188:	4f54310a 	.word	0x4f54310a

0800218c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	333c      	adds	r3, #60	; 0x3c
 80021a4:	3304      	adds	r3, #4
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4a15      	ldr	r2, [pc, #84]	; (8002214 <PCD_EP_OutSetupPacket_int+0x88>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d90e      	bls.n	80021e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d009      	beq.n	80021e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d8:	461a      	mov	r2, r3
 80021da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f004 faf1 	bl	80067c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <PCD_EP_OutSetupPacket_int+0x88>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d90c      	bls.n	8002208 <PCD_EP_OutSetupPacket_int+0x7c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d108      	bne.n	8002208 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002200:	461a      	mov	r2, r3
 8002202:	2101      	movs	r1, #1
 8002204:	f002 f898 	bl	8004338 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	4f54300a 	.word	0x4f54300a

08002218 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
 8002224:	4613      	mov	r3, r2
 8002226:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d107      	bne.n	8002246 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002236:	883b      	ldrh	r3, [r7, #0]
 8002238:	0419      	lsls	r1, r3, #16
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	430a      	orrs	r2, r1
 8002242:	629a      	str	r2, [r3, #40]	; 0x28
 8002244:	e028      	b.n	8002298 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	4413      	add	r3, r2
 8002252:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002254:	2300      	movs	r3, #0
 8002256:	73fb      	strb	r3, [r7, #15]
 8002258:	e00d      	b.n	8002276 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	3340      	adds	r3, #64	; 0x40
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	0c1b      	lsrs	r3, r3, #16
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	4413      	add	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	3301      	adds	r3, #1
 8002274:	73fb      	strb	r3, [r7, #15]
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	3b01      	subs	r3, #1
 800227c:	429a      	cmp	r2, r3
 800227e:	d3ec      	bcc.n	800225a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002280:	883b      	ldrh	r3, [r7, #0]
 8002282:	0418      	lsls	r0, r3, #16
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6819      	ldr	r1, [r3, #0]
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	3b01      	subs	r3, #1
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	4302      	orrs	r2, r0
 8002290:	3340      	adds	r3, #64	; 0x40
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e267      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d075      	beq.n	80023ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022fe:	4b88      	ldr	r3, [pc, #544]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b04      	cmp	r3, #4
 8002308:	d00c      	beq.n	8002324 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230a:	4b85      	ldr	r3, [pc, #532]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002312:	2b08      	cmp	r3, #8
 8002314:	d112      	bne.n	800233c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002316:	4b82      	ldr	r3, [pc, #520]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002322:	d10b      	bne.n	800233c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	4b7e      	ldr	r3, [pc, #504]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d05b      	beq.n	80023e8 <HAL_RCC_OscConfig+0x108>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d157      	bne.n	80023e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e242      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002344:	d106      	bne.n	8002354 <HAL_RCC_OscConfig+0x74>
 8002346:	4b76      	ldr	r3, [pc, #472]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a75      	ldr	r2, [pc, #468]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e01d      	b.n	8002390 <HAL_RCC_OscConfig+0xb0>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x98>
 800235e:	4b70      	ldr	r3, [pc, #448]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a6f      	ldr	r2, [pc, #444]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b6d      	ldr	r3, [pc, #436]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a6c      	ldr	r2, [pc, #432]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e00b      	b.n	8002390 <HAL_RCC_OscConfig+0xb0>
 8002378:	4b69      	ldr	r3, [pc, #420]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a68      	ldr	r2, [pc, #416]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800237e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	4b66      	ldr	r3, [pc, #408]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a65      	ldr	r2, [pc, #404]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800238a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d013      	beq.n	80023c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7fe fa46 	bl	8000828 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a0:	f7fe fa42 	bl	8000828 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	; 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e207      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b5b      	ldr	r3, [pc, #364]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0xc0>
 80023be:	e014      	b.n	80023ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe fa32 	bl	8000828 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c8:	f7fe fa2e 	bl	8000828 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e1f3      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	4b51      	ldr	r3, [pc, #324]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0xe8>
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d063      	beq.n	80024be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023f6:	4b4a      	ldr	r3, [pc, #296]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800240a:	2b08      	cmp	r3, #8
 800240c:	d11c      	bne.n	8002448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240e:	4b44      	ldr	r3, [pc, #272]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d116      	bne.n	8002448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241a:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_RCC_OscConfig+0x152>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e1c7      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002432:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4937      	ldr	r1, [pc, #220]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002446:	e03a      	b.n	80024be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002450:	4b34      	ldr	r3, [pc, #208]	; (8002524 <HAL_RCC_OscConfig+0x244>)
 8002452:	2201      	movs	r2, #1
 8002454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002456:	f7fe f9e7 	bl	8000828 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800245e:	f7fe f9e3 	bl	8000828 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e1a8      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247c:	4b28      	ldr	r3, [pc, #160]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4925      	ldr	r1, [pc, #148]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800248c:	4313      	orrs	r3, r2
 800248e:	600b      	str	r3, [r1, #0]
 8002490:	e015      	b.n	80024be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002492:	4b24      	ldr	r3, [pc, #144]	; (8002524 <HAL_RCC_OscConfig+0x244>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe f9c6 	bl	8000828 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a0:	f7fe f9c2 	bl	8000828 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e187      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d036      	beq.n	8002538 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d016      	beq.n	8002500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_RCC_OscConfig+0x248>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d8:	f7fe f9a6 	bl	8000828 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e0:	f7fe f9a2 	bl	8000828 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e167      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 80024f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x200>
 80024fe:	e01b      	b.n	8002538 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002500:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_RCC_OscConfig+0x248>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7fe f98f 	bl	8000828 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250c:	e00e      	b.n	800252c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800250e:	f7fe f98b 	bl	8000828 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d907      	bls.n	800252c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e150      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
 8002520:	40023800 	.word	0x40023800
 8002524:	42470000 	.word	0x42470000
 8002528:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252c:	4b88      	ldr	r3, [pc, #544]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800252e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1ea      	bne.n	800250e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8097 	beq.w	8002674 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002546:	2300      	movs	r3, #0
 8002548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254a:	4b81      	ldr	r3, [pc, #516]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10f      	bne.n	8002576 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	4b7d      	ldr	r3, [pc, #500]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	4a7c      	ldr	r2, [pc, #496]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 8002560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002564:	6413      	str	r3, [r2, #64]	; 0x40
 8002566:	4b7a      	ldr	r3, [pc, #488]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002572:	2301      	movs	r3, #1
 8002574:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002576:	4b77      	ldr	r3, [pc, #476]	; (8002754 <HAL_RCC_OscConfig+0x474>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d118      	bne.n	80025b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002582:	4b74      	ldr	r3, [pc, #464]	; (8002754 <HAL_RCC_OscConfig+0x474>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a73      	ldr	r2, [pc, #460]	; (8002754 <HAL_RCC_OscConfig+0x474>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258e:	f7fe f94b 	bl	8000828 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002596:	f7fe f947 	bl	8000828 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e10c      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	4b6a      	ldr	r3, [pc, #424]	; (8002754 <HAL_RCC_OscConfig+0x474>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d106      	bne.n	80025ca <HAL_RCC_OscConfig+0x2ea>
 80025bc:	4b64      	ldr	r3, [pc, #400]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c0:	4a63      	ldr	r2, [pc, #396]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6713      	str	r3, [r2, #112]	; 0x70
 80025c8:	e01c      	b.n	8002604 <HAL_RCC_OscConfig+0x324>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b05      	cmp	r3, #5
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0x30c>
 80025d2:	4b5f      	ldr	r3, [pc, #380]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	4a5e      	ldr	r2, [pc, #376]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025d8:	f043 0304 	orr.w	r3, r3, #4
 80025dc:	6713      	str	r3, [r2, #112]	; 0x70
 80025de:	4b5c      	ldr	r3, [pc, #368]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	4a5b      	ldr	r2, [pc, #364]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ea:	e00b      	b.n	8002604 <HAL_RCC_OscConfig+0x324>
 80025ec:	4b58      	ldr	r3, [pc, #352]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a57      	ldr	r2, [pc, #348]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
 80025f8:	4b55      	ldr	r3, [pc, #340]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	4a54      	ldr	r2, [pc, #336]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025fe:	f023 0304 	bic.w	r3, r3, #4
 8002602:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d015      	beq.n	8002638 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7fe f90c 	bl	8000828 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002612:	e00a      	b.n	800262a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002614:	f7fe f908 	bl	8000828 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e0cb      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262a:	4b49      	ldr	r3, [pc, #292]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0ee      	beq.n	8002614 <HAL_RCC_OscConfig+0x334>
 8002636:	e014      	b.n	8002662 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002638:	f7fe f8f6 	bl	8000828 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263e:	e00a      	b.n	8002656 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002640:	f7fe f8f2 	bl	8000828 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	; 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e0b5      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002656:	4b3e      	ldr	r3, [pc, #248]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ee      	bne.n	8002640 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002662:	7dfb      	ldrb	r3, [r7, #23]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d105      	bne.n	8002674 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002668:	4b39      	ldr	r3, [pc, #228]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	4a38      	ldr	r2, [pc, #224]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800266e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002672:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80a1 	beq.w	80027c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800267e:	4b34      	ldr	r3, [pc, #208]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b08      	cmp	r3, #8
 8002688:	d05c      	beq.n	8002744 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d141      	bne.n	8002716 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002692:	4b31      	ldr	r3, [pc, #196]	; (8002758 <HAL_RCC_OscConfig+0x478>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe f8c6 	bl	8000828 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a0:	f7fe f8c2 	bl	8000828 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e087      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b2:	4b27      	ldr	r3, [pc, #156]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69da      	ldr	r2, [r3, #28]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	019b      	lsls	r3, r3, #6
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	3b01      	subs	r3, #1
 80026d8:	041b      	lsls	r3, r3, #16
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	061b      	lsls	r3, r3, #24
 80026e2:	491b      	ldr	r1, [pc, #108]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e8:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <HAL_RCC_OscConfig+0x478>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ee:	f7fe f89b 	bl	8000828 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f6:	f7fe f897 	bl	8000828 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e05c      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x416>
 8002714:	e054      	b.n	80027c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_RCC_OscConfig+0x478>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7fe f884 	bl	8000828 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002724:	f7fe f880 	bl	8000828 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e045      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x444>
 8002742:	e03d      	b.n	80027c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d107      	bne.n	800275c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e038      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
 8002750:	40023800 	.word	0x40023800
 8002754:	40007000 	.word	0x40007000
 8002758:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800275c:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <HAL_RCC_OscConfig+0x4ec>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d028      	beq.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d121      	bne.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d11a      	bne.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800278c:	4013      	ands	r3, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002792:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002794:	4293      	cmp	r3, r2
 8002796:	d111      	bne.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	085b      	lsrs	r3, r3, #1
 80027a4:	3b01      	subs	r3, #1
 80027a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d107      	bne.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800

080027d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0cc      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e4:	4b68      	ldr	r3, [pc, #416]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d90c      	bls.n	800280c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f2:	4b65      	ldr	r3, [pc, #404]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b63      	ldr	r3, [pc, #396]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0b8      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002824:	4b59      	ldr	r3, [pc, #356]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4a58      	ldr	r2, [pc, #352]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800282e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800283c:	4b53      	ldr	r3, [pc, #332]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4a52      	ldr	r2, [pc, #328]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002848:	4b50      	ldr	r3, [pc, #320]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	494d      	ldr	r1, [pc, #308]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	4313      	orrs	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d044      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	4b47      	ldr	r3, [pc, #284]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d119      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e07f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d003      	beq.n	800288e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288a:	2b03      	cmp	r3, #3
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288e:	4b3f      	ldr	r3, [pc, #252]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e06f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289e:	4b3b      	ldr	r3, [pc, #236]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e067      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ae:	4b37      	ldr	r3, [pc, #220]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f023 0203 	bic.w	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4934      	ldr	r1, [pc, #208]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c0:	f7fd ffb2 	bl	8000828 <HAL_GetTick>
 80028c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	e00a      	b.n	80028de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c8:	f7fd ffae 	bl	8000828 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e04f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 020c 	and.w	r2, r3, #12
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d1eb      	bne.n	80028c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028f0:	4b25      	ldr	r3, [pc, #148]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d20c      	bcs.n	8002918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b20      	ldr	r3, [pc, #128]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e032      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4916      	ldr	r1, [pc, #88]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	490e      	ldr	r1, [pc, #56]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002956:	f000 f821 	bl	800299c <HAL_RCC_GetSysClockFreq>
 800295a:	4602      	mov	r2, r0
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	490a      	ldr	r1, [pc, #40]	; (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 8002968:	5ccb      	ldrb	r3, [r1, r3]
 800296a:	fa22 f303 	lsr.w	r3, r2, r3
 800296e:	4a09      	ldr	r2, [pc, #36]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd ff12 	bl	80007a0 <HAL_InitTick>

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40023c00 	.word	0x40023c00
 800298c:	40023800 	.word	0x40023800
 8002990:	08006e00 	.word	0x08006e00
 8002994:	20000000 	.word	0x20000000
 8002998:	20000004 	.word	0x20000004

0800299c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800299c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a0:	b094      	sub	sp, #80	; 0x50
 80029a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	647b      	str	r3, [r7, #68]	; 0x44
 80029a8:	2300      	movs	r3, #0
 80029aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029ac:	2300      	movs	r3, #0
 80029ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b4:	4b79      	ldr	r3, [pc, #484]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d00d      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x40>
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	f200 80e1 	bhi.w	8002b88 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x34>
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d003      	beq.n	80029d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ce:	e0db      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029d0:	4b73      	ldr	r3, [pc, #460]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x204>)
 80029d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029d4:	e0db      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029d6:	4b73      	ldr	r3, [pc, #460]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x208>)
 80029d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029da:	e0d8      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029dc:	4b6f      	ldr	r3, [pc, #444]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029e6:	4b6d      	ldr	r3, [pc, #436]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d063      	beq.n	8002aba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f2:	4b6a      	ldr	r3, [pc, #424]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	099b      	lsrs	r3, r3, #6
 80029f8:	2200      	movs	r2, #0
 80029fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80029fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a04:	633b      	str	r3, [r7, #48]	; 0x30
 8002a06:	2300      	movs	r3, #0
 8002a08:	637b      	str	r3, [r7, #52]	; 0x34
 8002a0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a0e:	4622      	mov	r2, r4
 8002a10:	462b      	mov	r3, r5
 8002a12:	f04f 0000 	mov.w	r0, #0
 8002a16:	f04f 0100 	mov.w	r1, #0
 8002a1a:	0159      	lsls	r1, r3, #5
 8002a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a20:	0150      	lsls	r0, r2, #5
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4621      	mov	r1, r4
 8002a28:	1a51      	subs	r1, r2, r1
 8002a2a:	6139      	str	r1, [r7, #16]
 8002a2c:	4629      	mov	r1, r5
 8002a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a40:	4659      	mov	r1, fp
 8002a42:	018b      	lsls	r3, r1, #6
 8002a44:	4651      	mov	r1, sl
 8002a46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a4a:	4651      	mov	r1, sl
 8002a4c:	018a      	lsls	r2, r1, #6
 8002a4e:	4651      	mov	r1, sl
 8002a50:	ebb2 0801 	subs.w	r8, r2, r1
 8002a54:	4659      	mov	r1, fp
 8002a56:	eb63 0901 	sbc.w	r9, r3, r1
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a6e:	4690      	mov	r8, r2
 8002a70:	4699      	mov	r9, r3
 8002a72:	4623      	mov	r3, r4
 8002a74:	eb18 0303 	adds.w	r3, r8, r3
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	462b      	mov	r3, r5
 8002a7c:	eb49 0303 	adc.w	r3, r9, r3
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a8e:	4629      	mov	r1, r5
 8002a90:	024b      	lsls	r3, r1, #9
 8002a92:	4621      	mov	r1, r4
 8002a94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a98:	4621      	mov	r1, r4
 8002a9a:	024a      	lsls	r2, r1, #9
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002aac:	f7fd fb8c 	bl	80001c8 <__aeabi_uldivmod>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ab8:	e058      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aba:	4b38      	ldr	r3, [pc, #224]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	099b      	lsrs	r3, r3, #6
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002aca:	623b      	str	r3, [r7, #32]
 8002acc:	2300      	movs	r3, #0
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ad4:	4642      	mov	r2, r8
 8002ad6:	464b      	mov	r3, r9
 8002ad8:	f04f 0000 	mov.w	r0, #0
 8002adc:	f04f 0100 	mov.w	r1, #0
 8002ae0:	0159      	lsls	r1, r3, #5
 8002ae2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ae6:	0150      	lsls	r0, r2, #5
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4641      	mov	r1, r8
 8002aee:	ebb2 0a01 	subs.w	sl, r2, r1
 8002af2:	4649      	mov	r1, r9
 8002af4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b0c:	ebb2 040a 	subs.w	r4, r2, sl
 8002b10:	eb63 050b 	sbc.w	r5, r3, fp
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	00eb      	lsls	r3, r5, #3
 8002b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b22:	00e2      	lsls	r2, r4, #3
 8002b24:	4614      	mov	r4, r2
 8002b26:	461d      	mov	r5, r3
 8002b28:	4643      	mov	r3, r8
 8002b2a:	18e3      	adds	r3, r4, r3
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	464b      	mov	r3, r9
 8002b30:	eb45 0303 	adc.w	r3, r5, r3
 8002b34:	607b      	str	r3, [r7, #4]
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b42:	4629      	mov	r1, r5
 8002b44:	028b      	lsls	r3, r1, #10
 8002b46:	4621      	mov	r1, r4
 8002b48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b4c:	4621      	mov	r1, r4
 8002b4e:	028a      	lsls	r2, r1, #10
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b56:	2200      	movs	r2, #0
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	61fa      	str	r2, [r7, #28]
 8002b5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b60:	f7fd fb32 	bl	80001c8 <__aeabi_uldivmod>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4613      	mov	r3, r2
 8002b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	0c1b      	lsrs	r3, r3, #16
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	3301      	adds	r3, #1
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b86:	e002      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3750      	adds	r7, #80	; 0x50
 8002b94:	46bd      	mov	sp, r7
 8002b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	00f42400 	.word	0x00f42400
 8002ba4:	007a1200 	.word	0x007a1200

08002ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bae:	681b      	ldr	r3, [r3, #0]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	20000000 	.word	0x20000000

08002bc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	f107 001c 	add.w	r0, r7, #28
 8002bce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d122      	bne.n	8002c1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d105      	bne.n	8002c12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f001 fbee 	bl	80043f4 <USB_CoreReset>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	73fb      	strb	r3, [r7, #15]
 8002c1c:	e01a      	b.n	8002c54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f001 fbe2 	bl	80043f4 <USB_CoreReset>
 8002c30:	4603      	mov	r3, r0
 8002c32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	639a      	str	r2, [r3, #56]	; 0x38
 8002c46:	e005      	b.n	8002c54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d10b      	bne.n	8002c72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f043 0206 	orr.w	r2, r3, #6
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f043 0220 	orr.w	r2, r3, #32
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c7e:	b004      	add	sp, #16
 8002c80:	4770      	bx	lr
	...

08002c84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d165      	bne.n	8002d64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4a41      	ldr	r2, [pc, #260]	; (8002da0 <USB_SetTurnaroundTime+0x11c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d906      	bls.n	8002cae <USB_SetTurnaroundTime+0x2a>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4a40      	ldr	r2, [pc, #256]	; (8002da4 <USB_SetTurnaroundTime+0x120>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d202      	bcs.n	8002cae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002ca8:	230f      	movs	r3, #15
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	e062      	b.n	8002d74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4a3c      	ldr	r2, [pc, #240]	; (8002da4 <USB_SetTurnaroundTime+0x120>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d306      	bcc.n	8002cc4 <USB_SetTurnaroundTime+0x40>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	4a3b      	ldr	r2, [pc, #236]	; (8002da8 <USB_SetTurnaroundTime+0x124>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d202      	bcs.n	8002cc4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002cbe:	230e      	movs	r3, #14
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e057      	b.n	8002d74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4a38      	ldr	r2, [pc, #224]	; (8002da8 <USB_SetTurnaroundTime+0x124>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d306      	bcc.n	8002cda <USB_SetTurnaroundTime+0x56>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4a37      	ldr	r2, [pc, #220]	; (8002dac <USB_SetTurnaroundTime+0x128>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d202      	bcs.n	8002cda <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002cd4:	230d      	movs	r3, #13
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	e04c      	b.n	8002d74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4a33      	ldr	r2, [pc, #204]	; (8002dac <USB_SetTurnaroundTime+0x128>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d306      	bcc.n	8002cf0 <USB_SetTurnaroundTime+0x6c>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4a32      	ldr	r2, [pc, #200]	; (8002db0 <USB_SetTurnaroundTime+0x12c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d802      	bhi.n	8002cf0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002cea:	230c      	movs	r3, #12
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e041      	b.n	8002d74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4a2f      	ldr	r2, [pc, #188]	; (8002db0 <USB_SetTurnaroundTime+0x12c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d906      	bls.n	8002d06 <USB_SetTurnaroundTime+0x82>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4a2e      	ldr	r2, [pc, #184]	; (8002db4 <USB_SetTurnaroundTime+0x130>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d802      	bhi.n	8002d06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002d00:	230b      	movs	r3, #11
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e036      	b.n	8002d74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4a2a      	ldr	r2, [pc, #168]	; (8002db4 <USB_SetTurnaroundTime+0x130>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d906      	bls.n	8002d1c <USB_SetTurnaroundTime+0x98>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	4a29      	ldr	r2, [pc, #164]	; (8002db8 <USB_SetTurnaroundTime+0x134>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d802      	bhi.n	8002d1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002d16:	230a      	movs	r3, #10
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e02b      	b.n	8002d74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4a26      	ldr	r2, [pc, #152]	; (8002db8 <USB_SetTurnaroundTime+0x134>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d906      	bls.n	8002d32 <USB_SetTurnaroundTime+0xae>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4a25      	ldr	r2, [pc, #148]	; (8002dbc <USB_SetTurnaroundTime+0x138>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d202      	bcs.n	8002d32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002d2c:	2309      	movs	r3, #9
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	e020      	b.n	8002d74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4a21      	ldr	r2, [pc, #132]	; (8002dbc <USB_SetTurnaroundTime+0x138>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d306      	bcc.n	8002d48 <USB_SetTurnaroundTime+0xc4>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	4a20      	ldr	r2, [pc, #128]	; (8002dc0 <USB_SetTurnaroundTime+0x13c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d802      	bhi.n	8002d48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002d42:	2308      	movs	r3, #8
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	e015      	b.n	8002d74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <USB_SetTurnaroundTime+0x13c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d906      	bls.n	8002d5e <USB_SetTurnaroundTime+0xda>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <USB_SetTurnaroundTime+0x140>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d202      	bcs.n	8002d5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002d58:	2307      	movs	r3, #7
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	e00a      	b.n	8002d74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002d5e:	2306      	movs	r3, #6
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	e007      	b.n	8002d74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d102      	bne.n	8002d70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002d6a:	2309      	movs	r3, #9
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e001      	b.n	8002d74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002d70:	2309      	movs	r3, #9
 8002d72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	029b      	lsls	r3, r3, #10
 8002d88:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	00d8acbf 	.word	0x00d8acbf
 8002da4:	00e4e1c0 	.word	0x00e4e1c0
 8002da8:	00f42400 	.word	0x00f42400
 8002dac:	01067380 	.word	0x01067380
 8002db0:	011a499f 	.word	0x011a499f
 8002db4:	01312cff 	.word	0x01312cff
 8002db8:	014ca43f 	.word	0x014ca43f
 8002dbc:	016e3600 	.word	0x016e3600
 8002dc0:	01a6ab1f 	.word	0x01a6ab1f
 8002dc4:	01e84800 	.word	0x01e84800

08002dc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f043 0201 	orr.w	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f023 0201 	bic.w	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d115      	bne.n	8002e5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e3a:	2001      	movs	r0, #1
 8002e3c:	f7fd fd00 	bl	8000840 <HAL_Delay>
      ms++;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3301      	adds	r3, #1
 8002e44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f001 fa45 	bl	80042d6 <USB_GetMode>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d01e      	beq.n	8002e90 <USB_SetCurrentMode+0x84>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b31      	cmp	r3, #49	; 0x31
 8002e56:	d9f0      	bls.n	8002e3a <USB_SetCurrentMode+0x2e>
 8002e58:	e01a      	b.n	8002e90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d115      	bne.n	8002e8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	f7fd fce7 	bl	8000840 <HAL_Delay>
      ms++;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3301      	adds	r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f001 fa2c 	bl	80042d6 <USB_GetMode>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <USB_SetCurrentMode+0x84>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b31      	cmp	r3, #49	; 0x31
 8002e88:	d9f0      	bls.n	8002e6c <USB_SetCurrentMode+0x60>
 8002e8a:	e001      	b.n	8002e90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e005      	b.n	8002e9c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b32      	cmp	r3, #50	; 0x32
 8002e94:	d101      	bne.n	8002e9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b086      	sub	sp, #24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002eb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	e009      	b.n	8002ed8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	3340      	adds	r3, #64	; 0x40
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	2200      	movs	r2, #0
 8002ed0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	2b0e      	cmp	r3, #14
 8002edc:	d9f2      	bls.n	8002ec4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d11c      	bne.n	8002f1e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ef2:	f043 0302 	orr.w	r3, r3, #2
 8002ef6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f1c:	e00b      	b.n	8002f36 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2300      	movs	r3, #0
 8002f40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f48:	4619      	mov	r1, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f50:	461a      	mov	r2, r3
 8002f52:	680b      	ldr	r3, [r1, #0]
 8002f54:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d10c      	bne.n	8002f76 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d104      	bne.n	8002f6c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f62:	2100      	movs	r1, #0
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f965 	bl	8003234 <USB_SetDevSpeed>
 8002f6a:	e008      	b.n	8002f7e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f960 	bl	8003234 <USB_SetDevSpeed>
 8002f74:	e003      	b.n	8002f7e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f76:	2103      	movs	r1, #3
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f95b 	bl	8003234 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f7e:	2110      	movs	r1, #16
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f8f3 	bl	800316c <USB_FlushTxFifo>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f91f 	bl	80031d4 <USB_FlushRxFifo>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2300      	movs	r3, #0
 8002faa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	e043      	b.n	8003052 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fe0:	d118      	bne.n	8003014 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10a      	bne.n	8002ffe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	e013      	b.n	8003026 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800300a:	461a      	mov	r2, r3
 800300c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	e008      	b.n	8003026 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003020:	461a      	mov	r2, r3
 8003022:	2300      	movs	r3, #0
 8003024:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4413      	add	r3, r2
 800302e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003032:	461a      	mov	r2, r3
 8003034:	2300      	movs	r3, #0
 8003036:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4413      	add	r3, r2
 8003040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003044:	461a      	mov	r2, r3
 8003046:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800304a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	3301      	adds	r3, #1
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	429a      	cmp	r2, r3
 8003058:	d3b7      	bcc.n	8002fca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	e043      	b.n	80030e8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4413      	add	r3, r2
 8003068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003072:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003076:	d118      	bne.n	80030aa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308a:	461a      	mov	r2, r3
 800308c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	e013      	b.n	80030bc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a0:	461a      	mov	r2, r3
 80030a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	e008      	b.n	80030bc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b6:	461a      	mov	r2, r3
 80030b8:	2300      	movs	r3, #0
 80030ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c8:	461a      	mov	r2, r3
 80030ca:	2300      	movs	r3, #0
 80030cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030da:	461a      	mov	r2, r3
 80030dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	3301      	adds	r3, #1
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d3b7      	bcc.n	8003060 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003102:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003110:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	2b00      	cmp	r3, #0
 8003116:	d105      	bne.n	8003124 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	f043 0210 	orr.w	r2, r3, #16
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699a      	ldr	r2, [r3, #24]
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <USB_DevInit+0x2c4>)
 800312a:	4313      	orrs	r3, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f043 0208 	orr.w	r2, r3, #8
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003144:	2b01      	cmp	r3, #1
 8003146:	d107      	bne.n	8003158 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003150:	f043 0304 	orr.w	r3, r3, #4
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003158:	7dfb      	ldrb	r3, [r7, #23]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003164:	b004      	add	sp, #16
 8003166:	4770      	bx	lr
 8003168:	803c3800 	.word	0x803c3800

0800316c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	3301      	adds	r3, #1
 800317e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a13      	ldr	r2, [pc, #76]	; (80031d0 <USB_FlushTxFifo+0x64>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e01b      	b.n	80031c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	daf2      	bge.n	800317a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	019b      	lsls	r3, r3, #6
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3301      	adds	r3, #1
 80031a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <USB_FlushTxFifo+0x64>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e006      	b.n	80031c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b20      	cmp	r3, #32
 80031c0:	d0f0      	beq.n	80031a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	00030d40 	.word	0x00030d40

080031d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	3301      	adds	r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4a11      	ldr	r2, [pc, #68]	; (8003230 <USB_FlushRxFifo+0x5c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e018      	b.n	8003224 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	daf2      	bge.n	80031e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2210      	movs	r2, #16
 8003202:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	3301      	adds	r3, #1
 8003208:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4a08      	ldr	r2, [pc, #32]	; (8003230 <USB_FlushRxFifo+0x5c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e006      	b.n	8003224 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b10      	cmp	r3, #16
 8003220:	d0f0      	beq.n	8003204 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	00030d40 	.word	0x00030d40

08003234 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	68f9      	ldr	r1, [r7, #12]
 8003250:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003254:	4313      	orrs	r3, r2
 8003256:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003266:	b480      	push	{r7}
 8003268:	b087      	sub	sp, #28
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 0306 	and.w	r3, r3, #6
 800327e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d102      	bne.n	800328c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003286:	2300      	movs	r3, #0
 8003288:	75fb      	strb	r3, [r7, #23]
 800328a:	e00a      	b.n	80032a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d002      	beq.n	8003298 <USB_GetDevSpeed+0x32>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b06      	cmp	r3, #6
 8003296:	d102      	bne.n	800329e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003298:	2302      	movs	r3, #2
 800329a:	75fb      	strb	r3, [r7, #23]
 800329c:	e001      	b.n	80032a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800329e:	230f      	movs	r3, #15
 80032a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80032a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	371c      	adds	r7, #28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	785b      	ldrb	r3, [r3, #1]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d13a      	bne.n	8003342 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	2101      	movs	r1, #1
 80032de:	fa01 f303 	lsl.w	r3, r1, r3
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	68f9      	ldr	r1, [r7, #12]
 80032e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d155      	bne.n	80033b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	791b      	ldrb	r3, [r3, #4]
 800331e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003320:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	059b      	lsls	r3, r3, #22
 8003326:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003328:	4313      	orrs	r3, r2
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	0151      	lsls	r1, r2, #5
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	440a      	add	r2, r1
 8003332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	e036      	b.n	80033b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003348:	69da      	ldr	r2, [r3, #28]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	2101      	movs	r1, #1
 8003354:	fa01 f303 	lsl.w	r3, r1, r3
 8003358:	041b      	lsls	r3, r3, #16
 800335a:	68f9      	ldr	r1, [r7, #12]
 800335c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003360:	4313      	orrs	r3, r2
 8003362:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4413      	add	r3, r2
 800336c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d11a      	bne.n	80033b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4413      	add	r3, r2
 8003382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	791b      	ldrb	r3, [r3, #4]
 8003394:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003396:	430b      	orrs	r3, r1
 8003398:	4313      	orrs	r3, r2
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	0151      	lsls	r1, r2, #5
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	440a      	add	r2, r1
 80033a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	785b      	ldrb	r3, [r3, #1]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d161      	bne.n	80034a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033f2:	d11f      	bne.n	8003434 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	0151      	lsls	r1, r2, #5
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	440a      	add	r2, r1
 800340a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800340e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003412:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	0151      	lsls	r1, r2, #5
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	440a      	add	r2, r1
 800342a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800342e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003432:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	2101      	movs	r1, #1
 8003446:	fa01 f303 	lsl.w	r3, r1, r3
 800344a:	b29b      	uxth	r3, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	68f9      	ldr	r1, [r7, #12]
 8003450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003454:	4013      	ands	r3, r2
 8003456:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800345e:	69da      	ldr	r2, [r3, #28]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	2101      	movs	r1, #1
 800346a:	fa01 f303 	lsl.w	r3, r1, r3
 800346e:	b29b      	uxth	r3, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	68f9      	ldr	r1, [r7, #12]
 8003474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003478:	4013      	ands	r3, r2
 800347a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4413      	add	r3, r2
 8003484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	0159      	lsls	r1, r3, #5
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	440b      	add	r3, r1
 8003492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003496:	4619      	mov	r1, r3
 8003498:	4b35      	ldr	r3, [pc, #212]	; (8003570 <USB_DeactivateEndpoint+0x1b0>)
 800349a:	4013      	ands	r3, r2
 800349c:	600b      	str	r3, [r1, #0]
 800349e:	e060      	b.n	8003562 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034b6:	d11f      	bne.n	80034f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	0151      	lsls	r1, r2, #5
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	440a      	add	r2, r1
 80034ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	0151      	lsls	r1, r2, #5
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	440a      	add	r2, r1
 80034ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	2101      	movs	r1, #1
 800350a:	fa01 f303 	lsl.w	r3, r1, r3
 800350e:	041b      	lsls	r3, r3, #16
 8003510:	43db      	mvns	r3, r3
 8003512:	68f9      	ldr	r1, [r7, #12]
 8003514:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003518:	4013      	ands	r3, r2
 800351a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	2101      	movs	r1, #1
 800352e:	fa01 f303 	lsl.w	r3, r1, r3
 8003532:	041b      	lsls	r3, r3, #16
 8003534:	43db      	mvns	r3, r3
 8003536:	68f9      	ldr	r1, [r7, #12]
 8003538:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800353c:	4013      	ands	r3, r2
 800353e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	0159      	lsls	r1, r3, #5
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	440b      	add	r3, r1
 8003556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355a:	4619      	mov	r1, r3
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <USB_DeactivateEndpoint+0x1b4>)
 800355e:	4013      	ands	r3, r2
 8003560:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	ec337800 	.word	0xec337800
 8003574:	eff37800 	.word	0xeff37800

08003578 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	; 0x28
 800357c:	af02      	add	r7, sp, #8
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	4613      	mov	r3, r2
 8003584:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	785b      	ldrb	r3, [r3, #1]
 8003594:	2b01      	cmp	r3, #1
 8003596:	f040 815c 	bne.w	8003852 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d132      	bne.n	8003608 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	0151      	lsls	r1, r2, #5
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	440a      	add	r2, r1
 80035b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	0151      	lsls	r1, r2, #5
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	440a      	add	r2, r1
 80035dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	0151      	lsls	r1, r2, #5
 80035f8:	69fa      	ldr	r2, [r7, #28]
 80035fa:	440a      	add	r2, r1
 80035fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003600:	0cdb      	lsrs	r3, r3, #19
 8003602:	04db      	lsls	r3, r3, #19
 8003604:	6113      	str	r3, [r2, #16]
 8003606:	e074      	b.n	80036f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4413      	add	r3, r2
 8003610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	0151      	lsls	r1, r2, #5
 800361a:	69fa      	ldr	r2, [r7, #28]
 800361c:	440a      	add	r2, r1
 800361e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003622:	0cdb      	lsrs	r3, r3, #19
 8003624:	04db      	lsls	r3, r3, #19
 8003626:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	4413      	add	r3, r2
 8003630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	0151      	lsls	r1, r2, #5
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	440a      	add	r2, r1
 800363e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003642:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003646:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800364a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003658:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	6999      	ldr	r1, [r3, #24]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	440b      	add	r3, r1
 8003664:	1e59      	subs	r1, r3, #1
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	fbb1 f3f3 	udiv	r3, r1, r3
 800366e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003670:	4b9d      	ldr	r3, [pc, #628]	; (80038e8 <USB_EPStartXfer+0x370>)
 8003672:	400b      	ands	r3, r1
 8003674:	69b9      	ldr	r1, [r7, #24]
 8003676:	0148      	lsls	r0, r1, #5
 8003678:	69f9      	ldr	r1, [r7, #28]
 800367a:	4401      	add	r1, r0
 800367c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003680:	4313      	orrs	r3, r2
 8003682:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369a:	69b9      	ldr	r1, [r7, #24]
 800369c:	0148      	lsls	r0, r1, #5
 800369e:	69f9      	ldr	r1, [r7, #28]
 80036a0:	4401      	add	r1, r0
 80036a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80036a6:	4313      	orrs	r3, r2
 80036a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	791b      	ldrb	r3, [r3, #4]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d11f      	bne.n	80036f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	0151      	lsls	r1, r2, #5
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	440a      	add	r2, r1
 80036c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80036d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	0151      	lsls	r1, r2, #5
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	440a      	add	r2, r1
 80036e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d14b      	bne.n	8003790 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d009      	beq.n	8003714 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	4413      	add	r3, r2
 8003708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370c:	461a      	mov	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	791b      	ldrb	r3, [r3, #4]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d128      	bne.n	800376e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d110      	bne.n	800374e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	0151      	lsls	r1, r2, #5
 800373e:	69fa      	ldr	r2, [r7, #28]
 8003740:	440a      	add	r2, r1
 8003742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003746:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	e00f      	b.n	800376e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	0151      	lsls	r1, r2, #5
 8003760:	69fa      	ldr	r2, [r7, #28]
 8003762:	440a      	add	r2, r1
 8003764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	0151      	lsls	r1, r2, #5
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	440a      	add	r2, r1
 8003784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003788:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	e133      	b.n	80039f8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	0151      	lsls	r1, r2, #5
 80037a2:	69fa      	ldr	r2, [r7, #28]
 80037a4:	440a      	add	r2, r1
 80037a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	791b      	ldrb	r3, [r3, #4]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d015      	beq.n	80037e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 811b 	beq.w	80039f8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	2101      	movs	r1, #1
 80037d4:	fa01 f303 	lsl.w	r3, r1, r3
 80037d8:	69f9      	ldr	r1, [r7, #28]
 80037da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037de:	4313      	orrs	r3, r2
 80037e0:	634b      	str	r3, [r1, #52]	; 0x34
 80037e2:	e109      	b.n	80039f8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d110      	bne.n	8003816 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	0151      	lsls	r1, r2, #5
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	440a      	add	r2, r1
 800380a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800380e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	e00f      	b.n	8003836 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	0151      	lsls	r1, r2, #5
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	440a      	add	r2, r1
 800382c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003834:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	6919      	ldr	r1, [r3, #16]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	781a      	ldrb	r2, [r3, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	b298      	uxth	r0, r3
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	4603      	mov	r3, r0
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fade 	bl	8003e0c <USB_WritePacket>
 8003850:	e0d2      	b.n	80039f8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	0151      	lsls	r1, r2, #5
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	440a      	add	r2, r1
 8003868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800386c:	0cdb      	lsrs	r3, r3, #19
 800386e:	04db      	lsls	r3, r3, #19
 8003870:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	0151      	lsls	r1, r2, #5
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	440a      	add	r2, r1
 8003888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800388c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003890:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003894:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d126      	bne.n	80038ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b4:	69b9      	ldr	r1, [r7, #24]
 80038b6:	0148      	lsls	r0, r1, #5
 80038b8:	69f9      	ldr	r1, [r7, #28]
 80038ba:	4401      	add	r1, r0
 80038bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038c0:	4313      	orrs	r3, r2
 80038c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	0151      	lsls	r1, r2, #5
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	440a      	add	r2, r1
 80038da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038e2:	6113      	str	r3, [r2, #16]
 80038e4:	e03a      	b.n	800395c <USB_EPStartXfer+0x3e4>
 80038e6:	bf00      	nop
 80038e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	699a      	ldr	r2, [r3, #24]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4413      	add	r3, r2
 80038f6:	1e5a      	subs	r2, r3, #1
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	8afa      	ldrh	r2, [r7, #22]
 8003908:	fb03 f202 	mul.w	r2, r3, r2
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	8afb      	ldrh	r3, [r7, #22]
 8003920:	04d9      	lsls	r1, r3, #19
 8003922:	4b38      	ldr	r3, [pc, #224]	; (8003a04 <USB_EPStartXfer+0x48c>)
 8003924:	400b      	ands	r3, r1
 8003926:	69b9      	ldr	r1, [r7, #24]
 8003928:	0148      	lsls	r0, r1, #5
 800392a:	69f9      	ldr	r1, [r7, #28]
 800392c:	4401      	add	r1, r0
 800392e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003932:	4313      	orrs	r3, r2
 8003934:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800394c:	69b9      	ldr	r1, [r7, #24]
 800394e:	0148      	lsls	r0, r1, #5
 8003950:	69f9      	ldr	r1, [r7, #28]
 8003952:	4401      	add	r1, r0
 8003954:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003958:	4313      	orrs	r3, r2
 800395a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d10d      	bne.n	800397e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	6919      	ldr	r1, [r3, #16]
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	4413      	add	r3, r2
 8003976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397a:	460a      	mov	r2, r1
 800397c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	791b      	ldrb	r3, [r3, #4]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d128      	bne.n	80039d8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d110      	bne.n	80039b8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	0151      	lsls	r1, r2, #5
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	440a      	add	r2, r1
 80039ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	e00f      	b.n	80039d8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	0151      	lsls	r1, r2, #5
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	440a      	add	r2, r1
 80039ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	0151      	lsls	r1, r2, #5
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	440a      	add	r2, r1
 80039ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3720      	adds	r7, #32
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	1ff80000 	.word	0x1ff80000

08003a08 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	4613      	mov	r3, r2
 8003a14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	785b      	ldrb	r3, [r3, #1]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	f040 80ce 	bne.w	8003bc6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d132      	bne.n	8003a98 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	0151      	lsls	r1, r2, #5
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	440a      	add	r2, r1
 8003a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	0151      	lsls	r1, r2, #5
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	440a      	add	r2, r1
 8003a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	0151      	lsls	r1, r2, #5
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	440a      	add	r2, r1
 8003a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a90:	0cdb      	lsrs	r3, r3, #19
 8003a92:	04db      	lsls	r3, r3, #19
 8003a94:	6113      	str	r3, [r2, #16]
 8003a96:	e04e      	b.n	8003b36 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	0151      	lsls	r1, r2, #5
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	440a      	add	r2, r1
 8003aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ab2:	0cdb      	lsrs	r3, r3, #19
 8003ab4:	04db      	lsls	r3, r3, #19
 8003ab6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	0151      	lsls	r1, r2, #5
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	440a      	add	r2, r1
 8003ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ad2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ad6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ada:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	699a      	ldr	r2, [r3, #24]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d903      	bls.n	8003af0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	0151      	lsls	r1, r2, #5
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	440a      	add	r2, r1
 8003b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b26:	6939      	ldr	r1, [r7, #16]
 8003b28:	0148      	lsls	r0, r1, #5
 8003b2a:	6979      	ldr	r1, [r7, #20]
 8003b2c:	4401      	add	r1, r0
 8003b2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003b32:	4313      	orrs	r3, r2
 8003b34:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d11e      	bne.n	8003b7a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d009      	beq.n	8003b58 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b50:	461a      	mov	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	0151      	lsls	r1, r2, #5
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	440a      	add	r2, r1
 8003b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	e097      	b.n	8003caa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	0151      	lsls	r1, r2, #5
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	440a      	add	r2, r1
 8003b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b98:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8083 	beq.w	8003caa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bba:	6979      	ldr	r1, [r7, #20]
 8003bbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	634b      	str	r3, [r1, #52]	; 0x34
 8003bc4:	e071      	b.n	8003caa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	0151      	lsls	r1, r2, #5
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	440a      	add	r2, r1
 8003bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003be0:	0cdb      	lsrs	r3, r3, #19
 8003be2:	04db      	lsls	r3, r3, #19
 8003be4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	0151      	lsls	r1, r2, #5
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	440a      	add	r2, r1
 8003bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	0151      	lsls	r1, r2, #5
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	440a      	add	r2, r1
 8003c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c58:	6939      	ldr	r1, [r7, #16]
 8003c5a:	0148      	lsls	r0, r1, #5
 8003c5c:	6979      	ldr	r1, [r7, #20]
 8003c5e:	4401      	add	r1, r0
 8003c60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c64:	4313      	orrs	r3, r2
 8003c66:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d10d      	bne.n	8003c8a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	6919      	ldr	r1, [r3, #16]
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c86:	460a      	mov	r2, r1
 8003c88:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	0151      	lsls	r1, r2, #5
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	440a      	add	r2, r1
 8003ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ca4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ca8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	785b      	ldrb	r3, [r3, #1]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d14a      	bne.n	8003d6c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cee:	f040 8086 	bne.w	8003dfe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	7812      	ldrb	r2, [r2, #0]
 8003d06:	0151      	lsls	r1, r2, #5
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	440a      	add	r2, r1
 8003d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d14:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	7812      	ldrb	r2, [r2, #0]
 8003d2a:	0151      	lsls	r1, r2, #5
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	440a      	add	r2, r1
 8003d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d902      	bls.n	8003d50 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	75fb      	strb	r3, [r7, #23]
          break;
 8003d4e:	e056      	b.n	8003dfe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d68:	d0e7      	beq.n	8003d3a <USB_EPStopXfer+0x82>
 8003d6a:	e048      	b.n	8003dfe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d84:	d13b      	bne.n	8003dfe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	7812      	ldrb	r2, [r2, #0]
 8003d9a:	0151      	lsls	r1, r2, #5
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	440a      	add	r2, r1
 8003da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003da4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003da8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	7812      	ldrb	r2, [r2, #0]
 8003dbe:	0151      	lsls	r1, r2, #5
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	440a      	add	r2, r1
 8003dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dcc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f242 7210 	movw	r2, #10000	; 0x2710
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d902      	bls.n	8003de4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	75fb      	strb	r3, [r7, #23]
          break;
 8003de2:	e00c      	b.n	8003dfe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003df8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dfc:	d0e7      	beq.n	8003dce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b089      	sub	sp, #36	; 0x24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	4611      	mov	r1, r2
 8003e18:	461a      	mov	r2, r3
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	71fb      	strb	r3, [r7, #7]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003e2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d123      	bne.n	8003e7a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003e32:	88bb      	ldrh	r3, [r7, #4]
 8003e34:	3303      	adds	r3, #3
 8003e36:	089b      	lsrs	r3, r3, #2
 8003e38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	e018      	b.n	8003e72 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	031a      	lsls	r2, r3, #12
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	3301      	adds	r3, #1
 8003e58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	3301      	adds	r3, #1
 8003e64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	61bb      	str	r3, [r7, #24]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d3e2      	bcc.n	8003e40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3724      	adds	r7, #36	; 0x24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b08b      	sub	sp, #44	; 0x2c
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	4613      	mov	r3, r2
 8003e94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	089b      	lsrs	r3, r3, #2
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003eae:	2300      	movs	r3, #0
 8003eb0:	623b      	str	r3, [r7, #32]
 8003eb2:	e014      	b.n	8003ede <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	601a      	str	r2, [r3, #0]
    pDest++;
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	3301      	adds	r3, #1
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	3301      	adds	r3, #1
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	3301      	adds	r3, #1
 8003edc:	623b      	str	r3, [r7, #32]
 8003ede:	6a3a      	ldr	r2, [r7, #32]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d3e6      	bcc.n	8003eb4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003ee6:	8bfb      	ldrh	r3, [r7, #30]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d01e      	beq.n	8003f2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f107 0310 	add.w	r3, r7, #16
 8003efc:	6812      	ldr	r2, [r2, #0]
 8003efe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	701a      	strb	r2, [r3, #0]
      i++;
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	3301      	adds	r3, #1
 8003f16:	623b      	str	r3, [r7, #32]
      pDest++;
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003f1e:	8bfb      	ldrh	r3, [r7, #30]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003f24:	8bfb      	ldrh	r3, [r7, #30]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1ea      	bne.n	8003f00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	372c      	adds	r7, #44	; 0x2c
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	785b      	ldrb	r3, [r3, #1]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d12c      	bne.n	8003fae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	db12      	blt.n	8003f8c <USB_EPSetStall+0x54>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00f      	beq.n	8003f8c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	0151      	lsls	r1, r2, #5
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	440a      	add	r2, r1
 8003f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f8a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	0151      	lsls	r1, r2, #5
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	440a      	add	r2, r1
 8003fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	e02b      	b.n	8004006 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	db12      	blt.n	8003fe6 <USB_EPSetStall+0xae>
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00f      	beq.n	8003fe6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	0151      	lsls	r1, r2, #5
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	440a      	add	r2, r1
 8003fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fe4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	0151      	lsls	r1, r2, #5
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	440a      	add	r2, r1
 8003ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004000:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004004:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	785b      	ldrb	r3, [r3, #1]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d128      	bne.n	8004082 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	440a      	add	r2, r1
 8004046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800404a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800404e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	791b      	ldrb	r3, [r3, #4]
 8004054:	2b03      	cmp	r3, #3
 8004056:	d003      	beq.n	8004060 <USB_EPClearStall+0x4c>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	791b      	ldrb	r3, [r3, #4]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d138      	bne.n	80040d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	0151      	lsls	r1, r2, #5
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	440a      	add	r2, r1
 8004076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800407a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	e027      	b.n	80040d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4413      	add	r3, r2
 800408a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	0151      	lsls	r1, r2, #5
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	440a      	add	r2, r1
 8004098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800409c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	791b      	ldrb	r3, [r3, #4]
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d003      	beq.n	80040b2 <USB_EPClearStall+0x9e>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	791b      	ldrb	r3, [r3, #4]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d10f      	bne.n	80040d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	0151      	lsls	r1, r2, #5
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	440a      	add	r2, r1
 80040c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004102:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004114:	68f9      	ldr	r1, [r7, #12]
 8004116:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800411a:	4313      	orrs	r3, r2
 800411c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004146:	f023 0303 	bic.w	r3, r3, #3
 800414a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800415a:	f023 0302 	bic.w	r3, r3, #2
 800415e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800416e:	b480      	push	{r7}
 8004170:	b085      	sub	sp, #20
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004188:	f023 0303 	bic.w	r3, r3, #3
 800418c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800419c:	f043 0302 	orr.w	r3, r3, #2
 80041a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4013      	ands	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80041c8:	68fb      	ldr	r3, [r7, #12]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b085      	sub	sp, #20
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	4013      	ands	r3, r2
 80041f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	0c1b      	lsrs	r3, r3, #16
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800420a:	b480      	push	{r7}
 800420c:	b085      	sub	sp, #20
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	4013      	ands	r3, r2
 800422c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	b29b      	uxth	r3, r3
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800423e:	b480      	push	{r7}
 8004240:	b085      	sub	sp, #20
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	460b      	mov	r3, r1
 8004248:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	4013      	ands	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800426c:	68bb      	ldr	r3, [r7, #8]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800427a:	b480      	push	{r7}
 800427c:	b087      	sub	sp, #28
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	460b      	mov	r3, r1
 8004284:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	fa22 f303 	lsr.w	r3, r2, r3
 80042aa:	01db      	lsls	r3, r3, #7
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4013      	ands	r3, r2
 80042c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80042c8:	68bb      	ldr	r3, [r7, #8]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	f003 0301 	and.w	r3, r3, #1
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b085      	sub	sp, #20
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800430c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004310:	f023 0307 	bic.w	r3, r3, #7
 8004314:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004328:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	460b      	mov	r3, r1
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	333c      	adds	r3, #60	; 0x3c
 800434e:	3304      	adds	r3, #4
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4a26      	ldr	r2, [pc, #152]	; (80043f0 <USB_EP0_OutStart+0xb8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d90a      	bls.n	8004372 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004368:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800436c:	d101      	bne.n	8004372 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	e037      	b.n	80043e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004378:	461a      	mov	r2, r3
 800437a:	2300      	movs	r3, #0
 800437c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800438c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004390:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043a0:	f043 0318 	orr.w	r3, r3, #24
 80043a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80043b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80043ba:	7afb      	ldrb	r3, [r7, #11]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d10f      	bne.n	80043e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c6:	461a      	mov	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80043de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	4f54300a 	.word	0x4f54300a

080043f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3301      	adds	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4a13      	ldr	r2, [pc, #76]	; (8004458 <USB_CoreReset+0x64>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e01b      	b.n	800444a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	daf2      	bge.n	8004400 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f043 0201 	orr.w	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3301      	adds	r3, #1
 800442e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4a09      	ldr	r2, [pc, #36]	; (8004458 <USB_CoreReset+0x64>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d901      	bls.n	800443c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e006      	b.n	800444a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b01      	cmp	r3, #1
 8004446:	d0f0      	beq.n	800442a <USB_CoreReset+0x36>

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	00030d40 	.word	0x00030d40

0800445c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004468:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800446c:	f002 fc28 	bl	8006cc0 <USBD_static_malloc>
 8004470:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d109      	bne.n	800448c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	32b0      	adds	r2, #176	; 0xb0
 8004482:	2100      	movs	r1, #0
 8004484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004488:	2302      	movs	r3, #2
 800448a:	e0d4      	b.n	8004636 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800448c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004490:	2100      	movs	r1, #0
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f002 fc7c 	bl	8006d90 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	32b0      	adds	r2, #176	; 0xb0
 80044a2:	68f9      	ldr	r1, [r7, #12]
 80044a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	32b0      	adds	r2, #176	; 0xb0
 80044b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	7c1b      	ldrb	r3, [r3, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d138      	bne.n	8004536 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80044c4:	4b5e      	ldr	r3, [pc, #376]	; (8004640 <USBD_CDC_Init+0x1e4>)
 80044c6:	7819      	ldrb	r1, [r3, #0]
 80044c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044cc:	2202      	movs	r2, #2
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f002 fad3 	bl	8006a7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80044d4:	4b5a      	ldr	r3, [pc, #360]	; (8004640 <USBD_CDC_Init+0x1e4>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	f003 020f 	and.w	r2, r3, #15
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	3324      	adds	r3, #36	; 0x24
 80044ea:	2201      	movs	r2, #1
 80044ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80044ee:	4b55      	ldr	r3, [pc, #340]	; (8004644 <USBD_CDC_Init+0x1e8>)
 80044f0:	7819      	ldrb	r1, [r3, #0]
 80044f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044f6:	2202      	movs	r2, #2
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f002 fabe 	bl	8006a7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80044fe:	4b51      	ldr	r3, [pc, #324]	; (8004644 <USBD_CDC_Init+0x1e8>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	f003 020f 	and.w	r2, r3, #15
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004516:	2201      	movs	r2, #1
 8004518:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800451a:	4b4b      	ldr	r3, [pc, #300]	; (8004648 <USBD_CDC_Init+0x1ec>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	f003 020f 	and.w	r2, r3, #15
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	3326      	adds	r3, #38	; 0x26
 8004530:	2210      	movs	r2, #16
 8004532:	801a      	strh	r2, [r3, #0]
 8004534:	e035      	b.n	80045a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004536:	4b42      	ldr	r3, [pc, #264]	; (8004640 <USBD_CDC_Init+0x1e4>)
 8004538:	7819      	ldrb	r1, [r3, #0]
 800453a:	2340      	movs	r3, #64	; 0x40
 800453c:	2202      	movs	r2, #2
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f002 fa9b 	bl	8006a7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004544:	4b3e      	ldr	r3, [pc, #248]	; (8004640 <USBD_CDC_Init+0x1e4>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	f003 020f 	and.w	r2, r3, #15
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	440b      	add	r3, r1
 8004558:	3324      	adds	r3, #36	; 0x24
 800455a:	2201      	movs	r2, #1
 800455c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800455e:	4b39      	ldr	r3, [pc, #228]	; (8004644 <USBD_CDC_Init+0x1e8>)
 8004560:	7819      	ldrb	r1, [r3, #0]
 8004562:	2340      	movs	r3, #64	; 0x40
 8004564:	2202      	movs	r2, #2
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f002 fa87 	bl	8006a7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800456c:	4b35      	ldr	r3, [pc, #212]	; (8004644 <USBD_CDC_Init+0x1e8>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	f003 020f 	and.w	r2, r3, #15
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004584:	2201      	movs	r2, #1
 8004586:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004588:	4b2f      	ldr	r3, [pc, #188]	; (8004648 <USBD_CDC_Init+0x1ec>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	f003 020f 	and.w	r2, r3, #15
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	3326      	adds	r3, #38	; 0x26
 800459e:	2210      	movs	r2, #16
 80045a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80045a2:	4b29      	ldr	r3, [pc, #164]	; (8004648 <USBD_CDC_Init+0x1ec>)
 80045a4:	7819      	ldrb	r1, [r3, #0]
 80045a6:	2308      	movs	r3, #8
 80045a8:	2203      	movs	r2, #3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f002 fa65 	bl	8006a7a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80045b0:	4b25      	ldr	r3, [pc, #148]	; (8004648 <USBD_CDC_Init+0x1ec>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	f003 020f 	and.w	r2, r3, #15
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	4613      	mov	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	440b      	add	r3, r1
 80045c4:	3324      	adds	r3, #36	; 0x24
 80045c6:	2201      	movs	r2, #1
 80045c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	33b0      	adds	r3, #176	; 0xb0
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004600:	2302      	movs	r3, #2
 8004602:	e018      	b.n	8004636 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	7c1b      	ldrb	r3, [r3, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10a      	bne.n	8004622 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800460c:	4b0d      	ldr	r3, [pc, #52]	; (8004644 <USBD_CDC_Init+0x1e8>)
 800460e:	7819      	ldrb	r1, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f002 fb1c 	bl	8006c58 <USBD_LL_PrepareReceive>
 8004620:	e008      	b.n	8004634 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004622:	4b08      	ldr	r3, [pc, #32]	; (8004644 <USBD_CDC_Init+0x1e8>)
 8004624:	7819      	ldrb	r1, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800462c:	2340      	movs	r3, #64	; 0x40
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f002 fb12 	bl	8006c58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000093 	.word	0x20000093
 8004644:	20000094 	.word	0x20000094
 8004648:	20000095 	.word	0x20000095

0800464c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004658:	4b3a      	ldr	r3, [pc, #232]	; (8004744 <USBD_CDC_DeInit+0xf8>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	4619      	mov	r1, r3
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f002 fa31 	bl	8006ac6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004664:	4b37      	ldr	r3, [pc, #220]	; (8004744 <USBD_CDC_DeInit+0xf8>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	f003 020f 	and.w	r2, r3, #15
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	4613      	mov	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	440b      	add	r3, r1
 8004678:	3324      	adds	r3, #36	; 0x24
 800467a:	2200      	movs	r2, #0
 800467c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800467e:	4b32      	ldr	r3, [pc, #200]	; (8004748 <USBD_CDC_DeInit+0xfc>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	4619      	mov	r1, r3
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f002 fa1e 	bl	8006ac6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800468a:	4b2f      	ldr	r3, [pc, #188]	; (8004748 <USBD_CDC_DeInit+0xfc>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	f003 020f 	and.w	r2, r3, #15
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80046a2:	2200      	movs	r2, #0
 80046a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80046a6:	4b29      	ldr	r3, [pc, #164]	; (800474c <USBD_CDC_DeInit+0x100>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	4619      	mov	r1, r3
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f002 fa0a 	bl	8006ac6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80046b2:	4b26      	ldr	r3, [pc, #152]	; (800474c <USBD_CDC_DeInit+0x100>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	f003 020f 	and.w	r2, r3, #15
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	3324      	adds	r3, #36	; 0x24
 80046c8:	2200      	movs	r2, #0
 80046ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80046cc:	4b1f      	ldr	r3, [pc, #124]	; (800474c <USBD_CDC_DeInit+0x100>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	f003 020f 	and.w	r2, r3, #15
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	3326      	adds	r3, #38	; 0x26
 80046e2:	2200      	movs	r2, #0
 80046e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	32b0      	adds	r2, #176	; 0xb0
 80046f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01f      	beq.n	8004738 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	33b0      	adds	r3, #176	; 0xb0
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	32b0      	adds	r2, #176	; 0xb0
 8004716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800471a:	4618      	mov	r0, r3
 800471c:	f002 fade 	bl	8006cdc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	32b0      	adds	r2, #176	; 0xb0
 800472a:	2100      	movs	r1, #0
 800472c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20000093 	.word	0x20000093
 8004748:	20000094 	.word	0x20000094
 800474c:	20000095 	.word	0x20000095

08004750 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	32b0      	adds	r2, #176	; 0xb0
 8004764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004768:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800477c:	2303      	movs	r3, #3
 800477e:	e0bf      	b.n	8004900 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004788:	2b00      	cmp	r3, #0
 800478a:	d050      	beq.n	800482e <USBD_CDC_Setup+0xde>
 800478c:	2b20      	cmp	r3, #32
 800478e:	f040 80af 	bne.w	80048f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	88db      	ldrh	r3, [r3, #6]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d03a      	beq.n	8004810 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	b25b      	sxtb	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	da1b      	bge.n	80047dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	33b0      	adds	r3, #176	; 0xb0
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80047ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	88d2      	ldrh	r2, [r2, #6]
 80047c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	88db      	ldrh	r3, [r3, #6]
 80047c6:	2b07      	cmp	r3, #7
 80047c8:	bf28      	it	cs
 80047ca:	2307      	movcs	r3, #7
 80047cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	89fa      	ldrh	r2, [r7, #14]
 80047d2:	4619      	mov	r1, r3
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f001 fd43 	bl	8006260 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80047da:	e090      	b.n	80048fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	785a      	ldrb	r2, [r3, #1]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	88db      	ldrh	r3, [r3, #6]
 80047ea:	2b3f      	cmp	r3, #63	; 0x3f
 80047ec:	d803      	bhi.n	80047f6 <USBD_CDC_Setup+0xa6>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	88db      	ldrh	r3, [r3, #6]
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	e000      	b.n	80047f8 <USBD_CDC_Setup+0xa8>
 80047f6:	2240      	movs	r2, #64	; 0x40
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80047fe:	6939      	ldr	r1, [r7, #16]
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004806:	461a      	mov	r2, r3
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f001 fd55 	bl	80062b8 <USBD_CtlPrepareRx>
      break;
 800480e:	e076      	b.n	80048fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	33b0      	adds	r3, #176	; 0xb0
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	7850      	ldrb	r0, [r2, #1]
 8004826:	2200      	movs	r2, #0
 8004828:	6839      	ldr	r1, [r7, #0]
 800482a:	4798      	blx	r3
      break;
 800482c:	e067      	b.n	80048fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	785b      	ldrb	r3, [r3, #1]
 8004832:	2b0b      	cmp	r3, #11
 8004834:	d851      	bhi.n	80048da <USBD_CDC_Setup+0x18a>
 8004836:	a201      	add	r2, pc, #4	; (adr r2, 800483c <USBD_CDC_Setup+0xec>)
 8004838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483c:	0800486d 	.word	0x0800486d
 8004840:	080048e9 	.word	0x080048e9
 8004844:	080048db 	.word	0x080048db
 8004848:	080048db 	.word	0x080048db
 800484c:	080048db 	.word	0x080048db
 8004850:	080048db 	.word	0x080048db
 8004854:	080048db 	.word	0x080048db
 8004858:	080048db 	.word	0x080048db
 800485c:	080048db 	.word	0x080048db
 8004860:	080048db 	.word	0x080048db
 8004864:	08004897 	.word	0x08004897
 8004868:	080048c1 	.word	0x080048c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b03      	cmp	r3, #3
 8004876:	d107      	bne.n	8004888 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004878:	f107 030a 	add.w	r3, r7, #10
 800487c:	2202      	movs	r2, #2
 800487e:	4619      	mov	r1, r3
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f001 fced 	bl	8006260 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004886:	e032      	b.n	80048ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004888:	6839      	ldr	r1, [r7, #0]
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f001 fc77 	bl	800617e <USBD_CtlError>
            ret = USBD_FAIL;
 8004890:	2303      	movs	r3, #3
 8004892:	75fb      	strb	r3, [r7, #23]
          break;
 8004894:	e02b      	b.n	80048ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d107      	bne.n	80048b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80048a2:	f107 030d 	add.w	r3, r7, #13
 80048a6:	2201      	movs	r2, #1
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f001 fcd8 	bl	8006260 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80048b0:	e01d      	b.n	80048ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80048b2:	6839      	ldr	r1, [r7, #0]
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f001 fc62 	bl	800617e <USBD_CtlError>
            ret = USBD_FAIL;
 80048ba:	2303      	movs	r3, #3
 80048bc:	75fb      	strb	r3, [r7, #23]
          break;
 80048be:	e016      	b.n	80048ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d00f      	beq.n	80048ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80048cc:	6839      	ldr	r1, [r7, #0]
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f001 fc55 	bl	800617e <USBD_CtlError>
            ret = USBD_FAIL;
 80048d4:	2303      	movs	r3, #3
 80048d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80048d8:	e008      	b.n	80048ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80048da:	6839      	ldr	r1, [r7, #0]
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f001 fc4e 	bl	800617e <USBD_CtlError>
          ret = USBD_FAIL;
 80048e2:	2303      	movs	r3, #3
 80048e4:	75fb      	strb	r3, [r7, #23]
          break;
 80048e6:	e002      	b.n	80048ee <USBD_CDC_Setup+0x19e>
          break;
 80048e8:	bf00      	nop
 80048ea:	e008      	b.n	80048fe <USBD_CDC_Setup+0x1ae>
          break;
 80048ec:	bf00      	nop
      }
      break;
 80048ee:	e006      	b.n	80048fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80048f0:	6839      	ldr	r1, [r7, #0]
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f001 fc43 	bl	800617e <USBD_CtlError>
      ret = USBD_FAIL;
 80048f8:	2303      	movs	r3, #3
 80048fa:	75fb      	strb	r3, [r7, #23]
      break;
 80048fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80048fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800491a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	32b0      	adds	r2, #176	; 0xb0
 8004926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800492e:	2303      	movs	r3, #3
 8004930:	e065      	b.n	80049fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	32b0      	adds	r2, #176	; 0xb0
 800493c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004940:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004942:	78fb      	ldrb	r3, [r7, #3]
 8004944:	f003 020f 	and.w	r2, r3, #15
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	440b      	add	r3, r1
 8004954:	3318      	adds	r3, #24
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d02f      	beq.n	80049bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	f003 020f 	and.w	r2, r3, #15
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	3318      	adds	r3, #24
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	78fb      	ldrb	r3, [r7, #3]
 8004974:	f003 010f 	and.w	r1, r3, #15
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	460b      	mov	r3, r1
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	440b      	add	r3, r1
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4403      	add	r3, r0
 8004984:	3348      	adds	r3, #72	; 0x48
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	fbb2 f1f3 	udiv	r1, r2, r3
 800498c:	fb01 f303 	mul.w	r3, r1, r3
 8004990:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004992:	2b00      	cmp	r3, #0
 8004994:	d112      	bne.n	80049bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	f003 020f 	and.w	r2, r3, #15
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	3318      	adds	r3, #24
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80049ae:	78f9      	ldrb	r1, [r7, #3]
 80049b0:	2300      	movs	r3, #0
 80049b2:	2200      	movs	r2, #0
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f002 f92e 	bl	8006c16 <USBD_LL_Transmit>
 80049ba:	e01f      	b.n	80049fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2200      	movs	r2, #0
 80049c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	33b0      	adds	r3, #176	; 0xb0
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d010      	beq.n	80049fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	33b0      	adds	r3, #176	; 0xb0
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80049f8:	78fa      	ldrb	r2, [r7, #3]
 80049fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b084      	sub	sp, #16
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	32b0      	adds	r2, #176	; 0xb0
 8004a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	32b0      	adds	r2, #176	; 0xb0
 8004a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e01a      	b.n	8004a6e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f002 f92c 	bl	8006c9a <USBD_LL_GetRxDataSize>
 8004a42:	4602      	mov	r2, r0
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	33b0      	adds	r3, #176	; 0xb0
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004a68:	4611      	mov	r1, r2
 8004a6a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b084      	sub	sp, #16
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	32b0      	adds	r2, #176	; 0xb0
 8004a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e025      	b.n	8004ae4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	33b0      	adds	r3, #176	; 0xb0
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01a      	beq.n	8004ae2 <USBD_CDC_EP0_RxReady+0x6c>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ab2:	2bff      	cmp	r3, #255	; 0xff
 8004ab4:	d015      	beq.n	8004ae2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	33b0      	adds	r3, #176	; 0xb0
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004ace:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004ad6:	b292      	uxth	r2, r2
 8004ad8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	22ff      	movs	r2, #255	; 0xff
 8004ade:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004af4:	2182      	movs	r1, #130	; 0x82
 8004af6:	4818      	ldr	r0, [pc, #96]	; (8004b58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004af8:	f000 fd09 	bl	800550e <USBD_GetEpDesc>
 8004afc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004afe:	2101      	movs	r1, #1
 8004b00:	4815      	ldr	r0, [pc, #84]	; (8004b58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004b02:	f000 fd04 	bl	800550e <USBD_GetEpDesc>
 8004b06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004b08:	2181      	movs	r1, #129	; 0x81
 8004b0a:	4813      	ldr	r0, [pc, #76]	; (8004b58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004b0c:	f000 fcff 	bl	800550e <USBD_GetEpDesc>
 8004b10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2210      	movs	r2, #16
 8004b1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d006      	beq.n	8004b32 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b2c:	711a      	strb	r2, [r3, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d006      	beq.n	8004b46 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b40:	711a      	strb	r2, [r3, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2243      	movs	r2, #67	; 0x43
 8004b4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004b4c:	4b02      	ldr	r3, [pc, #8]	; (8004b58 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	20000050 	.word	0x20000050

08004b5c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004b64:	2182      	movs	r1, #130	; 0x82
 8004b66:	4818      	ldr	r0, [pc, #96]	; (8004bc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004b68:	f000 fcd1 	bl	800550e <USBD_GetEpDesc>
 8004b6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004b6e:	2101      	movs	r1, #1
 8004b70:	4815      	ldr	r0, [pc, #84]	; (8004bc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004b72:	f000 fccc 	bl	800550e <USBD_GetEpDesc>
 8004b76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004b78:	2181      	movs	r1, #129	; 0x81
 8004b7a:	4813      	ldr	r0, [pc, #76]	; (8004bc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004b7c:	f000 fcc7 	bl	800550e <USBD_GetEpDesc>
 8004b80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2210      	movs	r2, #16
 8004b8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d006      	beq.n	8004ba2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	2200      	movs	r2, #0
 8004b98:	711a      	strb	r2, [r3, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f042 0202 	orr.w	r2, r2, #2
 8004ba0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d006      	beq.n	8004bb6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	711a      	strb	r2, [r3, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f042 0202 	orr.w	r2, r2, #2
 8004bb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2243      	movs	r2, #67	; 0x43
 8004bba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004bbc:	4b02      	ldr	r3, [pc, #8]	; (8004bc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000050 	.word	0x20000050

08004bcc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004bd4:	2182      	movs	r1, #130	; 0x82
 8004bd6:	4818      	ldr	r0, [pc, #96]	; (8004c38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004bd8:	f000 fc99 	bl	800550e <USBD_GetEpDesc>
 8004bdc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004bde:	2101      	movs	r1, #1
 8004be0:	4815      	ldr	r0, [pc, #84]	; (8004c38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004be2:	f000 fc94 	bl	800550e <USBD_GetEpDesc>
 8004be6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004be8:	2181      	movs	r1, #129	; 0x81
 8004bea:	4813      	ldr	r0, [pc, #76]	; (8004c38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004bec:	f000 fc8f 	bl	800550e <USBD_GetEpDesc>
 8004bf0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2210      	movs	r2, #16
 8004bfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d006      	beq.n	8004c12 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c0c:	711a      	strb	r2, [r3, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d006      	beq.n	8004c26 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c20:	711a      	strb	r2, [r3, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2243      	movs	r2, #67	; 0x43
 8004c2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c2c:	4b02      	ldr	r3, [pc, #8]	; (8004c38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20000050 	.word	0x20000050

08004c3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	220a      	movs	r2, #10
 8004c48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004c4a:	4b03      	ldr	r3, [pc, #12]	; (8004c58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	2000000c 	.word	0x2000000c

08004c5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e009      	b.n	8004c84 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	33b0      	adds	r3, #176	; 0xb0
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	32b0      	adds	r2, #176	; 0xb0
 8004ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004caa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e008      	b.n	8004cc8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	32b0      	adds	r2, #176	; 0xb0
 8004ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e004      	b.n	8004d02 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
	...

08004d10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	32b0      	adds	r2, #176	; 0xb0
 8004d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d26:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	32b0      	adds	r2, #176	; 0xb0
 8004d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e018      	b.n	8004d70 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	7c1b      	ldrb	r3, [r3, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10a      	bne.n	8004d5c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d46:	4b0c      	ldr	r3, [pc, #48]	; (8004d78 <USBD_CDC_ReceivePacket+0x68>)
 8004d48:	7819      	ldrb	r1, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f001 ff7f 	bl	8006c58 <USBD_LL_PrepareReceive>
 8004d5a:	e008      	b.n	8004d6e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d5c:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <USBD_CDC_ReceivePacket+0x68>)
 8004d5e:	7819      	ldrb	r1, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d66:	2340      	movs	r3, #64	; 0x40
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f001 ff75 	bl	8006c58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20000094 	.word	0x20000094

08004d7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	4613      	mov	r3, r2
 8004d88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e01f      	b.n	8004dd4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	79fa      	ldrb	r2, [r7, #7]
 8004dc6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f001 fdef 	bl	80069ac <USBD_LL_Init>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e025      	b.n	8004e40 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	32ae      	adds	r2, #174	; 0xae
 8004e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00f      	beq.n	8004e30 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	32ae      	adds	r2, #174	; 0xae
 8004e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	f107 020e 	add.w	r2, r7, #14
 8004e24:	4610      	mov	r0, r2
 8004e26:	4798      	blx	r3
 8004e28:	4602      	mov	r2, r0
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f001 fdf7 	bl	8006a44 <USBD_LL_Start>
 8004e56:	4603      	mov	r3, r0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e68:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b084      	sub	sp, #16
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	460b      	mov	r3, r1
 8004e80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d009      	beq.n	8004ea4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	78fa      	ldrb	r2, [r7, #3]
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	4798      	blx	r3
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	78fa      	ldrb	r2, [r7, #3]
 8004ec8:	4611      	mov	r1, r2
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	4798      	blx	r3
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004ef2:	6839      	ldr	r1, [r7, #0]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f001 f908 	bl	800610a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004f08:	461a      	mov	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004f16:	f003 031f 	and.w	r3, r3, #31
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d01a      	beq.n	8004f54 <USBD_LL_SetupStage+0x72>
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d822      	bhi.n	8004f68 <USBD_LL_SetupStage+0x86>
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <USBD_LL_SetupStage+0x4a>
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d00a      	beq.n	8004f40 <USBD_LL_SetupStage+0x5e>
 8004f2a:	e01d      	b.n	8004f68 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f32:	4619      	mov	r1, r3
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fb5f 	bl	80055f8 <USBD_StdDevReq>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f3e:	e020      	b.n	8004f82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f46:	4619      	mov	r1, r3
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fbc7 	bl	80056dc <USBD_StdItfReq>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	73fb      	strb	r3, [r7, #15]
      break;
 8004f52:	e016      	b.n	8004f82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fc29 	bl	80057b4 <USBD_StdEPReq>
 8004f62:	4603      	mov	r3, r0
 8004f64:	73fb      	strb	r3, [r7, #15]
      break;
 8004f66:	e00c      	b.n	8004f82 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004f6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	4619      	mov	r1, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f001 fdc4 	bl	8006b04 <USBD_LL_StallEP>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f80:	bf00      	nop
  }

  return ret;
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	460b      	mov	r3, r1
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004f9e:	7afb      	ldrb	r3, [r7, #11]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d16e      	bne.n	8005082 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004faa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	f040 8098 	bne.w	80050e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d913      	bls.n	8004fec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	1ad2      	subs	r2, r2, r3
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	bf28      	it	cs
 8004fde:	4613      	movcs	r3, r2
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f001 f984 	bl	80062f2 <USBD_CtlContinueRx>
 8004fea:	e07d      	b.n	80050e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004ff2:	f003 031f 	and.w	r3, r3, #31
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d014      	beq.n	8005024 <USBD_LL_DataOutStage+0x98>
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d81d      	bhi.n	800503a <USBD_LL_DataOutStage+0xae>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <USBD_LL_DataOutStage+0x7c>
 8005002:	2b01      	cmp	r3, #1
 8005004:	d003      	beq.n	800500e <USBD_LL_DataOutStage+0x82>
 8005006:	e018      	b.n	800503a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	75bb      	strb	r3, [r7, #22]
            break;
 800500c:	e018      	b.n	8005040 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005014:	b2db      	uxtb	r3, r3
 8005016:	4619      	mov	r1, r3
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 fa5e 	bl	80054da <USBD_CoreFindIF>
 800501e:	4603      	mov	r3, r0
 8005020:	75bb      	strb	r3, [r7, #22]
            break;
 8005022:	e00d      	b.n	8005040 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800502a:	b2db      	uxtb	r3, r3
 800502c:	4619      	mov	r1, r3
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 fa60 	bl	80054f4 <USBD_CoreFindEP>
 8005034:	4603      	mov	r3, r0
 8005036:	75bb      	strb	r3, [r7, #22]
            break;
 8005038:	e002      	b.n	8005040 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	75bb      	strb	r3, [r7, #22]
            break;
 800503e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005040:	7dbb      	ldrb	r3, [r7, #22]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d119      	bne.n	800507a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b03      	cmp	r3, #3
 8005050:	d113      	bne.n	800507a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005052:	7dba      	ldrb	r2, [r7, #22]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	32ae      	adds	r2, #174	; 0xae
 8005058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00b      	beq.n	800507a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005062:	7dba      	ldrb	r2, [r7, #22]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800506a:	7dba      	ldrb	r2, [r7, #22]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	32ae      	adds	r2, #174	; 0xae
 8005070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f001 f94a 	bl	8006314 <USBD_CtlSendStatus>
 8005080:	e032      	b.n	80050e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005082:	7afb      	ldrb	r3, [r7, #11]
 8005084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005088:	b2db      	uxtb	r3, r3
 800508a:	4619      	mov	r1, r3
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 fa31 	bl	80054f4 <USBD_CoreFindEP>
 8005092:	4603      	mov	r3, r0
 8005094:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005096:	7dbb      	ldrb	r3, [r7, #22]
 8005098:	2bff      	cmp	r3, #255	; 0xff
 800509a:	d025      	beq.n	80050e8 <USBD_LL_DataOutStage+0x15c>
 800509c:	7dbb      	ldrb	r3, [r7, #22]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d122      	bne.n	80050e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d117      	bne.n	80050de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80050ae:	7dba      	ldrb	r2, [r7, #22]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	32ae      	adds	r2, #174	; 0xae
 80050b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00f      	beq.n	80050de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80050be:	7dba      	ldrb	r2, [r7, #22]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80050c6:	7dba      	ldrb	r2, [r7, #22]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	32ae      	adds	r2, #174	; 0xae
 80050cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	7afa      	ldrb	r2, [r7, #11]
 80050d4:	4611      	mov	r1, r2
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	4798      	blx	r3
 80050da:	4603      	mov	r3, r0
 80050dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80050de:	7dfb      	ldrb	r3, [r7, #23]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80050e4:	7dfb      	ldrb	r3, [r7, #23]
 80050e6:	e000      	b.n	80050ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b086      	sub	sp, #24
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	460b      	mov	r3, r1
 80050fc:	607a      	str	r2, [r7, #4]
 80050fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005100:	7afb      	ldrb	r3, [r7, #11]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d16f      	bne.n	80051e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3314      	adds	r3, #20
 800510a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005112:	2b02      	cmp	r3, #2
 8005114:	d15a      	bne.n	80051cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	429a      	cmp	r2, r3
 8005120:	d914      	bls.n	800514c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	1ad2      	subs	r2, r2, r3
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	461a      	mov	r2, r3
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f001 f8ac 	bl	8006296 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800513e:	2300      	movs	r3, #0
 8005140:	2200      	movs	r2, #0
 8005142:	2100      	movs	r1, #0
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f001 fd87 	bl	8006c58 <USBD_LL_PrepareReceive>
 800514a:	e03f      	b.n	80051cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	429a      	cmp	r2, r3
 8005156:	d11c      	bne.n	8005192 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005160:	429a      	cmp	r2, r3
 8005162:	d316      	bcc.n	8005192 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800516e:	429a      	cmp	r2, r3
 8005170:	d20f      	bcs.n	8005192 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005172:	2200      	movs	r2, #0
 8005174:	2100      	movs	r1, #0
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f001 f88d 	bl	8006296 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005184:	2300      	movs	r3, #0
 8005186:	2200      	movs	r2, #0
 8005188:	2100      	movs	r1, #0
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f001 fd64 	bl	8006c58 <USBD_LL_PrepareReceive>
 8005190:	e01c      	b.n	80051cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b03      	cmp	r3, #3
 800519c:	d10f      	bne.n	80051be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d009      	beq.n	80051be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80051be:	2180      	movs	r1, #128	; 0x80
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f001 fc9f 	bl	8006b04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f001 f8b7 	bl	800633a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d03a      	beq.n	800524c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f7ff fe42 	bl	8004e60 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80051e4:	e032      	b.n	800524c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80051e6:	7afb      	ldrb	r3, [r7, #11]
 80051e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	4619      	mov	r1, r3
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f97f 	bl	80054f4 <USBD_CoreFindEP>
 80051f6:	4603      	mov	r3, r0
 80051f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80051fa:	7dfb      	ldrb	r3, [r7, #23]
 80051fc:	2bff      	cmp	r3, #255	; 0xff
 80051fe:	d025      	beq.n	800524c <USBD_LL_DataInStage+0x15a>
 8005200:	7dfb      	ldrb	r3, [r7, #23]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d122      	bne.n	800524c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b03      	cmp	r3, #3
 8005210:	d11c      	bne.n	800524c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005212:	7dfa      	ldrb	r2, [r7, #23]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	32ae      	adds	r2, #174	; 0xae
 8005218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d014      	beq.n	800524c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005222:	7dfa      	ldrb	r2, [r7, #23]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800522a:	7dfa      	ldrb	r2, [r7, #23]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	32ae      	adds	r2, #174	; 0xae
 8005230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	7afa      	ldrb	r2, [r7, #11]
 8005238:	4611      	mov	r1, r2
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	4798      	blx	r3
 800523e:	4603      	mov	r3, r0
 8005240:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005242:	7dbb      	ldrb	r3, [r7, #22]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005248:	7dbb      	ldrb	r3, [r7, #22]
 800524a:	e000      	b.n	800524e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d014      	beq.n	80052bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00e      	beq.n	80052bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6852      	ldr	r2, [r2, #4]
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	4611      	mov	r1, r2
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	4798      	blx	r3
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80052b8:	2303      	movs	r3, #3
 80052ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052bc:	2340      	movs	r3, #64	; 0x40
 80052be:	2200      	movs	r2, #0
 80052c0:	2100      	movs	r1, #0
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f001 fbd9 	bl	8006a7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2240      	movs	r2, #64	; 0x40
 80052d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052d8:	2340      	movs	r3, #64	; 0x40
 80052da:	2200      	movs	r2, #0
 80052dc:	2180      	movs	r1, #128	; 0x80
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f001 fbcb 	bl	8006a7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2240      	movs	r2, #64	; 0x40
 80052ee:	621a      	str	r2, [r3, #32]

  return ret;
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	460b      	mov	r3, r1
 8005304:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	78fa      	ldrb	r2, [r7, #3]
 800530a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005328:	b2da      	uxtb	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2204      	movs	r2, #4
 8005334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b04      	cmp	r3, #4
 8005358:	d106      	bne.n	8005368 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005360:	b2da      	uxtb	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b082      	sub	sp, #8
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b03      	cmp	r3, #3
 8005388:	d110      	bne.n	80053ac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00b      	beq.n	80053ac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b082      	sub	sp, #8
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	460b      	mov	r3, r1
 80053c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	32ae      	adds	r2, #174	; 0xae
 80053cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e01c      	b.n	8005412 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d115      	bne.n	8005410 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	32ae      	adds	r2, #174	; 0xae
 80053ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00b      	beq.n	8005410 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	32ae      	adds	r2, #174	; 0xae
 8005402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	78fa      	ldrb	r2, [r7, #3]
 800540a:	4611      	mov	r1, r2
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b082      	sub	sp, #8
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	460b      	mov	r3, r1
 8005424:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	32ae      	adds	r2, #174	; 0xae
 8005430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005438:	2303      	movs	r3, #3
 800543a:	e01c      	b.n	8005476 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b03      	cmp	r3, #3
 8005446:	d115      	bne.n	8005474 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	32ae      	adds	r2, #174	; 0xae
 8005452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00b      	beq.n	8005474 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	32ae      	adds	r2, #174	; 0xae
 8005466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	78fa      	ldrb	r2, [r7, #3]
 800546e:	4611      	mov	r1, r2
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800549c:	2300      	movs	r3, #0
 800549e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00e      	beq.n	80054d0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6852      	ldr	r2, [r2, #4]
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	4611      	mov	r1, r2
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	4798      	blx	r3
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80054cc:	2303      	movs	r3, #3
 80054ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	460b      	mov	r3, r1
 80054e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80054e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005500:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005502:	4618      	mov	r0, r3
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b086      	sub	sp, #24
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	460b      	mov	r3, r1
 8005518:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	885b      	ldrh	r3, [r3, #2]
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	b29b      	uxth	r3, r3
 8005532:	429a      	cmp	r2, r3
 8005534:	d920      	bls.n	8005578 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	b29b      	uxth	r3, r3
 800553c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800553e:	e013      	b.n	8005568 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005540:	f107 030a 	add.w	r3, r7, #10
 8005544:	4619      	mov	r1, r3
 8005546:	6978      	ldr	r0, [r7, #20]
 8005548:	f000 f81b 	bl	8005582 <USBD_GetNextDesc>
 800554c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	785b      	ldrb	r3, [r3, #1]
 8005552:	2b05      	cmp	r3, #5
 8005554:	d108      	bne.n	8005568 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	789b      	ldrb	r3, [r3, #2]
 800555e:	78fa      	ldrb	r2, [r7, #3]
 8005560:	429a      	cmp	r2, r3
 8005562:	d008      	beq.n	8005576 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005564:	2300      	movs	r3, #0
 8005566:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	885b      	ldrh	r3, [r3, #2]
 800556c:	b29a      	uxth	r2, r3
 800556e:	897b      	ldrh	r3, [r7, #10]
 8005570:	429a      	cmp	r2, r3
 8005572:	d8e5      	bhi.n	8005540 <USBD_GetEpDesc+0x32>
 8005574:	e000      	b.n	8005578 <USBD_GetEpDesc+0x6a>
          break;
 8005576:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005578:	693b      	ldr	r3, [r7, #16]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	881a      	ldrh	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	b29b      	uxth	r3, r3
 800559a:	4413      	add	r3, r2
 800559c:	b29a      	uxth	r2, r3
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4413      	add	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80055ae:	68fb      	ldr	r3, [r7, #12]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	3301      	adds	r3, #1
 80055d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80055da:	8a3b      	ldrh	r3, [r7, #16]
 80055dc:	021b      	lsls	r3, r3, #8
 80055de:	b21a      	sxth	r2, r3
 80055e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	b21b      	sxth	r3, r3
 80055e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80055ea:	89fb      	ldrh	r3, [r7, #14]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800560e:	2b40      	cmp	r3, #64	; 0x40
 8005610:	d005      	beq.n	800561e <USBD_StdDevReq+0x26>
 8005612:	2b40      	cmp	r3, #64	; 0x40
 8005614:	d857      	bhi.n	80056c6 <USBD_StdDevReq+0xce>
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00f      	beq.n	800563a <USBD_StdDevReq+0x42>
 800561a:	2b20      	cmp	r3, #32
 800561c:	d153      	bne.n	80056c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	32ae      	adds	r2, #174	; 0xae
 8005628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	6839      	ldr	r1, [r7, #0]
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	4798      	blx	r3
 8005634:	4603      	mov	r3, r0
 8005636:	73fb      	strb	r3, [r7, #15]
      break;
 8005638:	e04a      	b.n	80056d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	785b      	ldrb	r3, [r3, #1]
 800563e:	2b09      	cmp	r3, #9
 8005640:	d83b      	bhi.n	80056ba <USBD_StdDevReq+0xc2>
 8005642:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <USBD_StdDevReq+0x50>)
 8005644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005648:	0800569d 	.word	0x0800569d
 800564c:	080056b1 	.word	0x080056b1
 8005650:	080056bb 	.word	0x080056bb
 8005654:	080056a7 	.word	0x080056a7
 8005658:	080056bb 	.word	0x080056bb
 800565c:	0800567b 	.word	0x0800567b
 8005660:	08005671 	.word	0x08005671
 8005664:	080056bb 	.word	0x080056bb
 8005668:	08005693 	.word	0x08005693
 800566c:	08005685 	.word	0x08005685
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005670:	6839      	ldr	r1, [r7, #0]
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fa3c 	bl	8005af0 <USBD_GetDescriptor>
          break;
 8005678:	e024      	b.n	80056c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800567a:	6839      	ldr	r1, [r7, #0]
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fba1 	bl	8005dc4 <USBD_SetAddress>
          break;
 8005682:	e01f      	b.n	80056c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005684:	6839      	ldr	r1, [r7, #0]
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fbe0 	bl	8005e4c <USBD_SetConfig>
 800568c:	4603      	mov	r3, r0
 800568e:	73fb      	strb	r3, [r7, #15]
          break;
 8005690:	e018      	b.n	80056c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005692:	6839      	ldr	r1, [r7, #0]
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fc83 	bl	8005fa0 <USBD_GetConfig>
          break;
 800569a:	e013      	b.n	80056c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800569c:	6839      	ldr	r1, [r7, #0]
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fcb4 	bl	800600c <USBD_GetStatus>
          break;
 80056a4:	e00e      	b.n	80056c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80056a6:	6839      	ldr	r1, [r7, #0]
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fce3 	bl	8006074 <USBD_SetFeature>
          break;
 80056ae:	e009      	b.n	80056c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80056b0:	6839      	ldr	r1, [r7, #0]
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fd07 	bl	80060c6 <USBD_ClrFeature>
          break;
 80056b8:	e004      	b.n	80056c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fd5e 	bl	800617e <USBD_CtlError>
          break;
 80056c2:	bf00      	nop
      }
      break;
 80056c4:	e004      	b.n	80056d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80056c6:	6839      	ldr	r1, [r7, #0]
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fd58 	bl	800617e <USBD_CtlError>
      break;
 80056ce:	bf00      	nop
  }

  return ret;
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop

080056dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056f2:	2b40      	cmp	r3, #64	; 0x40
 80056f4:	d005      	beq.n	8005702 <USBD_StdItfReq+0x26>
 80056f6:	2b40      	cmp	r3, #64	; 0x40
 80056f8:	d852      	bhi.n	80057a0 <USBD_StdItfReq+0xc4>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <USBD_StdItfReq+0x26>
 80056fe:	2b20      	cmp	r3, #32
 8005700:	d14e      	bne.n	80057a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005708:	b2db      	uxtb	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	2b02      	cmp	r3, #2
 800570e:	d840      	bhi.n	8005792 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	889b      	ldrh	r3, [r3, #4]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b01      	cmp	r3, #1
 8005718:	d836      	bhi.n	8005788 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	889b      	ldrh	r3, [r3, #4]
 800571e:	b2db      	uxtb	r3, r3
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff fed9 	bl	80054da <USBD_CoreFindIF>
 8005728:	4603      	mov	r3, r0
 800572a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800572c:	7bbb      	ldrb	r3, [r7, #14]
 800572e:	2bff      	cmp	r3, #255	; 0xff
 8005730:	d01d      	beq.n	800576e <USBD_StdItfReq+0x92>
 8005732:	7bbb      	ldrb	r3, [r7, #14]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d11a      	bne.n	800576e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005738:	7bba      	ldrb	r2, [r7, #14]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	32ae      	adds	r2, #174	; 0xae
 800573e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00f      	beq.n	8005768 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005748:	7bba      	ldrb	r2, [r7, #14]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005750:	7bba      	ldrb	r2, [r7, #14]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	32ae      	adds	r2, #174	; 0xae
 8005756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	4798      	blx	r3
 8005762:	4603      	mov	r3, r0
 8005764:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005766:	e004      	b.n	8005772 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005768:	2303      	movs	r3, #3
 800576a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800576c:	e001      	b.n	8005772 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800576e:	2303      	movs	r3, #3
 8005770:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	88db      	ldrh	r3, [r3, #6]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d110      	bne.n	800579c <USBD_StdItfReq+0xc0>
 800577a:	7bfb      	ldrb	r3, [r7, #15]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10d      	bne.n	800579c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fdc7 	bl	8006314 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005786:	e009      	b.n	800579c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005788:	6839      	ldr	r1, [r7, #0]
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fcf7 	bl	800617e <USBD_CtlError>
          break;
 8005790:	e004      	b.n	800579c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005792:	6839      	ldr	r1, [r7, #0]
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fcf2 	bl	800617e <USBD_CtlError>
          break;
 800579a:	e000      	b.n	800579e <USBD_StdItfReq+0xc2>
          break;
 800579c:	bf00      	nop
      }
      break;
 800579e:	e004      	b.n	80057aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80057a0:	6839      	ldr	r1, [r7, #0]
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fceb 	bl	800617e <USBD_CtlError>
      break;
 80057a8:	bf00      	nop
  }

  return ret;
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	889b      	ldrh	r3, [r3, #4]
 80057c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057d0:	2b40      	cmp	r3, #64	; 0x40
 80057d2:	d007      	beq.n	80057e4 <USBD_StdEPReq+0x30>
 80057d4:	2b40      	cmp	r3, #64	; 0x40
 80057d6:	f200 817f 	bhi.w	8005ad8 <USBD_StdEPReq+0x324>
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d02a      	beq.n	8005834 <USBD_StdEPReq+0x80>
 80057de:	2b20      	cmp	r3, #32
 80057e0:	f040 817a 	bne.w	8005ad8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80057e4:	7bbb      	ldrb	r3, [r7, #14]
 80057e6:	4619      	mov	r1, r3
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff fe83 	bl	80054f4 <USBD_CoreFindEP>
 80057ee:	4603      	mov	r3, r0
 80057f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80057f2:	7b7b      	ldrb	r3, [r7, #13]
 80057f4:	2bff      	cmp	r3, #255	; 0xff
 80057f6:	f000 8174 	beq.w	8005ae2 <USBD_StdEPReq+0x32e>
 80057fa:	7b7b      	ldrb	r3, [r7, #13]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f040 8170 	bne.w	8005ae2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005802:	7b7a      	ldrb	r2, [r7, #13]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800580a:	7b7a      	ldrb	r2, [r7, #13]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	32ae      	adds	r2, #174	; 0xae
 8005810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 8163 	beq.w	8005ae2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800581c:	7b7a      	ldrb	r2, [r7, #13]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	32ae      	adds	r2, #174	; 0xae
 8005822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	6839      	ldr	r1, [r7, #0]
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	4798      	blx	r3
 800582e:	4603      	mov	r3, r0
 8005830:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005832:	e156      	b.n	8005ae2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	785b      	ldrb	r3, [r3, #1]
 8005838:	2b03      	cmp	r3, #3
 800583a:	d008      	beq.n	800584e <USBD_StdEPReq+0x9a>
 800583c:	2b03      	cmp	r3, #3
 800583e:	f300 8145 	bgt.w	8005acc <USBD_StdEPReq+0x318>
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 809b 	beq.w	800597e <USBD_StdEPReq+0x1ca>
 8005848:	2b01      	cmp	r3, #1
 800584a:	d03c      	beq.n	80058c6 <USBD_StdEPReq+0x112>
 800584c:	e13e      	b.n	8005acc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d002      	beq.n	8005860 <USBD_StdEPReq+0xac>
 800585a:	2b03      	cmp	r3, #3
 800585c:	d016      	beq.n	800588c <USBD_StdEPReq+0xd8>
 800585e:	e02c      	b.n	80058ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005860:	7bbb      	ldrb	r3, [r7, #14]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00d      	beq.n	8005882 <USBD_StdEPReq+0xce>
 8005866:	7bbb      	ldrb	r3, [r7, #14]
 8005868:	2b80      	cmp	r3, #128	; 0x80
 800586a:	d00a      	beq.n	8005882 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800586c:	7bbb      	ldrb	r3, [r7, #14]
 800586e:	4619      	mov	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f001 f947 	bl	8006b04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005876:	2180      	movs	r1, #128	; 0x80
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f001 f943 	bl	8006b04 <USBD_LL_StallEP>
 800587e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005880:	e020      	b.n	80058c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005882:	6839      	ldr	r1, [r7, #0]
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 fc7a 	bl	800617e <USBD_CtlError>
              break;
 800588a:	e01b      	b.n	80058c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	885b      	ldrh	r3, [r3, #2]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10e      	bne.n	80058b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005894:	7bbb      	ldrb	r3, [r7, #14]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <USBD_StdEPReq+0xfe>
 800589a:	7bbb      	ldrb	r3, [r7, #14]
 800589c:	2b80      	cmp	r3, #128	; 0x80
 800589e:	d008      	beq.n	80058b2 <USBD_StdEPReq+0xfe>
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	88db      	ldrh	r3, [r3, #6]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d104      	bne.n	80058b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80058a8:	7bbb      	ldrb	r3, [r7, #14]
 80058aa:	4619      	mov	r1, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f001 f929 	bl	8006b04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fd2e 	bl	8006314 <USBD_CtlSendStatus>

              break;
 80058b8:	e004      	b.n	80058c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80058ba:	6839      	ldr	r1, [r7, #0]
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 fc5e 	bl	800617e <USBD_CtlError>
              break;
 80058c2:	bf00      	nop
          }
          break;
 80058c4:	e107      	b.n	8005ad6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d002      	beq.n	80058d8 <USBD_StdEPReq+0x124>
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	d016      	beq.n	8005904 <USBD_StdEPReq+0x150>
 80058d6:	e04b      	b.n	8005970 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058d8:	7bbb      	ldrb	r3, [r7, #14]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00d      	beq.n	80058fa <USBD_StdEPReq+0x146>
 80058de:	7bbb      	ldrb	r3, [r7, #14]
 80058e0:	2b80      	cmp	r3, #128	; 0x80
 80058e2:	d00a      	beq.n	80058fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80058e4:	7bbb      	ldrb	r3, [r7, #14]
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f001 f90b 	bl	8006b04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80058ee:	2180      	movs	r1, #128	; 0x80
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f001 f907 	bl	8006b04 <USBD_LL_StallEP>
 80058f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80058f8:	e040      	b.n	800597c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fc3e 	bl	800617e <USBD_CtlError>
              break;
 8005902:	e03b      	b.n	800597c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	885b      	ldrh	r3, [r3, #2]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d136      	bne.n	800597a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800590c:	7bbb      	ldrb	r3, [r7, #14]
 800590e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005912:	2b00      	cmp	r3, #0
 8005914:	d004      	beq.n	8005920 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005916:	7bbb      	ldrb	r3, [r7, #14]
 8005918:	4619      	mov	r1, r3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f001 f911 	bl	8006b42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 fcf7 	bl	8006314 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005926:	7bbb      	ldrb	r3, [r7, #14]
 8005928:	4619      	mov	r1, r3
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff fde2 	bl	80054f4 <USBD_CoreFindEP>
 8005930:	4603      	mov	r3, r0
 8005932:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005934:	7b7b      	ldrb	r3, [r7, #13]
 8005936:	2bff      	cmp	r3, #255	; 0xff
 8005938:	d01f      	beq.n	800597a <USBD_StdEPReq+0x1c6>
 800593a:	7b7b      	ldrb	r3, [r7, #13]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d11c      	bne.n	800597a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005940:	7b7a      	ldrb	r2, [r7, #13]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005948:	7b7a      	ldrb	r2, [r7, #13]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	32ae      	adds	r2, #174	; 0xae
 800594e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d010      	beq.n	800597a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005958:	7b7a      	ldrb	r2, [r7, #13]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	32ae      	adds	r2, #174	; 0xae
 800595e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	6839      	ldr	r1, [r7, #0]
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	4798      	blx	r3
 800596a:	4603      	mov	r3, r0
 800596c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800596e:	e004      	b.n	800597a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fc03 	bl	800617e <USBD_CtlError>
              break;
 8005978:	e000      	b.n	800597c <USBD_StdEPReq+0x1c8>
              break;
 800597a:	bf00      	nop
          }
          break;
 800597c:	e0ab      	b.n	8005ad6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d002      	beq.n	8005990 <USBD_StdEPReq+0x1dc>
 800598a:	2b03      	cmp	r3, #3
 800598c:	d032      	beq.n	80059f4 <USBD_StdEPReq+0x240>
 800598e:	e097      	b.n	8005ac0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005990:	7bbb      	ldrb	r3, [r7, #14]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <USBD_StdEPReq+0x1f2>
 8005996:	7bbb      	ldrb	r3, [r7, #14]
 8005998:	2b80      	cmp	r3, #128	; 0x80
 800599a:	d004      	beq.n	80059a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800599c:	6839      	ldr	r1, [r7, #0]
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fbed 	bl	800617e <USBD_CtlError>
                break;
 80059a4:	e091      	b.n	8005aca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	da0b      	bge.n	80059c6 <USBD_StdEPReq+0x212>
 80059ae:	7bbb      	ldrb	r3, [r7, #14]
 80059b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	3310      	adds	r3, #16
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	4413      	add	r3, r2
 80059c2:	3304      	adds	r3, #4
 80059c4:	e00b      	b.n	80059de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80059c6:	7bbb      	ldrb	r3, [r7, #14]
 80059c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059cc:	4613      	mov	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	4413      	add	r3, r2
 80059dc:	3304      	adds	r3, #4
 80059de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2202      	movs	r2, #2
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fc37 	bl	8006260 <USBD_CtlSendData>
              break;
 80059f2:	e06a      	b.n	8005aca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80059f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	da11      	bge.n	8005a20 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059fc:	7bbb      	ldrb	r3, [r7, #14]
 80059fe:	f003 020f 	and.w	r2, r3, #15
 8005a02:	6879      	ldr	r1, [r7, #4]
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	3324      	adds	r3, #36	; 0x24
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d117      	bne.n	8005a46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005a16:	6839      	ldr	r1, [r7, #0]
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fbb0 	bl	800617e <USBD_CtlError>
                  break;
 8005a1e:	e054      	b.n	8005aca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a20:	7bbb      	ldrb	r3, [r7, #14]
 8005a22:	f003 020f 	and.w	r2, r3, #15
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	440b      	add	r3, r1
 8005a32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d104      	bne.n	8005a46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005a3c:	6839      	ldr	r1, [r7, #0]
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fb9d 	bl	800617e <USBD_CtlError>
                  break;
 8005a44:	e041      	b.n	8005aca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	da0b      	bge.n	8005a66 <USBD_StdEPReq+0x2b2>
 8005a4e:	7bbb      	ldrb	r3, [r7, #14]
 8005a50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	3310      	adds	r3, #16
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	4413      	add	r3, r2
 8005a62:	3304      	adds	r3, #4
 8005a64:	e00b      	b.n	8005a7e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a66:	7bbb      	ldrb	r3, [r7, #14]
 8005a68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a80:	7bbb      	ldrb	r3, [r7, #14]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <USBD_StdEPReq+0x2d8>
 8005a86:	7bbb      	ldrb	r3, [r7, #14]
 8005a88:	2b80      	cmp	r3, #128	; 0x80
 8005a8a:	d103      	bne.n	8005a94 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	e00e      	b.n	8005ab2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005a94:	7bbb      	ldrb	r3, [r7, #14]
 8005a96:	4619      	mov	r1, r3
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f001 f871 	bl	8006b80 <USBD_LL_IsStallEP>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	e002      	b.n	8005ab2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fbd1 	bl	8006260 <USBD_CtlSendData>
              break;
 8005abe:	e004      	b.n	8005aca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fb5b 	bl	800617e <USBD_CtlError>
              break;
 8005ac8:	bf00      	nop
          }
          break;
 8005aca:	e004      	b.n	8005ad6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005acc:	6839      	ldr	r1, [r7, #0]
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fb55 	bl	800617e <USBD_CtlError>
          break;
 8005ad4:	bf00      	nop
      }
      break;
 8005ad6:	e005      	b.n	8005ae4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fb4f 	bl	800617e <USBD_CtlError>
      break;
 8005ae0:	e000      	b.n	8005ae4 <USBD_StdEPReq+0x330>
      break;
 8005ae2:	bf00      	nop
  }

  return ret;
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005afe:	2300      	movs	r3, #0
 8005b00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	885b      	ldrh	r3, [r3, #2]
 8005b0a:	0a1b      	lsrs	r3, r3, #8
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	2b06      	cmp	r3, #6
 8005b12:	f200 8128 	bhi.w	8005d66 <USBD_GetDescriptor+0x276>
 8005b16:	a201      	add	r2, pc, #4	; (adr r2, 8005b1c <USBD_GetDescriptor+0x2c>)
 8005b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1c:	08005b39 	.word	0x08005b39
 8005b20:	08005b51 	.word	0x08005b51
 8005b24:	08005b91 	.word	0x08005b91
 8005b28:	08005d67 	.word	0x08005d67
 8005b2c:	08005d67 	.word	0x08005d67
 8005b30:	08005d07 	.word	0x08005d07
 8005b34:	08005d33 	.word	0x08005d33
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	7c12      	ldrb	r2, [r2, #16]
 8005b44:	f107 0108 	add.w	r1, r7, #8
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4798      	blx	r3
 8005b4c:	60f8      	str	r0, [r7, #12]
      break;
 8005b4e:	e112      	b.n	8005d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	7c1b      	ldrb	r3, [r3, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10d      	bne.n	8005b74 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b60:	f107 0208 	add.w	r2, r7, #8
 8005b64:	4610      	mov	r0, r2
 8005b66:	4798      	blx	r3
 8005b68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	2202      	movs	r2, #2
 8005b70:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005b72:	e100      	b.n	8005d76 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	f107 0208 	add.w	r2, r7, #8
 8005b80:	4610      	mov	r0, r2
 8005b82:	4798      	blx	r3
 8005b84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	701a      	strb	r2, [r3, #0]
      break;
 8005b8e:	e0f2      	b.n	8005d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	885b      	ldrh	r3, [r3, #2]
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b05      	cmp	r3, #5
 8005b98:	f200 80ac 	bhi.w	8005cf4 <USBD_GetDescriptor+0x204>
 8005b9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <USBD_GetDescriptor+0xb4>)
 8005b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba2:	bf00      	nop
 8005ba4:	08005bbd 	.word	0x08005bbd
 8005ba8:	08005bf1 	.word	0x08005bf1
 8005bac:	08005c25 	.word	0x08005c25
 8005bb0:	08005c59 	.word	0x08005c59
 8005bb4:	08005c8d 	.word	0x08005c8d
 8005bb8:	08005cc1 	.word	0x08005cc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00b      	beq.n	8005be0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	7c12      	ldrb	r2, [r2, #16]
 8005bd4:	f107 0108 	add.w	r1, r7, #8
 8005bd8:	4610      	mov	r0, r2
 8005bda:	4798      	blx	r3
 8005bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bde:	e091      	b.n	8005d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 facb 	bl	800617e <USBD_CtlError>
            err++;
 8005be8:	7afb      	ldrb	r3, [r7, #11]
 8005bea:	3301      	adds	r3, #1
 8005bec:	72fb      	strb	r3, [r7, #11]
          break;
 8005bee:	e089      	b.n	8005d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00b      	beq.n	8005c14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	7c12      	ldrb	r2, [r2, #16]
 8005c08:	f107 0108 	add.w	r1, r7, #8
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	4798      	blx	r3
 8005c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c12:	e077      	b.n	8005d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c14:	6839      	ldr	r1, [r7, #0]
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fab1 	bl	800617e <USBD_CtlError>
            err++;
 8005c1c:	7afb      	ldrb	r3, [r7, #11]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	72fb      	strb	r3, [r7, #11]
          break;
 8005c22:	e06f      	b.n	8005d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	7c12      	ldrb	r2, [r2, #16]
 8005c3c:	f107 0108 	add.w	r1, r7, #8
 8005c40:	4610      	mov	r0, r2
 8005c42:	4798      	blx	r3
 8005c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c46:	e05d      	b.n	8005d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c48:	6839      	ldr	r1, [r7, #0]
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fa97 	bl	800617e <USBD_CtlError>
            err++;
 8005c50:	7afb      	ldrb	r3, [r7, #11]
 8005c52:	3301      	adds	r3, #1
 8005c54:	72fb      	strb	r3, [r7, #11]
          break;
 8005c56:	e055      	b.n	8005d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00b      	beq.n	8005c7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	7c12      	ldrb	r2, [r2, #16]
 8005c70:	f107 0108 	add.w	r1, r7, #8
 8005c74:	4610      	mov	r0, r2
 8005c76:	4798      	blx	r3
 8005c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c7a:	e043      	b.n	8005d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c7c:	6839      	ldr	r1, [r7, #0]
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fa7d 	bl	800617e <USBD_CtlError>
            err++;
 8005c84:	7afb      	ldrb	r3, [r7, #11]
 8005c86:	3301      	adds	r3, #1
 8005c88:	72fb      	strb	r3, [r7, #11]
          break;
 8005c8a:	e03b      	b.n	8005d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00b      	beq.n	8005cb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	7c12      	ldrb	r2, [r2, #16]
 8005ca4:	f107 0108 	add.w	r1, r7, #8
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4798      	blx	r3
 8005cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cae:	e029      	b.n	8005d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fa63 	bl	800617e <USBD_CtlError>
            err++;
 8005cb8:	7afb      	ldrb	r3, [r7, #11]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8005cbe:	e021      	b.n	8005d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00b      	beq.n	8005ce4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	7c12      	ldrb	r2, [r2, #16]
 8005cd8:	f107 0108 	add.w	r1, r7, #8
 8005cdc:	4610      	mov	r0, r2
 8005cde:	4798      	blx	r3
 8005ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ce2:	e00f      	b.n	8005d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ce4:	6839      	ldr	r1, [r7, #0]
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fa49 	bl	800617e <USBD_CtlError>
            err++;
 8005cec:	7afb      	ldrb	r3, [r7, #11]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8005cf2:	e007      	b.n	8005d04 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005cf4:	6839      	ldr	r1, [r7, #0]
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fa41 	bl	800617e <USBD_CtlError>
          err++;
 8005cfc:	7afb      	ldrb	r3, [r7, #11]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005d02:	bf00      	nop
      }
      break;
 8005d04:	e037      	b.n	8005d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	7c1b      	ldrb	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d109      	bne.n	8005d22 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d16:	f107 0208 	add.w	r2, r7, #8
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	4798      	blx	r3
 8005d1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d20:	e029      	b.n	8005d76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d22:	6839      	ldr	r1, [r7, #0]
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fa2a 	bl	800617e <USBD_CtlError>
        err++;
 8005d2a:	7afb      	ldrb	r3, [r7, #11]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	72fb      	strb	r3, [r7, #11]
      break;
 8005d30:	e021      	b.n	8005d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	7c1b      	ldrb	r3, [r3, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10d      	bne.n	8005d56 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d42:	f107 0208 	add.w	r2, r7, #8
 8005d46:	4610      	mov	r0, r2
 8005d48:	4798      	blx	r3
 8005d4a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	2207      	movs	r2, #7
 8005d52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d54:	e00f      	b.n	8005d76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fa10 	bl	800617e <USBD_CtlError>
        err++;
 8005d5e:	7afb      	ldrb	r3, [r7, #11]
 8005d60:	3301      	adds	r3, #1
 8005d62:	72fb      	strb	r3, [r7, #11]
      break;
 8005d64:	e007      	b.n	8005d76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fa08 	bl	800617e <USBD_CtlError>
      err++;
 8005d6e:	7afb      	ldrb	r3, [r7, #11]
 8005d70:	3301      	adds	r3, #1
 8005d72:	72fb      	strb	r3, [r7, #11]
      break;
 8005d74:	bf00      	nop
  }

  if (err != 0U)
 8005d76:	7afb      	ldrb	r3, [r7, #11]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d11e      	bne.n	8005dba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	88db      	ldrh	r3, [r3, #6]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d016      	beq.n	8005db2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005d84:	893b      	ldrh	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00e      	beq.n	8005da8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	88da      	ldrh	r2, [r3, #6]
 8005d8e:	893b      	ldrh	r3, [r7, #8]
 8005d90:	4293      	cmp	r3, r2
 8005d92:	bf28      	it	cs
 8005d94:	4613      	movcs	r3, r2
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d9a:	893b      	ldrh	r3, [r7, #8]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	68f9      	ldr	r1, [r7, #12]
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fa5d 	bl	8006260 <USBD_CtlSendData>
 8005da6:	e009      	b.n	8005dbc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005da8:	6839      	ldr	r1, [r7, #0]
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f9e7 	bl	800617e <USBD_CtlError>
 8005db0:	e004      	b.n	8005dbc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 faae 	bl	8006314 <USBD_CtlSendStatus>
 8005db8:	e000      	b.n	8005dbc <USBD_GetDescriptor+0x2cc>
    return;
 8005dba:	bf00      	nop
  }
}
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop

08005dc4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	889b      	ldrh	r3, [r3, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d131      	bne.n	8005e3a <USBD_SetAddress+0x76>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	88db      	ldrh	r3, [r3, #6]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d12d      	bne.n	8005e3a <USBD_SetAddress+0x76>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	885b      	ldrh	r3, [r3, #2]
 8005de2:	2b7f      	cmp	r3, #127	; 0x7f
 8005de4:	d829      	bhi.n	8005e3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	885b      	ldrh	r3, [r3, #2]
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005df0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d104      	bne.n	8005e08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f9bc 	bl	800617e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e06:	e01d      	b.n	8005e44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	7bfa      	ldrb	r2, [r7, #15]
 8005e0c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	4619      	mov	r1, r3
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fedf 	bl	8006bd8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fa7a 	bl	8006314 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d004      	beq.n	8005e30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2202      	movs	r2, #2
 8005e2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e2e:	e009      	b.n	8005e44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e38:	e004      	b.n	8005e44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005e3a:	6839      	ldr	r1, [r7, #0]
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f99e 	bl	800617e <USBD_CtlError>
  }
}
 8005e42:	bf00      	nop
 8005e44:	bf00      	nop
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	885b      	ldrh	r3, [r3, #2]
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	4b4e      	ldr	r3, [pc, #312]	; (8005f9c <USBD_SetConfig+0x150>)
 8005e62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005e64:	4b4d      	ldr	r3, [pc, #308]	; (8005f9c <USBD_SetConfig+0x150>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d905      	bls.n	8005e78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005e6c:	6839      	ldr	r1, [r7, #0]
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f985 	bl	800617e <USBD_CtlError>
    return USBD_FAIL;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e08c      	b.n	8005f92 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d002      	beq.n	8005e8a <USBD_SetConfig+0x3e>
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d029      	beq.n	8005edc <USBD_SetConfig+0x90>
 8005e88:	e075      	b.n	8005f76 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005e8a:	4b44      	ldr	r3, [pc, #272]	; (8005f9c <USBD_SetConfig+0x150>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d020      	beq.n	8005ed4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005e92:	4b42      	ldr	r3, [pc, #264]	; (8005f9c <USBD_SetConfig+0x150>)
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e9c:	4b3f      	ldr	r3, [pc, #252]	; (8005f9c <USBD_SetConfig+0x150>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fe ffe7 	bl	8004e76 <USBD_SetClassConfig>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d008      	beq.n	8005ec4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005eb2:	6839      	ldr	r1, [r7, #0]
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f962 	bl	800617e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005ec2:	e065      	b.n	8005f90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fa25 	bl	8006314 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2203      	movs	r2, #3
 8005ece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005ed2:	e05d      	b.n	8005f90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fa1d 	bl	8006314 <USBD_CtlSendStatus>
      break;
 8005eda:	e059      	b.n	8005f90 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005edc:	4b2f      	ldr	r3, [pc, #188]	; (8005f9c <USBD_SetConfig+0x150>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d112      	bne.n	8005f0a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005eec:	4b2b      	ldr	r3, [pc, #172]	; (8005f9c <USBD_SetConfig+0x150>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005ef6:	4b29      	ldr	r3, [pc, #164]	; (8005f9c <USBD_SetConfig+0x150>)
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	4619      	mov	r1, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7fe ffd6 	bl	8004eae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa06 	bl	8006314 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005f08:	e042      	b.n	8005f90 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005f0a:	4b24      	ldr	r3, [pc, #144]	; (8005f9c <USBD_SetConfig+0x150>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d02a      	beq.n	8005f6e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7fe ffc4 	bl	8004eae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005f26:	4b1d      	ldr	r3, [pc, #116]	; (8005f9c <USBD_SetConfig+0x150>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f30:	4b1a      	ldr	r3, [pc, #104]	; (8005f9c <USBD_SetConfig+0x150>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fe ff9d 	bl	8004e76 <USBD_SetClassConfig>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00f      	beq.n	8005f66 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005f46:	6839      	ldr	r1, [r7, #0]
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f918 	bl	800617e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	4619      	mov	r1, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7fe ffa9 	bl	8004eae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005f64:	e014      	b.n	8005f90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f9d4 	bl	8006314 <USBD_CtlSendStatus>
      break;
 8005f6c:	e010      	b.n	8005f90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f9d0 	bl	8006314 <USBD_CtlSendStatus>
      break;
 8005f74:	e00c      	b.n	8005f90 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f900 	bl	800617e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f7e:	4b07      	ldr	r3, [pc, #28]	; (8005f9c <USBD_SetConfig+0x150>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7fe ff92 	bl	8004eae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f8e:	bf00      	nop
  }

  return ret;
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	2000011c 	.word	0x2000011c

08005fa0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	88db      	ldrh	r3, [r3, #6]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d004      	beq.n	8005fbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f8e2 	bl	800617e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005fba:	e023      	b.n	8006004 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	dc02      	bgt.n	8005fce <USBD_GetConfig+0x2e>
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	dc03      	bgt.n	8005fd4 <USBD_GetConfig+0x34>
 8005fcc:	e015      	b.n	8005ffa <USBD_GetConfig+0x5a>
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d00b      	beq.n	8005fea <USBD_GetConfig+0x4a>
 8005fd2:	e012      	b.n	8005ffa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3308      	adds	r3, #8
 8005fde:	2201      	movs	r2, #1
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f93c 	bl	8006260 <USBD_CtlSendData>
        break;
 8005fe8:	e00c      	b.n	8006004 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	3304      	adds	r3, #4
 8005fee:	2201      	movs	r2, #1
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f934 	bl	8006260 <USBD_CtlSendData>
        break;
 8005ff8:	e004      	b.n	8006004 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005ffa:	6839      	ldr	r1, [r7, #0]
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f8be 	bl	800617e <USBD_CtlError>
        break;
 8006002:	bf00      	nop
}
 8006004:	bf00      	nop
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800601c:	b2db      	uxtb	r3, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	2b02      	cmp	r3, #2
 8006022:	d81e      	bhi.n	8006062 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	88db      	ldrh	r3, [r3, #6]
 8006028:	2b02      	cmp	r3, #2
 800602a:	d004      	beq.n	8006036 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800602c:	6839      	ldr	r1, [r7, #0]
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f8a5 	bl	800617e <USBD_CtlError>
        break;
 8006034:	e01a      	b.n	800606c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006042:	2b00      	cmp	r3, #0
 8006044:	d005      	beq.n	8006052 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f043 0202 	orr.w	r2, r3, #2
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	330c      	adds	r3, #12
 8006056:	2202      	movs	r2, #2
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f900 	bl	8006260 <USBD_CtlSendData>
      break;
 8006060:	e004      	b.n	800606c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f88a 	bl	800617e <USBD_CtlError>
      break;
 800606a:	bf00      	nop
  }
}
 800606c:	bf00      	nop
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	885b      	ldrh	r3, [r3, #2]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d107      	bne.n	8006096 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f940 	bl	8006314 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006094:	e013      	b.n	80060be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	885b      	ldrh	r3, [r3, #2]
 800609a:	2b02      	cmp	r3, #2
 800609c:	d10b      	bne.n	80060b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	889b      	ldrh	r3, [r3, #4]
 80060a2:	0a1b      	lsrs	r3, r3, #8
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f930 	bl	8006314 <USBD_CtlSendStatus>
}
 80060b4:	e003      	b.n	80060be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80060b6:	6839      	ldr	r1, [r7, #0]
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f860 	bl	800617e <USBD_CtlError>
}
 80060be:	bf00      	nop
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b082      	sub	sp, #8
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d80b      	bhi.n	80060f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	885b      	ldrh	r3, [r3, #2]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d10c      	bne.n	8006100 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f910 	bl	8006314 <USBD_CtlSendStatus>
      }
      break;
 80060f4:	e004      	b.n	8006100 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f840 	bl	800617e <USBD_CtlError>
      break;
 80060fe:	e000      	b.n	8006102 <USBD_ClrFeature+0x3c>
      break;
 8006100:	bf00      	nop
  }
}
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b084      	sub	sp, #16
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	781a      	ldrb	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	3301      	adds	r3, #1
 8006124:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	781a      	ldrb	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	3301      	adds	r3, #1
 8006132:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f7ff fa41 	bl	80055bc <SWAPBYTE>
 800613a:	4603      	mov	r3, r0
 800613c:	461a      	mov	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3301      	adds	r3, #1
 8006146:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	3301      	adds	r3, #1
 800614c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f7ff fa34 	bl	80055bc <SWAPBYTE>
 8006154:	4603      	mov	r3, r0
 8006156:	461a      	mov	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3301      	adds	r3, #1
 8006160:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	3301      	adds	r3, #1
 8006166:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff fa27 	bl	80055bc <SWAPBYTE>
 800616e:	4603      	mov	r3, r0
 8006170:	461a      	mov	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	80da      	strh	r2, [r3, #6]
}
 8006176:	bf00      	nop
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006188:	2180      	movs	r1, #128	; 0x80
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fcba 	bl	8006b04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006190:	2100      	movs	r1, #0
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fcb6 	bl	8006b04 <USBD_LL_StallEP>
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d036      	beq.n	8006224 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80061ba:	6938      	ldr	r0, [r7, #16]
 80061bc:	f000 f836 	bl	800622c <USBD_GetLen>
 80061c0:	4603      	mov	r3, r0
 80061c2:	3301      	adds	r3, #1
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	4413      	add	r3, r2
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	7812      	ldrb	r2, [r2, #0]
 80061d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80061da:	7dfb      	ldrb	r3, [r7, #23]
 80061dc:	3301      	adds	r3, #1
 80061de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80061e0:	7dfb      	ldrb	r3, [r7, #23]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	4413      	add	r3, r2
 80061e6:	2203      	movs	r2, #3
 80061e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
 80061ec:	3301      	adds	r3, #1
 80061ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80061f0:	e013      	b.n	800621a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	4413      	add	r3, r2
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	7812      	ldrb	r2, [r2, #0]
 80061fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	3301      	adds	r3, #1
 8006202:	613b      	str	r3, [r7, #16]
    idx++;
 8006204:	7dfb      	ldrb	r3, [r7, #23]
 8006206:	3301      	adds	r3, #1
 8006208:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800620a:	7dfb      	ldrb	r3, [r7, #23]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	4413      	add	r3, r2
 8006210:	2200      	movs	r2, #0
 8006212:	701a      	strb	r2, [r3, #0]
    idx++;
 8006214:	7dfb      	ldrb	r3, [r7, #23]
 8006216:	3301      	adds	r3, #1
 8006218:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e7      	bne.n	80061f2 <USBD_GetString+0x52>
 8006222:	e000      	b.n	8006226 <USBD_GetString+0x86>
    return;
 8006224:	bf00      	nop
  }
}
 8006226:	3718      	adds	r7, #24
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800623c:	e005      	b.n	800624a <USBD_GetLen+0x1e>
  {
    len++;
 800623e:	7bfb      	ldrb	r3, [r7, #15]
 8006240:	3301      	adds	r3, #1
 8006242:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	3301      	adds	r3, #1
 8006248:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1f5      	bne.n	800623e <USBD_GetLen+0x12>
  }

  return len;
 8006252:	7bfb      	ldrb	r3, [r7, #15]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2202      	movs	r2, #2
 8006270:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	2100      	movs	r1, #0
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 fcc5 	bl	8006c16 <USBD_LL_Transmit>

  return USBD_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	2100      	movs	r1, #0
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 fcb4 	bl	8006c16 <USBD_LL_Transmit>

  return USBD_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2203      	movs	r2, #3
 80062c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	2100      	movs	r1, #0
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 fcb8 	bl	8006c58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	2100      	movs	r1, #0
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 fca7 	bl	8006c58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2204      	movs	r2, #4
 8006320:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006324:	2300      	movs	r3, #0
 8006326:	2200      	movs	r2, #0
 8006328:	2100      	movs	r1, #0
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fc73 	bl	8006c16 <USBD_LL_Transmit>

  return USBD_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b082      	sub	sp, #8
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2205      	movs	r2, #5
 8006346:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800634a:	2300      	movs	r3, #0
 800634c:	2200      	movs	r2, #0
 800634e:	2100      	movs	r1, #0
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fc81 	bl	8006c58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006364:	2200      	movs	r2, #0
 8006366:	4912      	ldr	r1, [pc, #72]	; (80063b0 <MX_USB_DEVICE_Init+0x50>)
 8006368:	4812      	ldr	r0, [pc, #72]	; (80063b4 <MX_USB_DEVICE_Init+0x54>)
 800636a:	f7fe fd07 	bl	8004d7c <USBD_Init>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006374:	f7fa f954 	bl	8000620 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006378:	490f      	ldr	r1, [pc, #60]	; (80063b8 <MX_USB_DEVICE_Init+0x58>)
 800637a:	480e      	ldr	r0, [pc, #56]	; (80063b4 <MX_USB_DEVICE_Init+0x54>)
 800637c:	f7fe fd2e 	bl	8004ddc <USBD_RegisterClass>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006386:	f7fa f94b 	bl	8000620 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800638a:	490c      	ldr	r1, [pc, #48]	; (80063bc <MX_USB_DEVICE_Init+0x5c>)
 800638c:	4809      	ldr	r0, [pc, #36]	; (80063b4 <MX_USB_DEVICE_Init+0x54>)
 800638e:	f7fe fc65 	bl	8004c5c <USBD_CDC_RegisterInterface>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d001      	beq.n	800639c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006398:	f7fa f942 	bl	8000620 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800639c:	4805      	ldr	r0, [pc, #20]	; (80063b4 <MX_USB_DEVICE_Init+0x54>)
 800639e:	f7fe fd53 	bl	8004e48 <USBD_Start>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80063a8:	f7fa f93a 	bl	8000620 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80063ac:	bf00      	nop
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	200000ac 	.word	0x200000ac
 80063b4:	20000120 	.word	0x20000120
 80063b8:	20000018 	.word	0x20000018
 80063bc:	20000098 	.word	0x20000098

080063c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80063c4:	2200      	movs	r2, #0
 80063c6:	4905      	ldr	r1, [pc, #20]	; (80063dc <CDC_Init_FS+0x1c>)
 80063c8:	4805      	ldr	r0, [pc, #20]	; (80063e0 <CDC_Init_FS+0x20>)
 80063ca:	f7fe fc61 	bl	8004c90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80063ce:	4905      	ldr	r1, [pc, #20]	; (80063e4 <CDC_Init_FS+0x24>)
 80063d0:	4803      	ldr	r0, [pc, #12]	; (80063e0 <CDC_Init_FS+0x20>)
 80063d2:	f7fe fc7f 	bl	8004cd4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80063d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80063d8:	4618      	mov	r0, r3
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	20000bfc 	.word	0x20000bfc
 80063e0:	20000120 	.word	0x20000120
 80063e4:	200003fc 	.word	0x200003fc

080063e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80063e8:	b480      	push	{r7}
 80063ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80063ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	4603      	mov	r3, r0
 8006400:	6039      	str	r1, [r7, #0]
 8006402:	71fb      	strb	r3, [r7, #7]
 8006404:	4613      	mov	r3, r2
 8006406:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006408:	79fb      	ldrb	r3, [r7, #7]
 800640a:	2b23      	cmp	r3, #35	; 0x23
 800640c:	d84a      	bhi.n	80064a4 <CDC_Control_FS+0xac>
 800640e:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <CDC_Control_FS+0x1c>)
 8006410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006414:	080064a5 	.word	0x080064a5
 8006418:	080064a5 	.word	0x080064a5
 800641c:	080064a5 	.word	0x080064a5
 8006420:	080064a5 	.word	0x080064a5
 8006424:	080064a5 	.word	0x080064a5
 8006428:	080064a5 	.word	0x080064a5
 800642c:	080064a5 	.word	0x080064a5
 8006430:	080064a5 	.word	0x080064a5
 8006434:	080064a5 	.word	0x080064a5
 8006438:	080064a5 	.word	0x080064a5
 800643c:	080064a5 	.word	0x080064a5
 8006440:	080064a5 	.word	0x080064a5
 8006444:	080064a5 	.word	0x080064a5
 8006448:	080064a5 	.word	0x080064a5
 800644c:	080064a5 	.word	0x080064a5
 8006450:	080064a5 	.word	0x080064a5
 8006454:	080064a5 	.word	0x080064a5
 8006458:	080064a5 	.word	0x080064a5
 800645c:	080064a5 	.word	0x080064a5
 8006460:	080064a5 	.word	0x080064a5
 8006464:	080064a5 	.word	0x080064a5
 8006468:	080064a5 	.word	0x080064a5
 800646c:	080064a5 	.word	0x080064a5
 8006470:	080064a5 	.word	0x080064a5
 8006474:	080064a5 	.word	0x080064a5
 8006478:	080064a5 	.word	0x080064a5
 800647c:	080064a5 	.word	0x080064a5
 8006480:	080064a5 	.word	0x080064a5
 8006484:	080064a5 	.word	0x080064a5
 8006488:	080064a5 	.word	0x080064a5
 800648c:	080064a5 	.word	0x080064a5
 8006490:	080064a5 	.word	0x080064a5
 8006494:	080064a5 	.word	0x080064a5
 8006498:	080064a5 	.word	0x080064a5
 800649c:	080064a5 	.word	0x080064a5
 80064a0:	080064a5 	.word	0x080064a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80064a4:	bf00      	nop
  }

  return (USBD_OK);
 80064a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	4805      	ldr	r0, [pc, #20]	; (80064d8 <CDC_Receive_FS+0x24>)
 80064c2:	f7fe fc07 	bl	8004cd4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80064c6:	4804      	ldr	r0, [pc, #16]	; (80064d8 <CDC_Receive_FS+0x24>)
 80064c8:	f7fe fc22 	bl	8004d10 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80064cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20000120 	.word	0x20000120

080064dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	4613      	mov	r3, r2
 80064e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80064ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
	...

08006500 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	4603      	mov	r3, r0
 8006508:	6039      	str	r1, [r7, #0]
 800650a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2212      	movs	r2, #18
 8006510:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006512:	4b03      	ldr	r3, [pc, #12]	; (8006520 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	200000c8 	.word	0x200000c8

08006524 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	4603      	mov	r3, r0
 800652c:	6039      	str	r1, [r7, #0]
 800652e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2204      	movs	r2, #4
 8006534:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006536:	4b03      	ldr	r3, [pc, #12]	; (8006544 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	200000dc 	.word	0x200000dc

08006548 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	4603      	mov	r3, r0
 8006550:	6039      	str	r1, [r7, #0]
 8006552:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006554:	79fb      	ldrb	r3, [r7, #7]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d105      	bne.n	8006566 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	4907      	ldr	r1, [pc, #28]	; (800657c <USBD_FS_ProductStrDescriptor+0x34>)
 800655e:	4808      	ldr	r0, [pc, #32]	; (8006580 <USBD_FS_ProductStrDescriptor+0x38>)
 8006560:	f7ff fe1e 	bl	80061a0 <USBD_GetString>
 8006564:	e004      	b.n	8006570 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	4904      	ldr	r1, [pc, #16]	; (800657c <USBD_FS_ProductStrDescriptor+0x34>)
 800656a:	4805      	ldr	r0, [pc, #20]	; (8006580 <USBD_FS_ProductStrDescriptor+0x38>)
 800656c:	f7ff fe18 	bl	80061a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006570:	4b02      	ldr	r3, [pc, #8]	; (800657c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	200013fc 	.word	0x200013fc
 8006580:	08006db8 	.word	0x08006db8

08006584 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	4603      	mov	r3, r0
 800658c:	6039      	str	r1, [r7, #0]
 800658e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	4904      	ldr	r1, [pc, #16]	; (80065a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006594:	4804      	ldr	r0, [pc, #16]	; (80065a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006596:	f7ff fe03 	bl	80061a0 <USBD_GetString>
  return USBD_StrDesc;
 800659a:	4b02      	ldr	r3, [pc, #8]	; (80065a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800659c:	4618      	mov	r0, r3
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	200013fc 	.word	0x200013fc
 80065a8:	08006dd0 	.word	0x08006dd0

080065ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	4603      	mov	r3, r0
 80065b4:	6039      	str	r1, [r7, #0]
 80065b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	221a      	movs	r2, #26
 80065bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80065be:	f000 f843 	bl	8006648 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80065c2:	4b02      	ldr	r3, [pc, #8]	; (80065cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	200000e0 	.word	0x200000e0

080065d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	4603      	mov	r3, r0
 80065d8:	6039      	str	r1, [r7, #0]
 80065da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80065dc:	79fb      	ldrb	r3, [r7, #7]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d105      	bne.n	80065ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	4907      	ldr	r1, [pc, #28]	; (8006604 <USBD_FS_ConfigStrDescriptor+0x34>)
 80065e6:	4808      	ldr	r0, [pc, #32]	; (8006608 <USBD_FS_ConfigStrDescriptor+0x38>)
 80065e8:	f7ff fdda 	bl	80061a0 <USBD_GetString>
 80065ec:	e004      	b.n	80065f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	4904      	ldr	r1, [pc, #16]	; (8006604 <USBD_FS_ConfigStrDescriptor+0x34>)
 80065f2:	4805      	ldr	r0, [pc, #20]	; (8006608 <USBD_FS_ConfigStrDescriptor+0x38>)
 80065f4:	f7ff fdd4 	bl	80061a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80065f8:	4b02      	ldr	r3, [pc, #8]	; (8006604 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	200013fc 	.word	0x200013fc
 8006608:	08006de4 	.word	0x08006de4

0800660c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	4603      	mov	r3, r0
 8006614:	6039      	str	r1, [r7, #0]
 8006616:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006618:	79fb      	ldrb	r3, [r7, #7]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d105      	bne.n	800662a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	4907      	ldr	r1, [pc, #28]	; (8006640 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006622:	4808      	ldr	r0, [pc, #32]	; (8006644 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006624:	f7ff fdbc 	bl	80061a0 <USBD_GetString>
 8006628:	e004      	b.n	8006634 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	4904      	ldr	r1, [pc, #16]	; (8006640 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800662e:	4805      	ldr	r0, [pc, #20]	; (8006644 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006630:	f7ff fdb6 	bl	80061a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006634:	4b02      	ldr	r3, [pc, #8]	; (8006640 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	200013fc 	.word	0x200013fc
 8006644:	08006df0 	.word	0x08006df0

08006648 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800664e:	4b0f      	ldr	r3, [pc, #60]	; (800668c <Get_SerialNum+0x44>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006654:	4b0e      	ldr	r3, [pc, #56]	; (8006690 <Get_SerialNum+0x48>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800665a:	4b0e      	ldr	r3, [pc, #56]	; (8006694 <Get_SerialNum+0x4c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4413      	add	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d009      	beq.n	8006682 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800666e:	2208      	movs	r2, #8
 8006670:	4909      	ldr	r1, [pc, #36]	; (8006698 <Get_SerialNum+0x50>)
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 f814 	bl	80066a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006678:	2204      	movs	r2, #4
 800667a:	4908      	ldr	r1, [pc, #32]	; (800669c <Get_SerialNum+0x54>)
 800667c:	68b8      	ldr	r0, [r7, #8]
 800667e:	f000 f80f 	bl	80066a0 <IntToUnicode>
  }
}
 8006682:	bf00      	nop
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	1fff7a10 	.word	0x1fff7a10
 8006690:	1fff7a14 	.word	0x1fff7a14
 8006694:	1fff7a18 	.word	0x1fff7a18
 8006698:	200000e2 	.word	0x200000e2
 800669c:	200000f2 	.word	0x200000f2

080066a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	4613      	mov	r3, r2
 80066ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80066ae:	2300      	movs	r3, #0
 80066b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80066b2:	2300      	movs	r3, #0
 80066b4:	75fb      	strb	r3, [r7, #23]
 80066b6:	e027      	b.n	8006708 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	0f1b      	lsrs	r3, r3, #28
 80066bc:	2b09      	cmp	r3, #9
 80066be:	d80b      	bhi.n	80066d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	0f1b      	lsrs	r3, r3, #28
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	4619      	mov	r1, r3
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	440b      	add	r3, r1
 80066d0:	3230      	adds	r2, #48	; 0x30
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	701a      	strb	r2, [r3, #0]
 80066d6:	e00a      	b.n	80066ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	0f1b      	lsrs	r3, r3, #28
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	005b      	lsls	r3, r3, #1
 80066e2:	4619      	mov	r1, r3
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	440b      	add	r3, r1
 80066e8:	3237      	adds	r2, #55	; 0x37
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	011b      	lsls	r3, r3, #4
 80066f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	3301      	adds	r3, #1
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	4413      	add	r3, r2
 80066fe:	2200      	movs	r2, #0
 8006700:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006702:	7dfb      	ldrb	r3, [r7, #23]
 8006704:	3301      	adds	r3, #1
 8006706:	75fb      	strb	r3, [r7, #23]
 8006708:	7dfa      	ldrb	r2, [r7, #23]
 800670a:	79fb      	ldrb	r3, [r7, #7]
 800670c:	429a      	cmp	r2, r3
 800670e:	d3d3      	bcc.n	80066b8 <IntToUnicode+0x18>
  }
}
 8006710:	bf00      	nop
 8006712:	bf00      	nop
 8006714:	371c      	adds	r7, #28
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
	...

08006720 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08a      	sub	sp, #40	; 0x28
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006728:	f107 0314 	add.w	r3, r7, #20
 800672c:	2200      	movs	r2, #0
 800672e:	601a      	str	r2, [r3, #0]
 8006730:	605a      	str	r2, [r3, #4]
 8006732:	609a      	str	r2, [r3, #8]
 8006734:	60da      	str	r2, [r3, #12]
 8006736:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006740:	d13a      	bne.n	80067b8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006742:	2300      	movs	r3, #0
 8006744:	613b      	str	r3, [r7, #16]
 8006746:	4b1e      	ldr	r3, [pc, #120]	; (80067c0 <HAL_PCD_MspInit+0xa0>)
 8006748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674a:	4a1d      	ldr	r2, [pc, #116]	; (80067c0 <HAL_PCD_MspInit+0xa0>)
 800674c:	f043 0301 	orr.w	r3, r3, #1
 8006750:	6313      	str	r3, [r2, #48]	; 0x30
 8006752:	4b1b      	ldr	r3, [pc, #108]	; (80067c0 <HAL_PCD_MspInit+0xa0>)
 8006754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	613b      	str	r3, [r7, #16]
 800675c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800675e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006764:	2302      	movs	r3, #2
 8006766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006768:	2300      	movs	r3, #0
 800676a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800676c:	2303      	movs	r3, #3
 800676e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006770:	230a      	movs	r3, #10
 8006772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006774:	f107 0314 	add.w	r3, r7, #20
 8006778:	4619      	mov	r1, r3
 800677a:	4812      	ldr	r0, [pc, #72]	; (80067c4 <HAL_PCD_MspInit+0xa4>)
 800677c:	f7fa f996 	bl	8000aac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006780:	4b0f      	ldr	r3, [pc, #60]	; (80067c0 <HAL_PCD_MspInit+0xa0>)
 8006782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006784:	4a0e      	ldr	r2, [pc, #56]	; (80067c0 <HAL_PCD_MspInit+0xa0>)
 8006786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678a:	6353      	str	r3, [r2, #52]	; 0x34
 800678c:	2300      	movs	r3, #0
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <HAL_PCD_MspInit+0xa0>)
 8006792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006794:	4a0a      	ldr	r2, [pc, #40]	; (80067c0 <HAL_PCD_MspInit+0xa0>)
 8006796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800679a:	6453      	str	r3, [r2, #68]	; 0x44
 800679c:	4b08      	ldr	r3, [pc, #32]	; (80067c0 <HAL_PCD_MspInit+0xa0>)
 800679e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067a4:	60fb      	str	r3, [r7, #12]
 80067a6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80067a8:	2200      	movs	r2, #0
 80067aa:	2100      	movs	r1, #0
 80067ac:	2043      	movs	r0, #67	; 0x43
 80067ae:	f7fa f946 	bl	8000a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80067b2:	2043      	movs	r0, #67	; 0x43
 80067b4:	f7fa f95f 	bl	8000a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80067b8:	bf00      	nop
 80067ba:	3728      	adds	r7, #40	; 0x28
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40023800 	.word	0x40023800
 80067c4:	40020000 	.word	0x40020000

080067c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80067dc:	4619      	mov	r1, r3
 80067de:	4610      	mov	r0, r2
 80067e0:	f7fe fb7f 	bl	8004ee2 <USBD_LL_SetupStage>
}
 80067e4:	bf00      	nop
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80067fe:	78fa      	ldrb	r2, [r7, #3]
 8006800:	6879      	ldr	r1, [r7, #4]
 8006802:	4613      	mov	r3, r2
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	4413      	add	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	440b      	add	r3, r1
 800680c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	4619      	mov	r1, r3
 8006816:	f7fe fbb9 	bl	8004f8c <USBD_LL_DataOutStage>
}
 800681a:	bf00      	nop
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b082      	sub	sp, #8
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	460b      	mov	r3, r1
 800682c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006834:	78fa      	ldrb	r2, [r7, #3]
 8006836:	6879      	ldr	r1, [r7, #4]
 8006838:	4613      	mov	r3, r2
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	4413      	add	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	440b      	add	r3, r1
 8006842:	334c      	adds	r3, #76	; 0x4c
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	78fb      	ldrb	r3, [r7, #3]
 8006848:	4619      	mov	r1, r3
 800684a:	f7fe fc52 	bl	80050f2 <USBD_LL_DataInStage>
}
 800684e:	bf00      	nop
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006864:	4618      	mov	r0, r3
 8006866:	f7fe fd86 	bl	8005376 <USBD_LL_SOF>
}
 800686a:	bf00      	nop
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800687a:	2301      	movs	r3, #1
 800687c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d102      	bne.n	800688c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006886:	2300      	movs	r3, #0
 8006888:	73fb      	strb	r3, [r7, #15]
 800688a:	e008      	b.n	800689e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	2b02      	cmp	r3, #2
 8006892:	d102      	bne.n	800689a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006894:	2301      	movs	r3, #1
 8006896:	73fb      	strb	r3, [r7, #15]
 8006898:	e001      	b.n	800689e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800689a:	f7f9 fec1 	bl	8000620 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80068a4:	7bfa      	ldrb	r2, [r7, #15]
 80068a6:	4611      	mov	r1, r2
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fe fd26 	bl	80052fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fe fcce 	bl	8005256 <USBD_LL_Reset>
}
 80068ba:	bf00      	nop
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fe fd21 	bl	800531a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	6812      	ldr	r2, [r2, #0]
 80068e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068ea:	f043 0301 	orr.w	r3, r3, #1
 80068ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d005      	beq.n	8006904 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80068f8:	4b04      	ldr	r3, [pc, #16]	; (800690c <HAL_PCD_SuspendCallback+0x48>)
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	4a03      	ldr	r2, [pc, #12]	; (800690c <HAL_PCD_SuspendCallback+0x48>)
 80068fe:	f043 0306 	orr.w	r3, r3, #6
 8006902:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006904:	bf00      	nop
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	e000ed00 	.word	0xe000ed00

08006910 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe fd11 	bl	8005346 <USBD_LL_Resume>
}
 8006924:	bf00      	nop
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800693e:	78fa      	ldrb	r2, [r7, #3]
 8006940:	4611      	mov	r1, r2
 8006942:	4618      	mov	r0, r3
 8006944:	f7fe fd69 	bl	800541a <USBD_LL_IsoOUTIncomplete>
}
 8006948:	bf00      	nop
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006962:	78fa      	ldrb	r2, [r7, #3]
 8006964:	4611      	mov	r1, r2
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe fd25 	bl	80053b6 <USBD_LL_IsoINIncomplete>
}
 800696c:	bf00      	nop
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006982:	4618      	mov	r0, r3
 8006984:	f7fe fd7b 	bl	800547e <USBD_LL_DevConnected>
}
 8006988:	bf00      	nop
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fe fd78 	bl	8005494 <USBD_LL_DevDisconnected>
}
 80069a4:	bf00      	nop
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d13c      	bne.n	8006a36 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80069bc:	4a20      	ldr	r2, [pc, #128]	; (8006a40 <USBD_LL_Init+0x94>)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a1e      	ldr	r2, [pc, #120]	; (8006a40 <USBD_LL_Init+0x94>)
 80069c8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80069cc:	4b1c      	ldr	r3, [pc, #112]	; (8006a40 <USBD_LL_Init+0x94>)
 80069ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80069d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80069d4:	4b1a      	ldr	r3, [pc, #104]	; (8006a40 <USBD_LL_Init+0x94>)
 80069d6:	2204      	movs	r2, #4
 80069d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80069da:	4b19      	ldr	r3, [pc, #100]	; (8006a40 <USBD_LL_Init+0x94>)
 80069dc:	2202      	movs	r2, #2
 80069de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80069e0:	4b17      	ldr	r3, [pc, #92]	; (8006a40 <USBD_LL_Init+0x94>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80069e6:	4b16      	ldr	r3, [pc, #88]	; (8006a40 <USBD_LL_Init+0x94>)
 80069e8:	2202      	movs	r2, #2
 80069ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80069ec:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <USBD_LL_Init+0x94>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80069f2:	4b13      	ldr	r3, [pc, #76]	; (8006a40 <USBD_LL_Init+0x94>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80069f8:	4b11      	ldr	r3, [pc, #68]	; (8006a40 <USBD_LL_Init+0x94>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80069fe:	4b10      	ldr	r3, [pc, #64]	; (8006a40 <USBD_LL_Init+0x94>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006a04:	4b0e      	ldr	r3, [pc, #56]	; (8006a40 <USBD_LL_Init+0x94>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006a0a:	480d      	ldr	r0, [pc, #52]	; (8006a40 <USBD_LL_Init+0x94>)
 8006a0c:	f7fa f9ea 	bl	8000de4 <HAL_PCD_Init>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006a16:	f7f9 fe03 	bl	8000620 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006a1a:	2180      	movs	r1, #128	; 0x80
 8006a1c:	4808      	ldr	r0, [pc, #32]	; (8006a40 <USBD_LL_Init+0x94>)
 8006a1e:	f7fb fc42 	bl	80022a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006a22:	2240      	movs	r2, #64	; 0x40
 8006a24:	2100      	movs	r1, #0
 8006a26:	4806      	ldr	r0, [pc, #24]	; (8006a40 <USBD_LL_Init+0x94>)
 8006a28:	f7fb fbf6 	bl	8002218 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006a2c:	2280      	movs	r2, #128	; 0x80
 8006a2e:	2101      	movs	r1, #1
 8006a30:	4803      	ldr	r0, [pc, #12]	; (8006a40 <USBD_LL_Init+0x94>)
 8006a32:	f7fb fbf1 	bl	8002218 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	200015fc 	.word	0x200015fc

08006a44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fa fadf 	bl	800101e <HAL_PCD_Start>
 8006a60:	4603      	mov	r3, r0
 8006a62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 f942 	bl	8006cf0 <USBD_Get_USB_Status>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a70:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	4608      	mov	r0, r1
 8006a84:	4611      	mov	r1, r2
 8006a86:	461a      	mov	r2, r3
 8006a88:	4603      	mov	r3, r0
 8006a8a:	70fb      	strb	r3, [r7, #3]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	70bb      	strb	r3, [r7, #2]
 8006a90:	4613      	mov	r3, r2
 8006a92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006aa2:	78bb      	ldrb	r3, [r7, #2]
 8006aa4:	883a      	ldrh	r2, [r7, #0]
 8006aa6:	78f9      	ldrb	r1, [r7, #3]
 8006aa8:	f7fa ffb0 	bl	8001a0c <HAL_PCD_EP_Open>
 8006aac:	4603      	mov	r3, r0
 8006aae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 f91c 	bl	8006cf0 <USBD_Get_USB_Status>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b084      	sub	sp, #16
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	460b      	mov	r3, r1
 8006ad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ae0:	78fa      	ldrb	r2, [r7, #3]
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fa fff9 	bl	8001adc <HAL_PCD_EP_Close>
 8006aea:	4603      	mov	r3, r0
 8006aec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 f8fd 	bl	8006cf0 <USBD_Get_USB_Status>
 8006af6:	4603      	mov	r3, r0
 8006af8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b1e:	78fa      	ldrb	r2, [r7, #3]
 8006b20:	4611      	mov	r1, r2
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fb f8d1 	bl	8001cca <HAL_PCD_EP_SetStall>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 f8de 	bl	8006cf0 <USBD_Get_USB_Status>
 8006b34:	4603      	mov	r3, r0
 8006b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b5c:	78fa      	ldrb	r2, [r7, #3]
 8006b5e:	4611      	mov	r1, r2
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fb f916 	bl	8001d92 <HAL_PCD_EP_ClrStall>
 8006b66:	4603      	mov	r3, r0
 8006b68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 f8bf 	bl	8006cf0 <USBD_Get_USB_Status>
 8006b72:	4603      	mov	r3, r0
 8006b74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b76:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	da0b      	bge.n	8006bb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ba2:	68f9      	ldr	r1, [r7, #12]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	333e      	adds	r3, #62	; 0x3e
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	e00b      	b.n	8006bcc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bba:	68f9      	ldr	r1, [r7, #12]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	4413      	add	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	440b      	add	r3, r1
 8006bc6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006bca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006be4:	2300      	movs	r3, #0
 8006be6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006bf2:	78fa      	ldrb	r2, [r7, #3]
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fa fee3 	bl	80019c2 <HAL_PCD_SetAddress>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 f874 	bl	8006cf0 <USBD_Get_USB_Status>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b086      	sub	sp, #24
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	60f8      	str	r0, [r7, #12]
 8006c1e:	607a      	str	r2, [r7, #4]
 8006c20:	603b      	str	r3, [r7, #0]
 8006c22:	460b      	mov	r3, r1
 8006c24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006c34:	7af9      	ldrb	r1, [r7, #11]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	f7fa fffc 	bl	8001c36 <HAL_PCD_EP_Transmit>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 f853 	bl	8006cf0 <USBD_Get_USB_Status>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	607a      	str	r2, [r7, #4]
 8006c62:	603b      	str	r3, [r7, #0]
 8006c64:	460b      	mov	r3, r1
 8006c66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006c76:	7af9      	ldrb	r1, [r7, #11]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	f7fa ff78 	bl	8001b70 <HAL_PCD_EP_Receive>
 8006c80:	4603      	mov	r3, r0
 8006c82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 f832 	bl	8006cf0 <USBD_Get_USB_Status>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c90:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006cac:	78fa      	ldrb	r2, [r7, #3]
 8006cae:	4611      	mov	r1, r2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7fa ffa8 	bl	8001c06 <HAL_PCD_EP_GetRxCount>
 8006cb6:	4603      	mov	r3, r0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006cc8:	4b03      	ldr	r3, [pc, #12]	; (8006cd8 <USBD_static_malloc+0x18>)
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	20001b08 	.word	0x20001b08

08006cdc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]

}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006cfe:	79fb      	ldrb	r3, [r7, #7]
 8006d00:	2b03      	cmp	r3, #3
 8006d02:	d817      	bhi.n	8006d34 <USBD_Get_USB_Status+0x44>
 8006d04:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <USBD_Get_USB_Status+0x1c>)
 8006d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0a:	bf00      	nop
 8006d0c:	08006d1d 	.word	0x08006d1d
 8006d10:	08006d23 	.word	0x08006d23
 8006d14:	08006d29 	.word	0x08006d29
 8006d18:	08006d2f 	.word	0x08006d2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d20:	e00b      	b.n	8006d3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d22:	2303      	movs	r3, #3
 8006d24:	73fb      	strb	r3, [r7, #15]
    break;
 8006d26:	e008      	b.n	8006d3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d2c:	e005      	b.n	8006d3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	73fb      	strb	r3, [r7, #15]
    break;
 8006d32:	e002      	b.n	8006d3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006d34:	2303      	movs	r3, #3
 8006d36:	73fb      	strb	r3, [r7, #15]
    break;
 8006d38:	bf00      	nop
  }
  return usb_status;
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <__libc_init_array>:
 8006d48:	b570      	push	{r4, r5, r6, lr}
 8006d4a:	4d0d      	ldr	r5, [pc, #52]	; (8006d80 <__libc_init_array+0x38>)
 8006d4c:	4c0d      	ldr	r4, [pc, #52]	; (8006d84 <__libc_init_array+0x3c>)
 8006d4e:	1b64      	subs	r4, r4, r5
 8006d50:	10a4      	asrs	r4, r4, #2
 8006d52:	2600      	movs	r6, #0
 8006d54:	42a6      	cmp	r6, r4
 8006d56:	d109      	bne.n	8006d6c <__libc_init_array+0x24>
 8006d58:	4d0b      	ldr	r5, [pc, #44]	; (8006d88 <__libc_init_array+0x40>)
 8006d5a:	4c0c      	ldr	r4, [pc, #48]	; (8006d8c <__libc_init_array+0x44>)
 8006d5c:	f000 f820 	bl	8006da0 <_init>
 8006d60:	1b64      	subs	r4, r4, r5
 8006d62:	10a4      	asrs	r4, r4, #2
 8006d64:	2600      	movs	r6, #0
 8006d66:	42a6      	cmp	r6, r4
 8006d68:	d105      	bne.n	8006d76 <__libc_init_array+0x2e>
 8006d6a:	bd70      	pop	{r4, r5, r6, pc}
 8006d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d70:	4798      	blx	r3
 8006d72:	3601      	adds	r6, #1
 8006d74:	e7ee      	b.n	8006d54 <__libc_init_array+0xc>
 8006d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d7a:	4798      	blx	r3
 8006d7c:	3601      	adds	r6, #1
 8006d7e:	e7f2      	b.n	8006d66 <__libc_init_array+0x1e>
 8006d80:	08006e18 	.word	0x08006e18
 8006d84:	08006e18 	.word	0x08006e18
 8006d88:	08006e18 	.word	0x08006e18
 8006d8c:	08006e1c 	.word	0x08006e1c

08006d90 <memset>:
 8006d90:	4402      	add	r2, r0
 8006d92:	4603      	mov	r3, r0
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d100      	bne.n	8006d9a <memset+0xa>
 8006d98:	4770      	bx	lr
 8006d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d9e:	e7f9      	b.n	8006d94 <memset+0x4>

08006da0 <_init>:
 8006da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da2:	bf00      	nop
 8006da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da6:	bc08      	pop	{r3}
 8006da8:	469e      	mov	lr, r3
 8006daa:	4770      	bx	lr

08006dac <_fini>:
 8006dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dae:	bf00      	nop
 8006db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db2:	bc08      	pop	{r3}
 8006db4:	469e      	mov	lr, r3
 8006db6:	4770      	bx	lr
