
debounce.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800ce90  0800ce90  0001ce90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3ac  0800d3ac  000202d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3ac  0800d3ac  0001d3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3b4  0800d3b4  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3b4  0800d3b4  0001d3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3b8  0800d3b8  0001d3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800d3bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202d0  2**0
                  CONTENTS
 10 .bss          00001cd0  200002d0  200002d0  000202d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001fa0  20001fa0  000202d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014190  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003190  00000000  00000000  00034490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  00037620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ff8  00000000  00000000  00038790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002479c  00000000  00000000  00039788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014e8a  00000000  00000000  0005df24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdd15  00000000  00000000  00072dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140ac3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e78  00000000  00000000  00140b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ce78 	.word	0x0800ce78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	0800ce78 	.word	0x0800ce78

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b092      	sub	sp, #72	; 0x48
 8000ffc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffe:	f000 fb27 	bl	8001650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001002:	f000 f849 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001006:	f000 f8e5 	bl	80011d4 <MX_GPIO_Init>
  MX_TIM6_Init();
 800100a:	f000 f8ad 	bl	8001168 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 800100e:	f006 fd35 	bl	8007a7c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	CDC_Transmit_FS("Hello", 6);
 8001012:	2106      	movs	r1, #6
 8001014:	481a      	ldr	r0, [pc, #104]	; (8001080 <main+0x88>)
 8001016:	f006 fdff 	bl	8007c18 <CDC_Transmit_FS>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char buffer[50];
	  char* s = "geeksforgeeks";
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <main+0x8c>)
 800101c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float val=5.0;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <main+0x90>)
 8001020:	63bb      	str	r3, [r7, #56]	; 0x38
	     // Counting the character and storing
	     // in buffer using snprintf

	     int j = snprintf(buffer, 50, "%s %f\n", s,val);
 8001022:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001024:	f7ff fa90 	bl	8000548 <__aeabi_f2d>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4638      	mov	r0, r7
 800102e:	e9cd 2300 	strd	r2, r3, [sp]
 8001032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001034:	4a15      	ldr	r2, [pc, #84]	; (800108c <main+0x94>)
 8001036:	2132      	movs	r1, #50	; 0x32
 8001038:	f008 f90a 	bl	8009250 <sniprintf>
 800103c:	6378      	str	r0, [r7, #52]	; 0x34
	  CDC_Transmit_FS(buffer, strlen(buffer));
 800103e:	463b      	mov	r3, r7
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff f8c5 	bl	80001d0 <strlen>
 8001046:	4603      	mov	r3, r0
 8001048:	b29a      	uxth	r2, r3
 800104a:	463b      	mov	r3, r7
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f006 fde2 	bl	8007c18 <CDC_Transmit_FS>
	  HAL_Delay(500);
 8001054:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001058:	f000 fb6c 	bl	8001734 <HAL_Delay>
	  if (flag)
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <main+0x98>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d007      	beq.n	8001074 <main+0x7c>
	  	{
	  		flag=0;
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <main+0x98>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
	  		HAL_GPIO_TogglePin(led_GPIO_Port,led_Pin);
 800106a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800106e:	4809      	ldr	r0, [pc, #36]	; (8001094 <main+0x9c>)
 8001070:	f000 fe7d 	bl	8001d6e <HAL_GPIO_TogglePin>


	  	}
   HAL_Delay(500);
 8001074:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001078:	f000 fb5c 	bl	8001734 <HAL_Delay>
  {
 800107c:	e7cd      	b.n	800101a <main+0x22>
 800107e:	bf00      	nop
 8001080:	0800ce90 	.word	0x0800ce90
 8001084:	0800ce98 	.word	0x0800ce98
 8001088:	40a00000 	.word	0x40a00000
 800108c:	0800cea8 	.word	0x0800cea8
 8001090:	20000330 	.word	0x20000330
 8001094:	40020c00 	.word	0x40020c00

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b094      	sub	sp, #80	; 0x50
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	2230      	movs	r2, #48	; 0x30
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f007 fa4a 	bl	8008540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <SystemClock_Config+0xc8>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	4a26      	ldr	r2, [pc, #152]	; (8001160 <SystemClock_Config+0xc8>)
 80010c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ca:	6413      	str	r3, [r2, #64]	; 0x40
 80010cc:	4b24      	ldr	r3, [pc, #144]	; (8001160 <SystemClock_Config+0xc8>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <SystemClock_Config+0xcc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a20      	ldr	r2, [pc, #128]	; (8001164 <SystemClock_Config+0xcc>)
 80010e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <SystemClock_Config+0xcc>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fe:	2302      	movs	r3, #2
 8001100:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001102:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001106:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001108:	2304      	movs	r3, #4
 800110a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800110c:	2348      	movs	r3, #72	; 0x48
 800110e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001110:	2302      	movs	r3, #2
 8001112:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001114:	2303      	movs	r3, #3
 8001116:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	4618      	mov	r0, r3
 800111e:	f002 f8d7 	bl	80032d0 <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001128:	f000 f8f4 	bl	8001314 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001130:	2302      	movs	r3, #2
 8001132:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	2102      	movs	r1, #2
 8001148:	4618      	mov	r0, r3
 800114a:	f002 fb39 	bl	80037c0 <HAL_RCC_ClockConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001154:	f000 f8de 	bl	8001314 <Error_Handler>
  }
}
 8001158:	bf00      	nop
 800115a:	3750      	adds	r7, #80	; 0x50
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40007000 	.word	0x40007000

08001168 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <MX_TIM6_Init+0x64>)
 8001178:	4a15      	ldr	r2, [pc, #84]	; (80011d0 <MX_TIM6_Init+0x68>)
 800117a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <MX_TIM6_Init+0x64>)
 800117e:	2253      	movs	r2, #83	; 0x53
 8001180:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_TIM6_Init+0x64>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65000-1;
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <MX_TIM6_Init+0x64>)
 800118a:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 800118e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_TIM6_Init+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001196:	480d      	ldr	r0, [pc, #52]	; (80011cc <MX_TIM6_Init+0x64>)
 8001198:	f002 fd0a 	bl	8003bb0 <HAL_TIM_Base_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80011a2:	f000 f8b7 	bl	8001314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011ae:	463b      	mov	r3, r7
 80011b0:	4619      	mov	r1, r3
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <MX_TIM6_Init+0x64>)
 80011b4:	f002 ffbc 	bl	8004130 <HAL_TIMEx_MasterConfigSynchronization>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80011be:	f000 f8a9 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000334 	.word	0x20000334
 80011d0:	40001000 	.word	0x40001000

080011d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b32      	ldr	r3, [pc, #200]	; (80012b8 <MX_GPIO_Init+0xe4>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a31      	ldr	r2, [pc, #196]	; (80012b8 <MX_GPIO_Init+0xe4>)
 80011f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <MX_GPIO_Init+0xe4>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <MX_GPIO_Init+0xe4>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a2a      	ldr	r2, [pc, #168]	; (80012b8 <MX_GPIO_Init+0xe4>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <MX_GPIO_Init+0xe4>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <MX_GPIO_Init+0xe4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a23      	ldr	r2, [pc, #140]	; (80012b8 <MX_GPIO_Init+0xe4>)
 800122c:	f043 0308 	orr.w	r3, r3, #8
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <MX_GPIO_Init+0xe4>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_GPIO_Init+0xe4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <MX_GPIO_Init+0xe4>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_GPIO_Init+0xe4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001260:	4816      	ldr	r0, [pc, #88]	; (80012bc <MX_GPIO_Init+0xe8>)
 8001262:	f000 fd6b 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001266:	2301      	movs	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800126a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	4811      	ldr	r0, [pc, #68]	; (80012c0 <MX_GPIO_Init+0xec>)
 800127c:	f000 fbc2 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8001280:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4808      	ldr	r0, [pc, #32]	; (80012bc <MX_GPIO_Init+0xe8>)
 800129a:	f000 fbb3 	bl	8001a04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	2006      	movs	r0, #6
 80012a4:	f000 fb69 	bl	800197a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012a8:	2006      	movs	r0, #6
 80012aa:	f000 fb82 	bl	80019b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012ae:	bf00      	nop
 80012b0:	3728      	adds	r7, #40	; 0x28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020c00 	.word	0x40020c00
 80012c0:	40020000 	.word	0x40020000

080012c4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
	count++;
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <HAL_GPIO_EXTI_Callback+0x28>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	3301      	adds	r3, #1
 80012d4:	4a05      	ldr	r2, [pc, #20]	; (80012ec <HAL_GPIO_EXTI_Callback+0x28>)
 80012d6:	6013      	str	r3, [r2, #0]
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80012d8:	2006      	movs	r0, #6
 80012da:	f000 fb78 	bl	80019ce <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_Start_IT(&htim6);
 80012de:	4804      	ldr	r0, [pc, #16]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80012e0:	f002 fcb6 	bl	8003c50 <HAL_TIM_Base_Start_IT>

}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200002ec 	.word	0x200002ec
 80012f0:	20000334 	.word	0x20000334

080012f4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012fc:	2006      	movs	r0, #6
 80012fe:	f000 fb58 	bl	80019b2 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Stop_IT(&htim6);
 8001302:	4803      	ldr	r0, [pc, #12]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001304:	f002 fd14 	bl	8003d30 <HAL_TIM_Base_Stop_IT>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000334 	.word	0x20000334

08001314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001318:	b672      	cpsid	i
}
 800131a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800131c:	e7fe      	b.n	800131c <Error_Handler+0x8>
	...

08001320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <HAL_MspInit+0x4c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a0f      	ldr	r2, [pc, #60]	; (800136c <HAL_MspInit+0x4c>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_MspInit+0x4c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <HAL_MspInit+0x4c>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800135e:	2007      	movs	r0, #7
 8001360:	f000 fb00 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800

08001370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_TIM_Base_MspInit+0x48>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d115      	bne.n	80013ae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <HAL_TIM_Base_MspInit+0x4c>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a0c      	ldr	r2, [pc, #48]	; (80013bc <HAL_TIM_Base_MspInit+0x4c>)
 800138c:	f043 0310 	orr.w	r3, r3, #16
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_TIM_Base_MspInit+0x4c>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	2036      	movs	r0, #54	; 0x36
 80013a4:	f000 fae9 	bl	800197a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013a8:	2036      	movs	r0, #54	; 0x36
 80013aa:	f000 fb02 	bl	80019b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40001000 	.word	0x40001000
 80013bc:	40023800 	.word	0x40023800

080013c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <NMI_Handler+0x4>

080013c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <MemManage_Handler+0x4>

080013d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <UsageFault_Handler+0x4>

080013de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140c:	f000 f972 	bl	80016f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001418:	2001      	movs	r0, #1
 800141a:	f000 fcc3 	bl	8001da4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <TIM6_DAC_IRQHandler+0x10>)
 800142a:	f002 fcb0 	bl	8003d8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000334 	.word	0x20000334

08001438 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <OTG_FS_IRQHandler+0x10>)
 800143e:	f000 fe19 	bl	8002074 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20001864 	.word	0x20001864

0800144c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return 1;
 8001450:	2301      	movs	r3, #1
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <_kill>:

int _kill(int pid, int sig)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001466:	f007 f833 	bl	80084d0 <__errno>
 800146a:	4603      	mov	r3, r0
 800146c:	2216      	movs	r2, #22
 800146e:	601a      	str	r2, [r3, #0]
  return -1;
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <_exit>:

void _exit (int status)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001484:	f04f 31ff 	mov.w	r1, #4294967295
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ffe7 	bl	800145c <_kill>
  while (1) {}    /* Make sure we hang here */
 800148e:	e7fe      	b.n	800148e <_exit+0x12>

08001490 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	e00a      	b.n	80014b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014a2:	f3af 8000 	nop.w
 80014a6:	4601      	mov	r1, r0
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	60ba      	str	r2, [r7, #8]
 80014ae:	b2ca      	uxtb	r2, r1
 80014b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	429a      	cmp	r2, r3
 80014be:	dbf0      	blt.n	80014a2 <_read+0x12>
  }

  return len;
 80014c0:	687b      	ldr	r3, [r7, #4]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e009      	b.n	80014f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	60ba      	str	r2, [r7, #8]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbf1      	blt.n	80014dc <_write+0x12>
  }
  return len;
 80014f8:	687b      	ldr	r3, [r7, #4]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_close>:

int _close(int file)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800152a:	605a      	str	r2, [r3, #4]
  return 0;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <_isatty>:

int _isatty(int file)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001574:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <_sbrk+0x5c>)
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <_sbrk+0x60>)
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <_sbrk+0x64>)
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <_sbrk+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	429a      	cmp	r2, r3
 800159a:	d207      	bcs.n	80015ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800159c:	f006 ff98 	bl	80084d0 <__errno>
 80015a0:	4603      	mov	r3, r0
 80015a2:	220c      	movs	r2, #12
 80015a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	e009      	b.n	80015c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <_sbrk+0x64>)
 80015bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015be:	68fb      	ldr	r3, [r7, #12]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20020000 	.word	0x20020000
 80015cc:	00000400 	.word	0x00000400
 80015d0:	2000037c 	.word	0x2000037c
 80015d4:	20001fa0 	.word	0x20001fa0

080015d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <SystemInit+0x20>)
 80015de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <SystemInit+0x20>)
 80015e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001634 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001600:	480d      	ldr	r0, [pc, #52]	; (8001638 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001602:	490e      	ldr	r1, [pc, #56]	; (800163c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001604:	4a0e      	ldr	r2, [pc, #56]	; (8001640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001618:	4c0b      	ldr	r4, [pc, #44]	; (8001648 <LoopFillZerobss+0x26>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001626:	f7ff ffd7 	bl	80015d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800162a:	f006 ff57 	bl	80084dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162e:	f7ff fce3 	bl	8000ff8 <main>
  bx  lr    
 8001632:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001634:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800163c:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8001640:	0800d3bc 	.word	0x0800d3bc
  ldr r2, =_sbss
 8001644:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8001648:	20001fa0 	.word	0x20001fa0

0800164c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC_IRQHandler>
	...

08001650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0d      	ldr	r2, [pc, #52]	; (8001690 <HAL_Init+0x40>)
 800165a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_Init+0x40>)
 8001666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800166a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a07      	ldr	r2, [pc, #28]	; (8001690 <HAL_Init+0x40>)
 8001672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001676:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001678:	2003      	movs	r0, #3
 800167a:	f000 f973 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800167e:	2000      	movs	r0, #0
 8001680:	f000 f808 	bl	8001694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001684:	f7ff fe4c 	bl	8001320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023c00 	.word	0x40023c00

08001694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_InitTick+0x54>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_InitTick+0x58>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f999 	bl	80019ea <HAL_SYSTICK_Config>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e00e      	b.n	80016e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d80a      	bhi.n	80016de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c8:	2200      	movs	r2, #0
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	f000 f953 	bl	800197a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d4:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <HAL_InitTick+0x5c>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	e000      	b.n	80016e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000000 	.word	0x20000000
 80016ec:	20000008 	.word	0x20000008
 80016f0:	20000004 	.word	0x20000004

080016f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_IncTick+0x20>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_IncTick+0x24>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4413      	add	r3, r2
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <HAL_IncTick+0x24>)
 8001706:	6013      	str	r3, [r2, #0]
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000008 	.word	0x20000008
 8001718:	20000380 	.word	0x20000380

0800171c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return uwTick;
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <HAL_GetTick+0x14>)
 8001722:	681b      	ldr	r3, [r3, #0]
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000380 	.word	0x20000380

08001734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800173c:	f7ff ffee 	bl	800171c <HAL_GetTick>
 8001740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174c:	d005      	beq.n	800175a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_Delay+0x44>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4413      	add	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800175a:	bf00      	nop
 800175c:	f7ff ffde 	bl	800171c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	429a      	cmp	r2, r3
 800176a:	d8f7      	bhi.n	800175c <HAL_Delay+0x28>
  {
  }
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000008 	.word	0x20000008

0800177c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001798:	4013      	ands	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ae:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	60d3      	str	r3, [r2, #12]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <__NVIC_GetPriorityGrouping+0x18>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	f003 0307 	and.w	r3, r3, #7
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	db0b      	blt.n	800180a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	f003 021f 	and.w	r2, r3, #31
 80017f8:	4907      	ldr	r1, [pc, #28]	; (8001818 <__NVIC_EnableIRQ+0x38>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	2001      	movs	r0, #1
 8001802:	fa00 f202 	lsl.w	r2, r0, r2
 8001806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000e100 	.word	0xe000e100

0800181c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db12      	blt.n	8001854 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	490a      	ldr	r1, [pc, #40]	; (8001860 <__NVIC_DisableIRQ+0x44>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	3320      	adds	r3, #32
 8001844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001848:	f3bf 8f4f 	dsb	sy
}
 800184c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800184e:	f3bf 8f6f 	isb	sy
}
 8001852:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	; (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	; (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	; 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
         );
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	; 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001930:	d301      	bcc.n	8001936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001932:	2301      	movs	r3, #1
 8001934:	e00f      	b.n	8001956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <SysTick_Config+0x40>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193e:	210f      	movs	r1, #15
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f7ff ff8e 	bl	8001864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <SysTick_Config+0x40>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <SysTick_Config+0x40>)
 8001950:	2207      	movs	r2, #7
 8001952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	e000e010 	.word	0xe000e010

08001964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff05 	bl	800177c <__NVIC_SetPriorityGrouping>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800198c:	f7ff ff1a 	bl	80017c4 <__NVIC_GetPriorityGrouping>
 8001990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	6978      	ldr	r0, [r7, #20]
 8001998:	f7ff ff8e 	bl	80018b8 <NVIC_EncodePriority>
 800199c:	4602      	mov	r2, r0
 800199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff5d 	bl	8001864 <__NVIC_SetPriority>
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff0d 	bl	80017e0 <__NVIC_EnableIRQ>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff1d 	bl	800181c <__NVIC_DisableIRQ>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ff94 	bl	8001920 <SysTick_Config>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	; 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
 8001a1e:	e16b      	b.n	8001cf8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a20:	2201      	movs	r2, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	f040 815a 	bne.w	8001cf2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d005      	beq.n	8001a56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d130      	bne.n	8001ab8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	2203      	movs	r2, #3
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 0201 	and.w	r2, r3, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	d017      	beq.n	8001af4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d123      	bne.n	8001b48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	08da      	lsrs	r2, r3, #3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3208      	adds	r2, #8
 8001b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	220f      	movs	r2, #15
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	691a      	ldr	r2, [r3, #16]
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	08da      	lsrs	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3208      	adds	r2, #8
 8001b42:	69b9      	ldr	r1, [r7, #24]
 8001b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2203      	movs	r2, #3
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0203 	and.w	r2, r3, #3
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 80b4 	beq.w	8001cf2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b60      	ldr	r3, [pc, #384]	; (8001d10 <HAL_GPIO_Init+0x30c>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	4a5f      	ldr	r2, [pc, #380]	; (8001d10 <HAL_GPIO_Init+0x30c>)
 8001b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b98:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9a:	4b5d      	ldr	r3, [pc, #372]	; (8001d10 <HAL_GPIO_Init+0x30c>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba6:	4a5b      	ldr	r2, [pc, #364]	; (8001d14 <HAL_GPIO_Init+0x310>)
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	3302      	adds	r3, #2
 8001bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a52      	ldr	r2, [pc, #328]	; (8001d18 <HAL_GPIO_Init+0x314>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d02b      	beq.n	8001c2a <HAL_GPIO_Init+0x226>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a51      	ldr	r2, [pc, #324]	; (8001d1c <HAL_GPIO_Init+0x318>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d025      	beq.n	8001c26 <HAL_GPIO_Init+0x222>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a50      	ldr	r2, [pc, #320]	; (8001d20 <HAL_GPIO_Init+0x31c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d01f      	beq.n	8001c22 <HAL_GPIO_Init+0x21e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a4f      	ldr	r2, [pc, #316]	; (8001d24 <HAL_GPIO_Init+0x320>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d019      	beq.n	8001c1e <HAL_GPIO_Init+0x21a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4e      	ldr	r2, [pc, #312]	; (8001d28 <HAL_GPIO_Init+0x324>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <HAL_GPIO_Init+0x216>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4d      	ldr	r2, [pc, #308]	; (8001d2c <HAL_GPIO_Init+0x328>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00d      	beq.n	8001c16 <HAL_GPIO_Init+0x212>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4c      	ldr	r2, [pc, #304]	; (8001d30 <HAL_GPIO_Init+0x32c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d007      	beq.n	8001c12 <HAL_GPIO_Init+0x20e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4b      	ldr	r2, [pc, #300]	; (8001d34 <HAL_GPIO_Init+0x330>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_GPIO_Init+0x20a>
 8001c0a:	2307      	movs	r3, #7
 8001c0c:	e00e      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c0e:	2308      	movs	r3, #8
 8001c10:	e00c      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c12:	2306      	movs	r3, #6
 8001c14:	e00a      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c16:	2305      	movs	r3, #5
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c3c:	4935      	ldr	r1, [pc, #212]	; (8001d14 <HAL_GPIO_Init+0x310>)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c4a:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <HAL_GPIO_Init+0x334>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6e:	4a32      	ldr	r2, [pc, #200]	; (8001d38 <HAL_GPIO_Init+0x334>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c74:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <HAL_GPIO_Init+0x334>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c98:	4a27      	ldr	r2, [pc, #156]	; (8001d38 <HAL_GPIO_Init+0x334>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c9e:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <HAL_GPIO_Init+0x334>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cc2:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <HAL_GPIO_Init+0x334>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_GPIO_Init+0x334>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cec:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <HAL_GPIO_Init+0x334>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b0f      	cmp	r3, #15
 8001cfc:	f67f ae90 	bls.w	8001a20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3724      	adds	r7, #36	; 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40013800 	.word	0x40013800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40020800 	.word	0x40020800
 8001d24:	40020c00 	.word	0x40020c00
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40021400 	.word	0x40021400
 8001d30:	40021800 	.word	0x40021800
 8001d34:	40021c00 	.word	0x40021c00
 8001d38:	40013c00 	.word	0x40013c00

08001d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d4c:	787b      	ldrb	r3, [r7, #1]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d52:	887a      	ldrh	r2, [r7, #2]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d58:	e003      	b.n	8001d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d5a:	887b      	ldrh	r3, [r7, #2]
 8001d5c:	041a      	lsls	r2, r3, #16
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	619a      	str	r2, [r3, #24]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b085      	sub	sp, #20
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d80:	887a      	ldrh	r2, [r7, #2]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4013      	ands	r3, r2
 8001d86:	041a      	lsls	r2, r3, #16
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	43d9      	mvns	r1, r3
 8001d8c:	887b      	ldrh	r3, [r7, #2]
 8001d8e:	400b      	ands	r3, r1
 8001d90:	431a      	orrs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	619a      	str	r2, [r3, #24]
}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d006      	beq.n	8001dc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dba:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dbc:	88fb      	ldrh	r3, [r7, #6]
 8001dbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fa7e 	bl	80012c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40013c00 	.word	0x40013c00

08001dd4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd6:	b08f      	sub	sp, #60	; 0x3c
 8001dd8:	af0a      	add	r7, sp, #40	; 0x28
 8001dda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e10f      	b.n	8002006 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d106      	bne.n	8001e06 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f006 f851 	bl	8007ea8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2203      	movs	r2, #3
 8001e0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d102      	bne.n	8001e20 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f002 fb28 	bl	800447a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	687e      	ldr	r6, [r7, #4]
 8001e32:	466d      	mov	r5, sp
 8001e34:	f106 0410 	add.w	r4, r6, #16
 8001e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e44:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e48:	1d33      	adds	r3, r6, #4
 8001e4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e4c:	6838      	ldr	r0, [r7, #0]
 8001e4e:	f002 f9ff 	bl	8004250 <USB_CoreInit>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0d0      	b.n	8002006 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f002 fb16 	bl	800449c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e70:	2300      	movs	r3, #0
 8001e72:	73fb      	strb	r3, [r7, #15]
 8001e74:	e04a      	b.n	8001f0c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	333d      	adds	r3, #61	; 0x3d
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	333c      	adds	r3, #60	; 0x3c
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	b298      	uxth	r0, r3
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	3344      	adds	r3, #68	; 0x44
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	3340      	adds	r3, #64	; 0x40
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eca:	7bfa      	ldrb	r2, [r7, #15]
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	3348      	adds	r3, #72	; 0x48
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	334c      	adds	r3, #76	; 0x4c
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	3354      	adds	r3, #84	; 0x54
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d3af      	bcc.n	8001e76 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]
 8001f1a:	e044      	b.n	8001fa6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f44:	7bfa      	ldrb	r2, [r7, #15]
 8001f46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
 8001fa6:	7bfa      	ldrb	r2, [r7, #15]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d3b5      	bcc.n	8001f1c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	687e      	ldr	r6, [r7, #4]
 8001fb8:	466d      	mov	r5, sp
 8001fba:	f106 0410 	add.w	r4, r6, #16
 8001fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fca:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fce:	1d33      	adds	r3, r6, #4
 8001fd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd2:	6838      	ldr	r0, [r7, #0]
 8001fd4:	f002 faae 	bl	8004534 <USB_DevInit>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00d      	b.n	8002006 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 fbfd 	bl	80057fe <USB_DevDisconnect>

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800200e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_PCD_Start+0x1c>
 8002026:	2302      	movs	r3, #2
 8002028:	e020      	b.n	800206c <HAL_PCD_Start+0x5e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	2b01      	cmp	r3, #1
 8002038:	d109      	bne.n	800204e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800203e:	2b01      	cmp	r3, #1
 8002040:	d005      	beq.n	800204e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002046:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f002 fa00 	bl	8004458 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f003 fbad 	bl	80057bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b08d      	sub	sp, #52	; 0x34
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f003 fc6b 	bl	8005966 <USB_GetMode>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 848a 	bne.w	80029ac <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f003 fbcf 	bl	8005840 <USB_ReadInterrupts>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8480 	beq.w	80029aa <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	0a1b      	lsrs	r3, r3, #8
 80020b4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f003 fbbc 	bl	8005840 <USB_ReadInterrupts>
 80020c8:	4603      	mov	r3, r0
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d107      	bne.n	80020e2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f002 0202 	and.w	r2, r2, #2
 80020e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 fbaa 	bl	8005840 <USB_ReadInterrupts>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b10      	cmp	r3, #16
 80020f4:	d161      	bne.n	80021ba <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699a      	ldr	r2, [r3, #24]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0210 	bic.w	r2, r2, #16
 8002104:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	f003 020f 	and.w	r2, r3, #15
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	3304      	adds	r3, #4
 8002124:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	0c5b      	lsrs	r3, r3, #17
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	2b02      	cmp	r3, #2
 8002130:	d124      	bne.n	800217c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002138:	4013      	ands	r3, r2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d035      	beq.n	80021aa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002148:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800214c:	b29b      	uxth	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	6a38      	ldr	r0, [r7, #32]
 8002152:	f003 f9e1 	bl	8005518 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002162:	441a      	add	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	6a1a      	ldr	r2, [r3, #32]
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002174:	441a      	add	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	621a      	str	r2, [r3, #32]
 800217a:	e016      	b.n	80021aa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	0c5b      	lsrs	r3, r3, #17
 8002180:	f003 030f 	and.w	r3, r3, #15
 8002184:	2b06      	cmp	r3, #6
 8002186:	d110      	bne.n	80021aa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800218e:	2208      	movs	r2, #8
 8002190:	4619      	mov	r1, r3
 8002192:	6a38      	ldr	r0, [r7, #32]
 8002194:	f003 f9c0 	bl	8005518 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	6a1a      	ldr	r2, [r3, #32]
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021a4:	441a      	add	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699a      	ldr	r2, [r3, #24]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0210 	orr.w	r2, r2, #16
 80021b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f003 fb3e 	bl	8005840 <USB_ReadInterrupts>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021ce:	f040 80a7 	bne.w	8002320 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f003 fb43 	bl	8005866 <USB_ReadDevAllOutEpInterrupt>
 80021e0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80021e2:	e099      	b.n	8002318 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80021e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 808e 	beq.w	800230c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f003 fb67 	bl	80058ce <USB_ReadDevOutEPInterrupt>
 8002200:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00c      	beq.n	8002226 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	4413      	add	r3, r2
 8002214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002218:	461a      	mov	r2, r3
 800221a:	2301      	movs	r3, #1
 800221c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800221e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 fec3 	bl	8002fac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00c      	beq.n	800224a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	015a      	lsls	r2, r3, #5
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	4413      	add	r3, r2
 8002238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223c:	461a      	mov	r2, r3
 800223e:	2308      	movs	r3, #8
 8002240:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002242:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 ff99 	bl	800317c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b00      	cmp	r3, #0
 8002252:	d008      	beq.n	8002266 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	4413      	add	r3, r2
 800225c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002260:	461a      	mov	r2, r3
 8002262:	2310      	movs	r3, #16
 8002264:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d030      	beq.n	80022d2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002278:	2b80      	cmp	r3, #128	; 0x80
 800227a:	d109      	bne.n	8002290 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800228a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800228e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	3304      	adds	r3, #4
 80022a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	78db      	ldrb	r3, [r3, #3]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d108      	bne.n	80022c0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2200      	movs	r2, #0
 80022b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	4619      	mov	r1, r3
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f005 fefa 	bl	80080b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022cc:	461a      	mov	r2, r3
 80022ce:	2302      	movs	r3, #2
 80022d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	f003 0320 	and.w	r3, r3, #32
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e8:	461a      	mov	r2, r3
 80022ea:	2320      	movs	r3, #32
 80022ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d009      	beq.n	800230c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002304:	461a      	mov	r2, r3
 8002306:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800230a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	3301      	adds	r3, #1
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002314:	085b      	lsrs	r3, r3, #1
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231a:	2b00      	cmp	r3, #0
 800231c:	f47f af62 	bne.w	80021e4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f003 fa8b 	bl	8005840 <USB_ReadInterrupts>
 800232a:	4603      	mov	r3, r0
 800232c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002330:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002334:	f040 80db 	bne.w	80024ee <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f003 faac 	bl	800589a <USB_ReadDevAllInEpInterrupt>
 8002342:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002348:	e0cd      	b.n	80024e6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80c2 	beq.w	80024da <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f003 fad2 	bl	800590a <USB_ReadDevInEPInterrupt>
 8002366:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d057      	beq.n	8002422 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	2201      	movs	r2, #1
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	43db      	mvns	r3, r3
 800238c:	69f9      	ldr	r1, [r7, #28]
 800238e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002392:	4013      	ands	r3, r2
 8002394:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	4413      	add	r3, r2
 800239e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a2:	461a      	mov	r2, r3
 80023a4:	2301      	movs	r3, #1
 80023a6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d132      	bne.n	8002416 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	334c      	adds	r3, #76	; 0x4c
 80023c0:	6819      	ldr	r1, [r3, #0]
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4403      	add	r3, r0
 80023d0:	3348      	adds	r3, #72	; 0x48
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4419      	add	r1, r3
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023da:	4613      	mov	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4413      	add	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4403      	add	r3, r0
 80023e4:	334c      	adds	r3, #76	; 0x4c
 80023e6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d113      	bne.n	8002416 <HAL_PCD_IRQHandler+0x3a2>
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f2:	4613      	mov	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4413      	add	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	3354      	adds	r3, #84	; 0x54
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d108      	bne.n	8002416 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800240e:	461a      	mov	r2, r3
 8002410:	2101      	movs	r1, #1
 8002412:	f003 fad9 	bl	80059c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	b2db      	uxtb	r3, r3
 800241a:	4619      	mov	r1, r3
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f005 fdc4 	bl	8007faa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	4413      	add	r3, r2
 8002434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002438:	461a      	mov	r2, r3
 800243a:	2308      	movs	r3, #8
 800243c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	4413      	add	r3, r2
 8002450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002454:	461a      	mov	r2, r3
 8002456:	2310      	movs	r3, #16
 8002458:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	4413      	add	r3, r2
 800246c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002470:	461a      	mov	r2, r3
 8002472:	2340      	movs	r3, #64	; 0x40
 8002474:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d023      	beq.n	80024c8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002480:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002482:	6a38      	ldr	r0, [r7, #32]
 8002484:	f002 f9ba 	bl	80047fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248a:	4613      	mov	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4413      	add	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	3338      	adds	r3, #56	; 0x38
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	4413      	add	r3, r2
 8002498:	3304      	adds	r3, #4
 800249a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	78db      	ldrb	r3, [r3, #3]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d108      	bne.n	80024b6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2200      	movs	r2, #0
 80024a8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	4619      	mov	r1, r3
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f005 fe11 	bl	80080d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024c2:	461a      	mov	r2, r3
 80024c4:	2302      	movs	r3, #2
 80024c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80024d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fcdb 	bl	8002e90 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	3301      	adds	r3, #1
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e2:	085b      	lsrs	r3, r3, #1
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f47f af2e 	bne.w	800234a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 f9a4 	bl	8005840 <USB_ReadInterrupts>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002502:	d122      	bne.n	800254a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002512:	f023 0301 	bic.w	r3, r3, #1
 8002516:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800251e:	2b01      	cmp	r3, #1
 8002520:	d108      	bne.n	8002534 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800252a:	2100      	movs	r1, #0
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 fec3 	bl	80032b8 <HAL_PCDEx_LPM_Callback>
 8002532:	e002      	b.n	800253a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f005 fdaf 	bl	8008098 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002548:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f003 f976 	bl	8005840 <USB_ReadInterrupts>
 8002554:	4603      	mov	r3, r0
 8002556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800255a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800255e:	d112      	bne.n	8002586 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b01      	cmp	r3, #1
 800256e:	d102      	bne.n	8002576 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f005 fd6b 	bl	800804c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002584:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f003 f958 	bl	8005840 <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800259a:	f040 80b7 	bne.w	800270c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2110      	movs	r1, #16
 80025b8:	4618      	mov	r0, r3
 80025ba:	f002 f91f 	bl	80047fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025be:	2300      	movs	r3, #0
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025c2:	e046      	b.n	8002652 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80025c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025d0:	461a      	mov	r2, r3
 80025d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025e8:	0151      	lsls	r1, r2, #5
 80025ea:	69fa      	ldr	r2, [r7, #28]
 80025ec:	440a      	add	r2, r1
 80025ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80025f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002604:	461a      	mov	r2, r3
 8002606:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800260a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800260c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	4413      	add	r3, r2
 8002614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800261c:	0151      	lsls	r1, r2, #5
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	440a      	add	r2, r1
 8002622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002626:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800262a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800262c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	4413      	add	r3, r2
 8002634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800263c:	0151      	lsls	r1, r2, #5
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	440a      	add	r2, r1
 8002642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002646:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800264a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264e:	3301      	adds	r3, #1
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002658:	429a      	cmp	r2, r3
 800265a:	d3b3      	bcc.n	80025c4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800266a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800266e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	2b00      	cmp	r3, #0
 8002676:	d016      	beq.n	80026a6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002688:	f043 030b 	orr.w	r3, r3, #11
 800268c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800269e:	f043 030b 	orr.w	r3, r3, #11
 80026a2:	6453      	str	r3, [r2, #68]	; 0x44
 80026a4:	e015      	b.n	80026d2 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026b8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80026bc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026cc:	f043 030b 	orr.w	r3, r3, #11
 80026d0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80026e4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026f6:	461a      	mov	r2, r3
 80026f8:	f003 f966 	bl	80059c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800270a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f003 f895 	bl	8005840 <USB_ReadInterrupts>
 8002716:	4603      	mov	r3, r0
 8002718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800271c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002720:	d124      	bne.n	800276c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f003 f92b 	bl	8005982 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f002 f8e0 	bl	80048f6 <USB_GetDevSpeed>
 8002736:	4603      	mov	r3, r0
 8002738:	461a      	mov	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681c      	ldr	r4, [r3, #0]
 8002742:	f001 fa29 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8002746:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800274c:	b2db      	uxtb	r3, r3
 800274e:	461a      	mov	r2, r3
 8002750:	4620      	mov	r0, r4
 8002752:	f001 fddf 	bl	8004314 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f005 fc4f 	bl	8007ffa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800276a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f003 f865 	bl	8005840 <USB_ReadInterrupts>
 8002776:	4603      	mov	r3, r0
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b08      	cmp	r3, #8
 800277e:	d10a      	bne.n	8002796 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f005 fc2c 	bl	8007fde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695a      	ldr	r2, [r3, #20]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f002 0208 	and.w	r2, r2, #8
 8002794:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f003 f850 	bl	8005840 <USB_ReadInterrupts>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a6:	2b80      	cmp	r3, #128	; 0x80
 80027a8:	d122      	bne.n	80027f0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027b6:	2301      	movs	r3, #1
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ba:	e014      	b.n	80027e6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d105      	bne.n	80027e0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	4619      	mov	r1, r3
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 fb27 	bl	8002e2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	3301      	adds	r3, #1
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d3e5      	bcc.n	80027bc <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f003 f823 	bl	8005840 <USB_ReadInterrupts>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002804:	d13b      	bne.n	800287e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002806:	2301      	movs	r3, #1
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
 800280a:	e02b      	b.n	8002864 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	4413      	add	r3, r2
 8002814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002820:	4613      	mov	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4413      	add	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	3340      	adds	r3, #64	; 0x40
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d115      	bne.n	800285e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002832:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002834:	2b00      	cmp	r3, #0
 8002836:	da12      	bge.n	800285e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	333f      	adds	r3, #63	; 0x3f
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002854:	b2db      	uxtb	r3, r3
 8002856:	4619      	mov	r1, r3
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fae8 	bl	8002e2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	3301      	adds	r3, #1
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286a:	429a      	cmp	r2, r3
 800286c:	d3ce      	bcc.n	800280c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695a      	ldr	r2, [r3, #20]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800287c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f002 ffdc 	bl	8005840 <USB_ReadInterrupts>
 8002888:	4603      	mov	r3, r0
 800288a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800288e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002892:	d155      	bne.n	8002940 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002894:	2301      	movs	r3, #1
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
 8002898:	e045      	b.n	8002926 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ae:	4613      	mov	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d12e      	bne.n	8002920 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028c2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	da2b      	bge.n	8002920 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80028d4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028d8:	429a      	cmp	r2, r3
 80028da:	d121      	bne.n	8002920 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10a      	bne.n	8002920 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002918:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800291c:	6053      	str	r3, [r2, #4]
            break;
 800291e:	e007      	b.n	8002930 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	3301      	adds	r3, #1
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292c:	429a      	cmp	r2, r3
 800292e:	d3b4      	bcc.n	800289a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800293e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f002 ff7b 	bl	8005840 <USB_ReadInterrupts>
 800294a:	4603      	mov	r3, r0
 800294c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002954:	d10a      	bne.n	800296c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f005 fbd0 	bl	80080fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800296a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f002 ff65 	bl	8005840 <USB_ReadInterrupts>
 8002976:	4603      	mov	r3, r0
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b04      	cmp	r3, #4
 800297e:	d115      	bne.n	80029ac <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f005 fbc0 	bl	8008118 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6859      	ldr	r1, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	e000      	b.n	80029ac <HAL_PCD_IRQHandler+0x938>
      return;
 80029aa:	bf00      	nop
    }
  }
}
 80029ac:	3734      	adds	r7, #52	; 0x34
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd90      	pop	{r4, r7, pc}

080029b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d101      	bne.n	80029cc <HAL_PCD_SetAddress+0x1a>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e013      	b.n	80029f4 <HAL_PCD_SetAddress+0x42>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f002 fec3 	bl	8005770 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	70fb      	strb	r3, [r7, #3]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	803b      	strh	r3, [r7, #0]
 8002a12:	4613      	mov	r3, r2
 8002a14:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	da0f      	bge.n	8002a42 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a22:	78fb      	ldrb	r3, [r7, #3]
 8002a24:	f003 020f 	and.w	r2, r3, #15
 8002a28:	4613      	mov	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	3338      	adds	r3, #56	; 0x38
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	3304      	adds	r3, #4
 8002a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	705a      	strb	r2, [r3, #1]
 8002a40:	e00f      	b.n	8002a62 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a42:	78fb      	ldrb	r3, [r7, #3]
 8002a44:	f003 020f 	and.w	r2, r3, #15
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	4413      	add	r3, r2
 8002a58:	3304      	adds	r3, #4
 8002a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a6e:	883a      	ldrh	r2, [r7, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	78ba      	ldrb	r2, [r7, #2]
 8002a78:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	785b      	ldrb	r3, [r3, #1]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d004      	beq.n	8002a8c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a8c:	78bb      	ldrb	r3, [r7, #2]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d102      	bne.n	8002a98 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_PCD_EP_Open+0xaa>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e00e      	b.n	8002ac4 <HAL_PCD_EP_Open+0xc8>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68f9      	ldr	r1, [r7, #12]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f001 ff43 	bl	8004940 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002ac2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ad8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	da0f      	bge.n	8002b00 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	f003 020f 	and.w	r2, r3, #15
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	3338      	adds	r3, #56	; 0x38
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	3304      	adds	r3, #4
 8002af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	705a      	strb	r2, [r3, #1]
 8002afe:	e00f      	b.n	8002b20 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	f003 020f 	and.w	r2, r3, #15
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	4413      	add	r3, r2
 8002b16:	3304      	adds	r3, #4
 8002b18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_PCD_EP_Close+0x6e>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e00e      	b.n	8002b58 <HAL_PCD_EP_Close+0x8c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68f9      	ldr	r1, [r7, #12]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f001 ff81 	bl	8004a50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b70:	7afb      	ldrb	r3, [r7, #11]
 8002b72:	f003 020f 	and.w	r2, r3, #15
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4413      	add	r3, r2
 8002b86:	3304      	adds	r3, #4
 8002b88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ba2:	7afb      	ldrb	r3, [r7, #11]
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d102      	bne.n	8002bbc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bbc:	7afb      	ldrb	r3, [r7, #11]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	6979      	ldr	r1, [r7, #20]
 8002bd4:	f002 fa60 	bl	8005098 <USB_EP0StartXfer>
 8002bd8:	e008      	b.n	8002bec <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	6979      	ldr	r1, [r7, #20]
 8002be8:	f002 f80e 	bl	8004c08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	f003 020f 	and.w	r2, r3, #15
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002c18:	681b      	ldr	r3, [r3, #0]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b086      	sub	sp, #24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	60f8      	str	r0, [r7, #12]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
 8002c32:	460b      	mov	r3, r1
 8002c34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c36:	7afb      	ldrb	r3, [r7, #11]
 8002c38:	f003 020f 	and.w	r2, r3, #15
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	3338      	adds	r3, #56	; 0x38
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4413      	add	r3, r2
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2201      	movs	r2, #1
 8002c64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c66:	7afb      	ldrb	r3, [r7, #11]
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d102      	bne.n	8002c80 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c80:	7afb      	ldrb	r3, [r7, #11]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	461a      	mov	r2, r3
 8002c96:	6979      	ldr	r1, [r7, #20]
 8002c98:	f002 f9fe 	bl	8005098 <USB_EP0StartXfer>
 8002c9c:	e008      	b.n	8002cb0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	6979      	ldr	r1, [r7, #20]
 8002cac:	f001 ffac 	bl	8004c08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	f003 020f 	and.w	r2, r3, #15
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d901      	bls.n	8002cd8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e050      	b.n	8002d7a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	da0f      	bge.n	8002d00 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	f003 020f 	and.w	r2, r3, #15
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	3338      	adds	r3, #56	; 0x38
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	705a      	strb	r2, [r3, #1]
 8002cfe:	e00d      	b.n	8002d1c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	3304      	adds	r3, #4
 8002d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_PCD_EP_SetStall+0x82>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e01e      	b.n	8002d7a <HAL_PCD_EP_SetStall+0xc0>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68f9      	ldr	r1, [r7, #12]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f002 fc3c 	bl	80055c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10a      	bne.n	8002d70 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	b2d9      	uxtb	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f002 fe2c 	bl	80059c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	f003 020f 	and.w	r2, r3, #15
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d901      	bls.n	8002da0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e042      	b.n	8002e26 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	da0f      	bge.n	8002dc8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	f003 020f 	and.w	r2, r3, #15
 8002dae:	4613      	mov	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	3338      	adds	r3, #56	; 0x38
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	4413      	add	r3, r2
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	705a      	strb	r2, [r3, #1]
 8002dc6:	e00f      	b.n	8002de8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	f003 020f 	and.w	r2, r3, #15
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	3304      	adds	r3, #4
 8002de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_PCD_EP_ClrStall+0x86>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e00e      	b.n	8002e26 <HAL_PCD_EP_ClrStall+0xa4>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68f9      	ldr	r1, [r7, #12]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f002 fc44 	bl	80056a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	460b      	mov	r3, r1
 8002e38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	da0c      	bge.n	8002e5c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	f003 020f 	and.w	r2, r3, #15
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	3338      	adds	r3, #56	; 0x38
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	3304      	adds	r3, #4
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	e00c      	b.n	8002e76 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	f003 020f 	and.w	r2, r3, #15
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	3304      	adds	r3, #4
 8002e74:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68f9      	ldr	r1, [r7, #12]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f002 fa63 	bl	8005348 <USB_EPStopXfer>
 8002e82:	4603      	mov	r3, r0
 8002e84:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e86:	7afb      	ldrb	r3, [r7, #11]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08a      	sub	sp, #40	; 0x28
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	3338      	adds	r3, #56	; 0x38
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a1a      	ldr	r2, [r3, #32]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d901      	bls.n	8002ec8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e06c      	b.n	8002fa2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	699a      	ldr	r2, [r3, #24]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d902      	bls.n	8002ee4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	3303      	adds	r3, #3
 8002ee8:	089b      	lsrs	r3, r3, #2
 8002eea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002eec:	e02b      	b.n	8002f46 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d902      	bls.n	8002f0a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3303      	adds	r3, #3
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6919      	ldr	r1, [r3, #16]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	4603      	mov	r3, r0
 8002f28:	6978      	ldr	r0, [r7, #20]
 8002f2a:	f002 fab7 	bl	800549c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	691a      	ldr	r2, [r3, #16]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	441a      	add	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a1a      	ldr	r2, [r3, #32]
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	441a      	add	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d809      	bhi.n	8002f70 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a1a      	ldr	r2, [r3, #32]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d203      	bcs.n	8002f70 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1be      	bne.n	8002eee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	699a      	ldr	r2, [r3, #24]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d811      	bhi.n	8002fa0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	2201      	movs	r2, #1
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	6939      	ldr	r1, [r7, #16]
 8002f98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	333c      	adds	r3, #60	; 0x3c
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d17b      	bne.n	80030da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d015      	beq.n	8003018 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	4a61      	ldr	r2, [pc, #388]	; (8003174 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	f240 80b9 	bls.w	8003168 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80b3 	beq.w	8003168 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	4413      	add	r3, r2
 800300a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300e:	461a      	mov	r2, r3
 8003010:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003014:	6093      	str	r3, [r2, #8]
 8003016:	e0a7      	b.n	8003168 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	4413      	add	r3, r2
 800302a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800302e:	461a      	mov	r2, r3
 8003030:	2320      	movs	r3, #32
 8003032:	6093      	str	r3, [r2, #8]
 8003034:	e098      	b.n	8003168 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800303c:	2b00      	cmp	r3, #0
 800303e:	f040 8093 	bne.w	8003168 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	4a4b      	ldr	r2, [pc, #300]	; (8003174 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d90f      	bls.n	800306a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	4413      	add	r3, r2
 800305c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003060:	461a      	mov	r2, r3
 8003062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003066:	6093      	str	r3, [r2, #8]
 8003068:	e07e      	b.n	8003168 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4413      	add	r3, r2
 800307c:	3304      	adds	r3, #4
 800307e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	69da      	ldr	r2, [r3, #28]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	0159      	lsls	r1, r3, #5
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	440b      	add	r3, r1
 800308c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003096:	1ad2      	subs	r2, r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d114      	bne.n	80030cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d109      	bne.n	80030be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030b4:	461a      	mov	r2, r3
 80030b6:	2101      	movs	r1, #1
 80030b8:	f002 fc86 	bl	80059c8 <USB_EP0_OutStart>
 80030bc:	e006      	b.n	80030cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	441a      	add	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	4619      	mov	r1, r3
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f004 ff4e 	bl	8007f74 <HAL_PCD_DataOutStageCallback>
 80030d8:	e046      	b.n	8003168 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	4a26      	ldr	r2, [pc, #152]	; (8003178 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d124      	bne.n	800312c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f8:	461a      	mov	r2, r3
 80030fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030fe:	6093      	str	r3, [r2, #8]
 8003100:	e032      	b.n	8003168 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003118:	461a      	mov	r2, r3
 800311a:	2320      	movs	r3, #32
 800311c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	4619      	mov	r1, r3
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f004 ff25 	bl	8007f74 <HAL_PCD_DataOutStageCallback>
 800312a:	e01d      	b.n	8003168 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d114      	bne.n	800315c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	4613      	mov	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d108      	bne.n	800315c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003154:	461a      	mov	r2, r3
 8003156:	2100      	movs	r1, #0
 8003158:	f002 fc36 	bl	80059c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	4619      	mov	r1, r3
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f004 ff06 	bl	8007f74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3720      	adds	r7, #32
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	4f54300a 	.word	0x4f54300a
 8003178:	4f54310a 	.word	0x4f54310a

0800317c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	333c      	adds	r3, #60	; 0x3c
 8003194:	3304      	adds	r3, #4
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4a15      	ldr	r2, [pc, #84]	; (8003204 <PCD_EP_OutSetupPacket_int+0x88>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d90e      	bls.n	80031d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d009      	beq.n	80031d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c8:	461a      	mov	r2, r3
 80031ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f004 febd 	bl	8007f50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <PCD_EP_OutSetupPacket_int+0x88>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d90c      	bls.n	80031f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d108      	bne.n	80031f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031f0:	461a      	mov	r2, r3
 80031f2:	2101      	movs	r1, #1
 80031f4:	f002 fbe8 	bl	80059c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	4f54300a 	.word	0x4f54300a

08003208 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	70fb      	strb	r3, [r7, #3]
 8003214:	4613      	mov	r3, r2
 8003216:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d107      	bne.n	8003236 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003226:	883b      	ldrh	r3, [r7, #0]
 8003228:	0419      	lsls	r1, r3, #16
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	430a      	orrs	r2, r1
 8003232:	629a      	str	r2, [r3, #40]	; 0x28
 8003234:	e028      	b.n	8003288 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	0c1b      	lsrs	r3, r3, #16
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	4413      	add	r3, r2
 8003242:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]
 8003248:	e00d      	b.n	8003266 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	3340      	adds	r3, #64	; 0x40
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	0c1b      	lsrs	r3, r3, #16
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	4413      	add	r3, r2
 800325e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	3301      	adds	r3, #1
 8003264:	73fb      	strb	r3, [r7, #15]
 8003266:	7bfa      	ldrb	r2, [r7, #15]
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	3b01      	subs	r3, #1
 800326c:	429a      	cmp	r2, r3
 800326e:	d3ec      	bcc.n	800324a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003270:	883b      	ldrh	r3, [r7, #0]
 8003272:	0418      	lsls	r0, r3, #16
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6819      	ldr	r1, [r3, #0]
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	3b01      	subs	r3, #1
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	4302      	orrs	r2, r0
 8003280:	3340      	adds	r3, #64	; 0x40
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e267      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d075      	beq.n	80033da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ee:	4b88      	ldr	r3, [pc, #544]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d00c      	beq.n	8003314 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032fa:	4b85      	ldr	r3, [pc, #532]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003302:	2b08      	cmp	r3, #8
 8003304:	d112      	bne.n	800332c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003306:	4b82      	ldr	r3, [pc, #520]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003312:	d10b      	bne.n	800332c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	4b7e      	ldr	r3, [pc, #504]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d05b      	beq.n	80033d8 <HAL_RCC_OscConfig+0x108>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d157      	bne.n	80033d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e242      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003334:	d106      	bne.n	8003344 <HAL_RCC_OscConfig+0x74>
 8003336:	4b76      	ldr	r3, [pc, #472]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a75      	ldr	r2, [pc, #468]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e01d      	b.n	8003380 <HAL_RCC_OscConfig+0xb0>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x98>
 800334e:	4b70      	ldr	r3, [pc, #448]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a6f      	ldr	r2, [pc, #444]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 8003354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	4b6d      	ldr	r3, [pc, #436]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a6c      	ldr	r2, [pc, #432]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e00b      	b.n	8003380 <HAL_RCC_OscConfig+0xb0>
 8003368:	4b69      	ldr	r3, [pc, #420]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a68      	ldr	r2, [pc, #416]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 800336e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	4b66      	ldr	r3, [pc, #408]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a65      	ldr	r2, [pc, #404]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 800337a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800337e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d013      	beq.n	80033b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7fe f9c8 	bl	800171c <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003390:	f7fe f9c4 	bl	800171c <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	; 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e207      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	4b5b      	ldr	r3, [pc, #364]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0xc0>
 80033ae:	e014      	b.n	80033da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fe f9b4 	bl	800171c <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b8:	f7fe f9b0 	bl	800171c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	; 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e1f3      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ca:	4b51      	ldr	r3, [pc, #324]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0xe8>
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d063      	beq.n	80034ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033e6:	4b4a      	ldr	r3, [pc, #296]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00b      	beq.n	800340a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f2:	4b47      	ldr	r3, [pc, #284]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d11c      	bne.n	8003438 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033fe:	4b44      	ldr	r3, [pc, #272]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d116      	bne.n	8003438 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340a:	4b41      	ldr	r3, [pc, #260]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <HAL_RCC_OscConfig+0x152>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d001      	beq.n	8003422 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e1c7      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003422:	4b3b      	ldr	r3, [pc, #236]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4937      	ldr	r1, [pc, #220]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003436:	e03a      	b.n	80034ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d020      	beq.n	8003482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003440:	4b34      	ldr	r3, [pc, #208]	; (8003514 <HAL_RCC_OscConfig+0x244>)
 8003442:	2201      	movs	r2, #1
 8003444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003446:	f7fe f969 	bl	800171c <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800344e:	f7fe f965 	bl	800171c <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e1a8      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003460:	4b2b      	ldr	r3, [pc, #172]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0f0      	beq.n	800344e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346c:	4b28      	ldr	r3, [pc, #160]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4925      	ldr	r1, [pc, #148]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]
 8003480:	e015      	b.n	80034ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003482:	4b24      	ldr	r3, [pc, #144]	; (8003514 <HAL_RCC_OscConfig+0x244>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe f948 	bl	800171c <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003490:	f7fe f944 	bl	800171c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e187      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a2:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d036      	beq.n	8003528 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d016      	beq.n	80034f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c2:	4b15      	ldr	r3, [pc, #84]	; (8003518 <HAL_RCC_OscConfig+0x248>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c8:	f7fe f928 	bl	800171c <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034d0:	f7fe f924 	bl	800171c <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e167      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e2:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <HAL_RCC_OscConfig+0x240>)
 80034e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0x200>
 80034ee:	e01b      	b.n	8003528 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f0:	4b09      	ldr	r3, [pc, #36]	; (8003518 <HAL_RCC_OscConfig+0x248>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f6:	f7fe f911 	bl	800171c <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034fc:	e00e      	b.n	800351c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034fe:	f7fe f90d 	bl	800171c <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d907      	bls.n	800351c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e150      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
 8003510:	40023800 	.word	0x40023800
 8003514:	42470000 	.word	0x42470000
 8003518:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800351c:	4b88      	ldr	r3, [pc, #544]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 800351e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1ea      	bne.n	80034fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 8097 	beq.w	8003664 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003536:	2300      	movs	r3, #0
 8003538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800353a:	4b81      	ldr	r3, [pc, #516]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10f      	bne.n	8003566 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	4b7d      	ldr	r3, [pc, #500]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	4a7c      	ldr	r2, [pc, #496]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 8003550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003554:	6413      	str	r3, [r2, #64]	; 0x40
 8003556:	4b7a      	ldr	r3, [pc, #488]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355e:	60bb      	str	r3, [r7, #8]
 8003560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003562:	2301      	movs	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003566:	4b77      	ldr	r3, [pc, #476]	; (8003744 <HAL_RCC_OscConfig+0x474>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d118      	bne.n	80035a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003572:	4b74      	ldr	r3, [pc, #464]	; (8003744 <HAL_RCC_OscConfig+0x474>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a73      	ldr	r2, [pc, #460]	; (8003744 <HAL_RCC_OscConfig+0x474>)
 8003578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800357e:	f7fe f8cd 	bl	800171c <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003586:	f7fe f8c9 	bl	800171c <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e10c      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003598:	4b6a      	ldr	r3, [pc, #424]	; (8003744 <HAL_RCC_OscConfig+0x474>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d106      	bne.n	80035ba <HAL_RCC_OscConfig+0x2ea>
 80035ac:	4b64      	ldr	r3, [pc, #400]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	4a63      	ldr	r2, [pc, #396]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6713      	str	r3, [r2, #112]	; 0x70
 80035b8:	e01c      	b.n	80035f4 <HAL_RCC_OscConfig+0x324>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b05      	cmp	r3, #5
 80035c0:	d10c      	bne.n	80035dc <HAL_RCC_OscConfig+0x30c>
 80035c2:	4b5f      	ldr	r3, [pc, #380]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	4a5e      	ldr	r2, [pc, #376]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 80035c8:	f043 0304 	orr.w	r3, r3, #4
 80035cc:	6713      	str	r3, [r2, #112]	; 0x70
 80035ce:	4b5c      	ldr	r3, [pc, #368]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	4a5b      	ldr	r2, [pc, #364]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6713      	str	r3, [r2, #112]	; 0x70
 80035da:	e00b      	b.n	80035f4 <HAL_RCC_OscConfig+0x324>
 80035dc:	4b58      	ldr	r3, [pc, #352]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	4a57      	ldr	r2, [pc, #348]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 80035e2:	f023 0301 	bic.w	r3, r3, #1
 80035e6:	6713      	str	r3, [r2, #112]	; 0x70
 80035e8:	4b55      	ldr	r3, [pc, #340]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	4a54      	ldr	r2, [pc, #336]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 80035ee:	f023 0304 	bic.w	r3, r3, #4
 80035f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d015      	beq.n	8003628 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fc:	f7fe f88e 	bl	800171c <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003602:	e00a      	b.n	800361a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003604:	f7fe f88a 	bl	800171c <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e0cb      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361a:	4b49      	ldr	r3, [pc, #292]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0ee      	beq.n	8003604 <HAL_RCC_OscConfig+0x334>
 8003626:	e014      	b.n	8003652 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003628:	f7fe f878 	bl	800171c <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362e:	e00a      	b.n	8003646 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003630:	f7fe f874 	bl	800171c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	; 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e0b5      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003646:	4b3e      	ldr	r3, [pc, #248]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1ee      	bne.n	8003630 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003652:	7dfb      	ldrb	r3, [r7, #23]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d105      	bne.n	8003664 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003658:	4b39      	ldr	r3, [pc, #228]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	4a38      	ldr	r2, [pc, #224]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 800365e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003662:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80a1 	beq.w	80037b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800366e:	4b34      	ldr	r3, [pc, #208]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b08      	cmp	r3, #8
 8003678:	d05c      	beq.n	8003734 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d141      	bne.n	8003706 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003682:	4b31      	ldr	r3, [pc, #196]	; (8003748 <HAL_RCC_OscConfig+0x478>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fe f848 	bl	800171c <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003690:	f7fe f844 	bl	800171c <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e087      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a2:	4b27      	ldr	r3, [pc, #156]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69da      	ldr	r2, [r3, #28]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	019b      	lsls	r3, r3, #6
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c4:	085b      	lsrs	r3, r3, #1
 80036c6:	3b01      	subs	r3, #1
 80036c8:	041b      	lsls	r3, r3, #16
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	061b      	lsls	r3, r3, #24
 80036d2:	491b      	ldr	r1, [pc, #108]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_RCC_OscConfig+0x478>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036de:	f7fe f81d 	bl	800171c <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e6:	f7fe f819 	bl	800171c <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e05c      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f8:	4b11      	ldr	r3, [pc, #68]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x416>
 8003704:	e054      	b.n	80037b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003706:	4b10      	ldr	r3, [pc, #64]	; (8003748 <HAL_RCC_OscConfig+0x478>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fe f806 	bl	800171c <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe f802 	bl	800171c <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e045      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003726:	4b06      	ldr	r3, [pc, #24]	; (8003740 <HAL_RCC_OscConfig+0x470>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x444>
 8003732:	e03d      	b.n	80037b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d107      	bne.n	800374c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e038      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
 8003740:	40023800 	.word	0x40023800
 8003744:	40007000 	.word	0x40007000
 8003748:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800374c:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <HAL_RCC_OscConfig+0x4ec>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d028      	beq.n	80037ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d121      	bne.n	80037ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003772:	429a      	cmp	r2, r3
 8003774:	d11a      	bne.n	80037ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800377c:	4013      	ands	r3, r2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003782:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003784:	4293      	cmp	r3, r2
 8003786:	d111      	bne.n	80037ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	085b      	lsrs	r3, r3, #1
 8003794:	3b01      	subs	r3, #1
 8003796:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003798:	429a      	cmp	r2, r3
 800379a:	d107      	bne.n	80037ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800

080037c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0cc      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037d4:	4b68      	ldr	r3, [pc, #416]	; (8003978 <HAL_RCC_ClockConfig+0x1b8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d90c      	bls.n	80037fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e2:	4b65      	ldr	r3, [pc, #404]	; (8003978 <HAL_RCC_ClockConfig+0x1b8>)
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ea:	4b63      	ldr	r3, [pc, #396]	; (8003978 <HAL_RCC_ClockConfig+0x1b8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d001      	beq.n	80037fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0b8      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d020      	beq.n	800384a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003814:	4b59      	ldr	r3, [pc, #356]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4a58      	ldr	r2, [pc, #352]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800381e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800382c:	4b53      	ldr	r3, [pc, #332]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4a52      	ldr	r2, [pc, #328]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003838:	4b50      	ldr	r3, [pc, #320]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	494d      	ldr	r1, [pc, #308]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	4313      	orrs	r3, r2
 8003848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d044      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d107      	bne.n	800386e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385e:	4b47      	ldr	r3, [pc, #284]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d119      	bne.n	800389e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e07f      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d003      	beq.n	800387e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800387a:	2b03      	cmp	r3, #3
 800387c:	d107      	bne.n	800388e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387e:	4b3f      	ldr	r3, [pc, #252]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e06f      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388e:	4b3b      	ldr	r3, [pc, #236]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e067      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800389e:	4b37      	ldr	r3, [pc, #220]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f023 0203 	bic.w	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	4934      	ldr	r1, [pc, #208]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038b0:	f7fd ff34 	bl	800171c <HAL_GetTick>
 80038b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b8:	f7fd ff30 	bl	800171c <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e04f      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ce:	4b2b      	ldr	r3, [pc, #172]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 020c 	and.w	r2, r3, #12
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	429a      	cmp	r2, r3
 80038de:	d1eb      	bne.n	80038b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038e0:	4b25      	ldr	r3, [pc, #148]	; (8003978 <HAL_RCC_ClockConfig+0x1b8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d20c      	bcs.n	8003908 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4b22      	ldr	r3, [pc, #136]	; (8003978 <HAL_RCC_ClockConfig+0x1b8>)
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f6:	4b20      	ldr	r3, [pc, #128]	; (8003978 <HAL_RCC_ClockConfig+0x1b8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d001      	beq.n	8003908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e032      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003914:	4b19      	ldr	r3, [pc, #100]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4916      	ldr	r1, [pc, #88]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	4313      	orrs	r3, r2
 8003924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d009      	beq.n	8003946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003932:	4b12      	ldr	r3, [pc, #72]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	490e      	ldr	r1, [pc, #56]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	4313      	orrs	r3, r2
 8003944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003946:	f000 f821 	bl	800398c <HAL_RCC_GetSysClockFreq>
 800394a:	4602      	mov	r2, r0
 800394c:	4b0b      	ldr	r3, [pc, #44]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	490a      	ldr	r1, [pc, #40]	; (8003980 <HAL_RCC_ClockConfig+0x1c0>)
 8003958:	5ccb      	ldrb	r3, [r1, r3]
 800395a:	fa22 f303 	lsr.w	r3, r2, r3
 800395e:	4a09      	ldr	r2, [pc, #36]	; (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003962:	4b09      	ldr	r3, [pc, #36]	; (8003988 <HAL_RCC_ClockConfig+0x1c8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fd fe94 	bl	8001694 <HAL_InitTick>

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40023c00 	.word	0x40023c00
 800397c:	40023800 	.word	0x40023800
 8003980:	0800cef8 	.word	0x0800cef8
 8003984:	20000000 	.word	0x20000000
 8003988:	20000004 	.word	0x20000004

0800398c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800398c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003990:	b094      	sub	sp, #80	; 0x50
 8003992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	647b      	str	r3, [r7, #68]	; 0x44
 8003998:	2300      	movs	r3, #0
 800399a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800399c:	2300      	movs	r3, #0
 800399e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039a4:	4b79      	ldr	r3, [pc, #484]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 030c 	and.w	r3, r3, #12
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d00d      	beq.n	80039cc <HAL_RCC_GetSysClockFreq+0x40>
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	f200 80e1 	bhi.w	8003b78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0x34>
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d003      	beq.n	80039c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80039be:	e0db      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039c0:	4b73      	ldr	r3, [pc, #460]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x204>)
 80039c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039c4:	e0db      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039c6:	4b73      	ldr	r3, [pc, #460]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x208>)
 80039c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039ca:	e0d8      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039cc:	4b6f      	ldr	r3, [pc, #444]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039d6:	4b6d      	ldr	r3, [pc, #436]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d063      	beq.n	8003aaa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e2:	4b6a      	ldr	r3, [pc, #424]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	099b      	lsrs	r3, r3, #6
 80039e8:	2200      	movs	r2, #0
 80039ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80039ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f4:	633b      	str	r3, [r7, #48]	; 0x30
 80039f6:	2300      	movs	r3, #0
 80039f8:	637b      	str	r3, [r7, #52]	; 0x34
 80039fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039fe:	4622      	mov	r2, r4
 8003a00:	462b      	mov	r3, r5
 8003a02:	f04f 0000 	mov.w	r0, #0
 8003a06:	f04f 0100 	mov.w	r1, #0
 8003a0a:	0159      	lsls	r1, r3, #5
 8003a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a10:	0150      	lsls	r0, r2, #5
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4621      	mov	r1, r4
 8003a18:	1a51      	subs	r1, r2, r1
 8003a1a:	6139      	str	r1, [r7, #16]
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a30:	4659      	mov	r1, fp
 8003a32:	018b      	lsls	r3, r1, #6
 8003a34:	4651      	mov	r1, sl
 8003a36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a3a:	4651      	mov	r1, sl
 8003a3c:	018a      	lsls	r2, r1, #6
 8003a3e:	4651      	mov	r1, sl
 8003a40:	ebb2 0801 	subs.w	r8, r2, r1
 8003a44:	4659      	mov	r1, fp
 8003a46:	eb63 0901 	sbc.w	r9, r3, r1
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a5e:	4690      	mov	r8, r2
 8003a60:	4699      	mov	r9, r3
 8003a62:	4623      	mov	r3, r4
 8003a64:	eb18 0303 	adds.w	r3, r8, r3
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	462b      	mov	r3, r5
 8003a6c:	eb49 0303 	adc.w	r3, r9, r3
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a7e:	4629      	mov	r1, r5
 8003a80:	024b      	lsls	r3, r1, #9
 8003a82:	4621      	mov	r1, r4
 8003a84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a88:	4621      	mov	r1, r4
 8003a8a:	024a      	lsls	r2, r1, #9
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a92:	2200      	movs	r2, #0
 8003a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a9c:	f7fd f8f4 	bl	8000c88 <__aeabi_uldivmod>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa8:	e058      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aaa:	4b38      	ldr	r3, [pc, #224]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	099b      	lsrs	r3, r3, #6
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003aba:	623b      	str	r3, [r7, #32]
 8003abc:	2300      	movs	r3, #0
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	464b      	mov	r3, r9
 8003ac8:	f04f 0000 	mov.w	r0, #0
 8003acc:	f04f 0100 	mov.w	r1, #0
 8003ad0:	0159      	lsls	r1, r3, #5
 8003ad2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ad6:	0150      	lsls	r0, r2, #5
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4641      	mov	r1, r8
 8003ade:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ae2:	4649      	mov	r1, r9
 8003ae4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003af4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003af8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003afc:	ebb2 040a 	subs.w	r4, r2, sl
 8003b00:	eb63 050b 	sbc.w	r5, r3, fp
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	00eb      	lsls	r3, r5, #3
 8003b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b12:	00e2      	lsls	r2, r4, #3
 8003b14:	4614      	mov	r4, r2
 8003b16:	461d      	mov	r5, r3
 8003b18:	4643      	mov	r3, r8
 8003b1a:	18e3      	adds	r3, r4, r3
 8003b1c:	603b      	str	r3, [r7, #0]
 8003b1e:	464b      	mov	r3, r9
 8003b20:	eb45 0303 	adc.w	r3, r5, r3
 8003b24:	607b      	str	r3, [r7, #4]
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b32:	4629      	mov	r1, r5
 8003b34:	028b      	lsls	r3, r1, #10
 8003b36:	4621      	mov	r1, r4
 8003b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	028a      	lsls	r2, r1, #10
 8003b40:	4610      	mov	r0, r2
 8003b42:	4619      	mov	r1, r3
 8003b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b46:	2200      	movs	r2, #0
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	61fa      	str	r2, [r7, #28]
 8003b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b50:	f7fd f89a 	bl	8000c88 <__aeabi_uldivmod>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4613      	mov	r3, r2
 8003b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	0c1b      	lsrs	r3, r3, #16
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	3301      	adds	r3, #1
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b76:	e002      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3750      	adds	r7, #80	; 0x50
 8003b84:	46bd      	mov	sp, r7
 8003b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	00f42400 	.word	0x00f42400
 8003b94:	007a1200 	.word	0x007a1200

08003b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <HAL_RCC_GetHCLKFreq+0x14>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000000 	.word	0x20000000

08003bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e041      	b.n	8003c46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fd fbca 	bl	8001370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	4619      	mov	r1, r3
 8003bee:	4610      	mov	r0, r2
 8003bf0:	f000 f9fe 	bl	8003ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d001      	beq.n	8003c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e04e      	b.n	8003d06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a23      	ldr	r2, [pc, #140]	; (8003d14 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d022      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c92:	d01d      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1f      	ldr	r2, [pc, #124]	; (8003d18 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d018      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1e      	ldr	r2, [pc, #120]	; (8003d1c <HAL_TIM_Base_Start_IT+0xcc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d013      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1c      	ldr	r2, [pc, #112]	; (8003d20 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00e      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1b      	ldr	r2, [pc, #108]	; (8003d24 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d009      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a19      	ldr	r2, [pc, #100]	; (8003d28 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d004      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x80>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a18      	ldr	r2, [pc, #96]	; (8003d2c <HAL_TIM_Base_Start_IT+0xdc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d111      	bne.n	8003cf4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b06      	cmp	r3, #6
 8003ce0:	d010      	beq.n	8003d04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f042 0201 	orr.w	r2, r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf2:	e007      	b.n	8003d04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0201 	orr.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40010000 	.word	0x40010000
 8003d18:	40000400 	.word	0x40000400
 8003d1c:	40000800 	.word	0x40000800
 8003d20:	40000c00 	.word	0x40000c00
 8003d24:	40010400 	.word	0x40010400
 8003d28:	40014000 	.word	0x40014000
 8003d2c:	40001800 	.word	0x40001800

08003d30 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0201 	bic.w	r2, r2, #1
 8003d46:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6a1a      	ldr	r2, [r3, #32]
 8003d4e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10f      	bne.n	8003d78 <HAL_TIM_Base_Stop_IT+0x48>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6a1a      	ldr	r2, [r3, #32]
 8003d5e:	f240 4344 	movw	r3, #1092	; 0x444
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d107      	bne.n	8003d78 <HAL_TIM_Base_Stop_IT+0x48>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0201 	bic.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d122      	bne.n	8003dea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d11b      	bne.n	8003dea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f06f 0202 	mvn.w	r2, #2
 8003dba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f8ee 	bl	8003fb2 <HAL_TIM_IC_CaptureCallback>
 8003dd6:	e005      	b.n	8003de4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f8e0 	bl	8003f9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f8f1 	bl	8003fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d122      	bne.n	8003e3e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d11b      	bne.n	8003e3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f06f 0204 	mvn.w	r2, #4
 8003e0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f8c4 	bl	8003fb2 <HAL_TIM_IC_CaptureCallback>
 8003e2a:	e005      	b.n	8003e38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f8b6 	bl	8003f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f8c7 	bl	8003fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d122      	bne.n	8003e92 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d11b      	bne.n	8003e92 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f06f 0208 	mvn.w	r2, #8
 8003e62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2204      	movs	r2, #4
 8003e68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f89a 	bl	8003fb2 <HAL_TIM_IC_CaptureCallback>
 8003e7e:	e005      	b.n	8003e8c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f88c 	bl	8003f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f89d 	bl	8003fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b10      	cmp	r3, #16
 8003e9e:	d122      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 0310 	and.w	r3, r3, #16
 8003eaa:	2b10      	cmp	r3, #16
 8003eac:	d11b      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f06f 0210 	mvn.w	r2, #16
 8003eb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2208      	movs	r2, #8
 8003ebc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f870 	bl	8003fb2 <HAL_TIM_IC_CaptureCallback>
 8003ed2:	e005      	b.n	8003ee0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f862 	bl	8003f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f873 	bl	8003fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d10e      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d107      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f06f 0201 	mvn.w	r2, #1
 8003f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7fd f9f1 	bl	80012f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1c:	2b80      	cmp	r3, #128	; 0x80
 8003f1e:	d10e      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2a:	2b80      	cmp	r3, #128	; 0x80
 8003f2c:	d107      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f97f 	bl	800423c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d10e      	bne.n	8003f6a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f56:	2b40      	cmp	r3, #64	; 0x40
 8003f58:	d107      	bne.n	8003f6a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f838 	bl	8003fda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d10e      	bne.n	8003f96 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d107      	bne.n	8003f96 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f06f 0220 	mvn.w	r2, #32
 8003f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f949 	bl	8004228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f96:	bf00      	nop
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
	...

08003ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a40      	ldr	r2, [pc, #256]	; (8004104 <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d013      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400e:	d00f      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a3d      	ldr	r2, [pc, #244]	; (8004108 <TIM_Base_SetConfig+0x118>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00b      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a3c      	ldr	r2, [pc, #240]	; (800410c <TIM_Base_SetConfig+0x11c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d007      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a3b      	ldr	r2, [pc, #236]	; (8004110 <TIM_Base_SetConfig+0x120>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a3a      	ldr	r2, [pc, #232]	; (8004114 <TIM_Base_SetConfig+0x124>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d108      	bne.n	8004042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a2f      	ldr	r2, [pc, #188]	; (8004104 <TIM_Base_SetConfig+0x114>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d02b      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004050:	d027      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a2c      	ldr	r2, [pc, #176]	; (8004108 <TIM_Base_SetConfig+0x118>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d023      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a2b      	ldr	r2, [pc, #172]	; (800410c <TIM_Base_SetConfig+0x11c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01f      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <TIM_Base_SetConfig+0x120>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d01b      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a29      	ldr	r2, [pc, #164]	; (8004114 <TIM_Base_SetConfig+0x124>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d017      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a28      	ldr	r2, [pc, #160]	; (8004118 <TIM_Base_SetConfig+0x128>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d013      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a27      	ldr	r2, [pc, #156]	; (800411c <TIM_Base_SetConfig+0x12c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00f      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a26      	ldr	r2, [pc, #152]	; (8004120 <TIM_Base_SetConfig+0x130>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00b      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a25      	ldr	r2, [pc, #148]	; (8004124 <TIM_Base_SetConfig+0x134>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d007      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a24      	ldr	r2, [pc, #144]	; (8004128 <TIM_Base_SetConfig+0x138>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d003      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a23      	ldr	r2, [pc, #140]	; (800412c <TIM_Base_SetConfig+0x13c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d108      	bne.n	80040b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <TIM_Base_SetConfig+0x114>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_Base_SetConfig+0xf8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a0c      	ldr	r2, [pc, #48]	; (8004114 <TIM_Base_SetConfig+0x124>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d103      	bne.n	80040f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	615a      	str	r2, [r3, #20]
}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40010000 	.word	0x40010000
 8004108:	40000400 	.word	0x40000400
 800410c:	40000800 	.word	0x40000800
 8004110:	40000c00 	.word	0x40000c00
 8004114:	40010400 	.word	0x40010400
 8004118:	40014000 	.word	0x40014000
 800411c:	40014400 	.word	0x40014400
 8004120:	40014800 	.word	0x40014800
 8004124:	40001800 	.word	0x40001800
 8004128:	40001c00 	.word	0x40001c00
 800412c:	40002000 	.word	0x40002000

08004130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004144:	2302      	movs	r3, #2
 8004146:	e05a      	b.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a21      	ldr	r2, [pc, #132]	; (800420c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d022      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004194:	d01d      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1d      	ldr	r2, [pc, #116]	; (8004210 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d018      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1b      	ldr	r2, [pc, #108]	; (8004214 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d013      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a1a      	ldr	r2, [pc, #104]	; (8004218 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00e      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a18      	ldr	r2, [pc, #96]	; (800421c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d009      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a17      	ldr	r2, [pc, #92]	; (8004220 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d004      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a15      	ldr	r2, [pc, #84]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10c      	bne.n	80041ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40010000 	.word	0x40010000
 8004210:	40000400 	.word	0x40000400
 8004214:	40000800 	.word	0x40000800
 8004218:	40000c00 	.word	0x40000c00
 800421c:	40010400 	.word	0x40010400
 8004220:	40014000 	.word	0x40014000
 8004224:	40001800 	.word	0x40001800

08004228 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004250:	b084      	sub	sp, #16
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	f107 001c 	add.w	r0, r7, #28
 800425e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	2b01      	cmp	r3, #1
 8004266:	d122      	bne.n	80042ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800427c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004292:	2b01      	cmp	r3, #1
 8004294:	d105      	bne.n	80042a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f001 fbee 	bl	8005a84 <USB_CoreReset>
 80042a8:	4603      	mov	r3, r0
 80042aa:	73fb      	strb	r3, [r7, #15]
 80042ac:	e01a      	b.n	80042e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f001 fbe2 	bl	8005a84 <USB_CoreReset>
 80042c0:	4603      	mov	r3, r0
 80042c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	639a      	str	r2, [r3, #56]	; 0x38
 80042d6:	e005      	b.n	80042e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d10b      	bne.n	8004302 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f043 0206 	orr.w	r2, r3, #6
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f043 0220 	orr.w	r2, r3, #32
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004302:	7bfb      	ldrb	r3, [r7, #15]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800430e:	b004      	add	sp, #16
 8004310:	4770      	bx	lr
	...

08004314 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	4613      	mov	r3, r2
 8004320:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d165      	bne.n	80043f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4a41      	ldr	r2, [pc, #260]	; (8004430 <USB_SetTurnaroundTime+0x11c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d906      	bls.n	800433e <USB_SetTurnaroundTime+0x2a>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4a40      	ldr	r2, [pc, #256]	; (8004434 <USB_SetTurnaroundTime+0x120>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d202      	bcs.n	800433e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004338:	230f      	movs	r3, #15
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	e062      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	4a3c      	ldr	r2, [pc, #240]	; (8004434 <USB_SetTurnaroundTime+0x120>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d306      	bcc.n	8004354 <USB_SetTurnaroundTime+0x40>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4a3b      	ldr	r2, [pc, #236]	; (8004438 <USB_SetTurnaroundTime+0x124>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d202      	bcs.n	8004354 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800434e:	230e      	movs	r3, #14
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	e057      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4a38      	ldr	r2, [pc, #224]	; (8004438 <USB_SetTurnaroundTime+0x124>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d306      	bcc.n	800436a <USB_SetTurnaroundTime+0x56>
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4a37      	ldr	r2, [pc, #220]	; (800443c <USB_SetTurnaroundTime+0x128>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d202      	bcs.n	800436a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004364:	230d      	movs	r3, #13
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	e04c      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	4a33      	ldr	r2, [pc, #204]	; (800443c <USB_SetTurnaroundTime+0x128>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d306      	bcc.n	8004380 <USB_SetTurnaroundTime+0x6c>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	4a32      	ldr	r2, [pc, #200]	; (8004440 <USB_SetTurnaroundTime+0x12c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d802      	bhi.n	8004380 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800437a:	230c      	movs	r3, #12
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e041      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4a2f      	ldr	r2, [pc, #188]	; (8004440 <USB_SetTurnaroundTime+0x12c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d906      	bls.n	8004396 <USB_SetTurnaroundTime+0x82>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4a2e      	ldr	r2, [pc, #184]	; (8004444 <USB_SetTurnaroundTime+0x130>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d802      	bhi.n	8004396 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004390:	230b      	movs	r3, #11
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	e036      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	4a2a      	ldr	r2, [pc, #168]	; (8004444 <USB_SetTurnaroundTime+0x130>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d906      	bls.n	80043ac <USB_SetTurnaroundTime+0x98>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	4a29      	ldr	r2, [pc, #164]	; (8004448 <USB_SetTurnaroundTime+0x134>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d802      	bhi.n	80043ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80043a6:	230a      	movs	r3, #10
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	e02b      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4a26      	ldr	r2, [pc, #152]	; (8004448 <USB_SetTurnaroundTime+0x134>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d906      	bls.n	80043c2 <USB_SetTurnaroundTime+0xae>
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4a25      	ldr	r2, [pc, #148]	; (800444c <USB_SetTurnaroundTime+0x138>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d202      	bcs.n	80043c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80043bc:	2309      	movs	r3, #9
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	e020      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4a21      	ldr	r2, [pc, #132]	; (800444c <USB_SetTurnaroundTime+0x138>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d306      	bcc.n	80043d8 <USB_SetTurnaroundTime+0xc4>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4a20      	ldr	r2, [pc, #128]	; (8004450 <USB_SetTurnaroundTime+0x13c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d802      	bhi.n	80043d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80043d2:	2308      	movs	r3, #8
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e015      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4a1d      	ldr	r2, [pc, #116]	; (8004450 <USB_SetTurnaroundTime+0x13c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d906      	bls.n	80043ee <USB_SetTurnaroundTime+0xda>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4a1c      	ldr	r2, [pc, #112]	; (8004454 <USB_SetTurnaroundTime+0x140>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d202      	bcs.n	80043ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80043e8:	2307      	movs	r3, #7
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	e00a      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80043ee:	2306      	movs	r3, #6
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	e007      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d102      	bne.n	8004400 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80043fa:	2309      	movs	r3, #9
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	e001      	b.n	8004404 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004400:	2309      	movs	r3, #9
 8004402:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	029b      	lsls	r3, r3, #10
 8004418:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800441c:	431a      	orrs	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	371c      	adds	r7, #28
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	00d8acbf 	.word	0x00d8acbf
 8004434:	00e4e1c0 	.word	0x00e4e1c0
 8004438:	00f42400 	.word	0x00f42400
 800443c:	01067380 	.word	0x01067380
 8004440:	011a499f 	.word	0x011a499f
 8004444:	01312cff 	.word	0x01312cff
 8004448:	014ca43f 	.word	0x014ca43f
 800444c:	016e3600 	.word	0x016e3600
 8004450:	01a6ab1f 	.word	0x01a6ab1f
 8004454:	01e84800 	.word	0x01e84800

08004458 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f043 0201 	orr.w	r2, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f023 0201 	bic.w	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	460b      	mov	r3, r1
 80044a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d115      	bne.n	80044ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044ca:	2001      	movs	r0, #1
 80044cc:	f7fd f932 	bl	8001734 <HAL_Delay>
      ms++;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3301      	adds	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f001 fa45 	bl	8005966 <USB_GetMode>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d01e      	beq.n	8004520 <USB_SetCurrentMode+0x84>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b31      	cmp	r3, #49	; 0x31
 80044e6:	d9f0      	bls.n	80044ca <USB_SetCurrentMode+0x2e>
 80044e8:	e01a      	b.n	8004520 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80044ea:	78fb      	ldrb	r3, [r7, #3]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d115      	bne.n	800451c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044fc:	2001      	movs	r0, #1
 80044fe:	f7fd f919 	bl	8001734 <HAL_Delay>
      ms++;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3301      	adds	r3, #1
 8004506:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f001 fa2c 	bl	8005966 <USB_GetMode>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <USB_SetCurrentMode+0x84>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b31      	cmp	r3, #49	; 0x31
 8004518:	d9f0      	bls.n	80044fc <USB_SetCurrentMode+0x60>
 800451a:	e001      	b.n	8004520 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e005      	b.n	800452c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b32      	cmp	r3, #50	; 0x32
 8004524:	d101      	bne.n	800452a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004534:	b084      	sub	sp, #16
 8004536:	b580      	push	{r7, lr}
 8004538:	b086      	sub	sp, #24
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800454e:	2300      	movs	r3, #0
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	e009      	b.n	8004568 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	3340      	adds	r3, #64	; 0x40
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	2200      	movs	r2, #0
 8004560:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	3301      	adds	r3, #1
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	2b0e      	cmp	r3, #14
 800456c:	d9f2      	bls.n	8004554 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800456e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d11c      	bne.n	80045ae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004582:	f043 0302 	orr.w	r3, r3, #2
 8004586:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	639a      	str	r2, [r3, #56]	; 0x38
 80045ac:	e00b      	b.n	80045c6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045cc:	461a      	mov	r2, r3
 80045ce:	2300      	movs	r3, #0
 80045d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d8:	4619      	mov	r1, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e0:	461a      	mov	r2, r3
 80045e2:	680b      	ldr	r3, [r1, #0]
 80045e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d10c      	bne.n	8004606 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80045ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d104      	bne.n	80045fc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80045f2:	2100      	movs	r1, #0
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f965 	bl	80048c4 <USB_SetDevSpeed>
 80045fa:	e008      	b.n	800460e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045fc:	2101      	movs	r1, #1
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f960 	bl	80048c4 <USB_SetDevSpeed>
 8004604:	e003      	b.n	800460e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004606:	2103      	movs	r1, #3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f95b 	bl	80048c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800460e:	2110      	movs	r1, #16
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f8f3 	bl	80047fc <USB_FlushTxFifo>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f91f 	bl	8004864 <USB_FlushRxFifo>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004636:	461a      	mov	r2, r3
 8004638:	2300      	movs	r3, #0
 800463a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004642:	461a      	mov	r2, r3
 8004644:	2300      	movs	r3, #0
 8004646:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464e:	461a      	mov	r2, r3
 8004650:	2300      	movs	r3, #0
 8004652:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	e043      	b.n	80046e2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800466c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004670:	d118      	bne.n	80046a4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004684:	461a      	mov	r2, r3
 8004686:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	e013      	b.n	80046b6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469a:	461a      	mov	r2, r3
 800469c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e008      	b.n	80046b6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b0:	461a      	mov	r2, r3
 80046b2:	2300      	movs	r3, #0
 80046b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c2:	461a      	mov	r2, r3
 80046c4:	2300      	movs	r3, #0
 80046c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d4:	461a      	mov	r2, r3
 80046d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	3301      	adds	r3, #1
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d3b7      	bcc.n	800465a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046ea:	2300      	movs	r3, #0
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	e043      	b.n	8004778 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004706:	d118      	bne.n	800473a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10a      	bne.n	8004724 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471a:	461a      	mov	r2, r3
 800471c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	e013      	b.n	800474c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004730:	461a      	mov	r2, r3
 8004732:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	e008      	b.n	800474c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004746:	461a      	mov	r2, r3
 8004748:	2300      	movs	r3, #0
 800474a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004758:	461a      	mov	r2, r3
 800475a:	2300      	movs	r3, #0
 800475c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476a:	461a      	mov	r2, r3
 800476c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004770:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	3301      	adds	r3, #1
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	429a      	cmp	r2, r3
 800477e:	d3b7      	bcc.n	80046f0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800478e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004792:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80047a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d105      	bne.n	80047b4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f043 0210 	orr.w	r2, r3, #16
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699a      	ldr	r2, [r3, #24]
 80047b8:	4b0f      	ldr	r3, [pc, #60]	; (80047f8 <USB_DevInit+0x2c4>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f043 0208 	orr.w	r2, r3, #8
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d107      	bne.n	80047e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047e0:	f043 0304 	orr.w	r3, r3, #4
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80047e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047f4:	b004      	add	sp, #16
 80047f6:	4770      	bx	lr
 80047f8:	803c3800 	.word	0x803c3800

080047fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3301      	adds	r3, #1
 800480e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4a13      	ldr	r2, [pc, #76]	; (8004860 <USB_FlushTxFifo+0x64>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d901      	bls.n	800481c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e01b      	b.n	8004854 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	daf2      	bge.n	800480a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	019b      	lsls	r3, r3, #6
 800482c:	f043 0220 	orr.w	r2, r3, #32
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	3301      	adds	r3, #1
 8004838:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4a08      	ldr	r2, [pc, #32]	; (8004860 <USB_FlushTxFifo+0x64>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d901      	bls.n	8004846 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e006      	b.n	8004854 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b20      	cmp	r3, #32
 8004850:	d0f0      	beq.n	8004834 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	00030d40 	.word	0x00030d40

08004864 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3301      	adds	r3, #1
 8004874:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4a11      	ldr	r2, [pc, #68]	; (80048c0 <USB_FlushRxFifo+0x5c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e018      	b.n	80048b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	daf2      	bge.n	8004870 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2210      	movs	r2, #16
 8004892:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	3301      	adds	r3, #1
 8004898:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4a08      	ldr	r2, [pc, #32]	; (80048c0 <USB_FlushRxFifo+0x5c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e006      	b.n	80048b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b10      	cmp	r3, #16
 80048b0:	d0f0      	beq.n	8004894 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	00030d40 	.word	0x00030d40

080048c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	68f9      	ldr	r1, [r7, #12]
 80048e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048e4:	4313      	orrs	r3, r2
 80048e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b087      	sub	sp, #28
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 0306 	and.w	r3, r3, #6
 800490e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004916:	2300      	movs	r3, #0
 8004918:	75fb      	strb	r3, [r7, #23]
 800491a:	e00a      	b.n	8004932 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d002      	beq.n	8004928 <USB_GetDevSpeed+0x32>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b06      	cmp	r3, #6
 8004926:	d102      	bne.n	800492e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004928:	2302      	movs	r3, #2
 800492a:	75fb      	strb	r3, [r7, #23]
 800492c:	e001      	b.n	8004932 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800492e:	230f      	movs	r3, #15
 8004930:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004932:	7dfb      	ldrb	r3, [r7, #23]
}
 8004934:	4618      	mov	r0, r3
 8004936:	371c      	adds	r7, #28
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	785b      	ldrb	r3, [r3, #1]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d13a      	bne.n	80049d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004962:	69da      	ldr	r2, [r3, #28]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	2101      	movs	r1, #1
 800496e:	fa01 f303 	lsl.w	r3, r1, r3
 8004972:	b29b      	uxth	r3, r3
 8004974:	68f9      	ldr	r1, [r7, #12]
 8004976:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800497a:	4313      	orrs	r3, r2
 800497c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d155      	bne.n	8004a40 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	791b      	ldrb	r3, [r3, #4]
 80049ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	059b      	lsls	r3, r3, #22
 80049b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049b8:	4313      	orrs	r3, r2
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	0151      	lsls	r1, r2, #5
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	440a      	add	r2, r1
 80049c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	e036      	b.n	8004a40 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d8:	69da      	ldr	r2, [r3, #28]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	2101      	movs	r1, #1
 80049e4:	fa01 f303 	lsl.w	r3, r1, r3
 80049e8:	041b      	lsls	r3, r3, #16
 80049ea:	68f9      	ldr	r1, [r7, #12]
 80049ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d11a      	bne.n	8004a40 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	791b      	ldrb	r3, [r3, #4]
 8004a24:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a26:	430b      	orrs	r3, r1
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	0151      	lsls	r1, r2, #5
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	440a      	add	r2, r1
 8004a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a3e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
	...

08004a50 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d161      	bne.n	8004b30 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a82:	d11f      	bne.n	8004ac4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	0151      	lsls	r1, r2, #5
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	440a      	add	r2, r1
 8004a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004aa2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	0151      	lsls	r1, r2, #5
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	440a      	add	r2, r1
 8004aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004abe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ac2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	43db      	mvns	r3, r3
 8004ade:	68f9      	ldr	r1, [r7, #12]
 8004ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	f003 030f 	and.w	r3, r3, #15
 8004af8:	2101      	movs	r1, #1
 8004afa:	fa01 f303 	lsl.w	r3, r1, r3
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	43db      	mvns	r3, r3
 8004b02:	68f9      	ldr	r1, [r7, #12]
 8004b04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b08:	4013      	ands	r3, r2
 8004b0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	0159      	lsls	r1, r3, #5
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	440b      	add	r3, r1
 8004b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b26:	4619      	mov	r1, r3
 8004b28:	4b35      	ldr	r3, [pc, #212]	; (8004c00 <USB_DeactivateEndpoint+0x1b0>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	600b      	str	r3, [r1, #0]
 8004b2e:	e060      	b.n	8004bf2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b46:	d11f      	bne.n	8004b88 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	0151      	lsls	r1, r2, #5
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	440a      	add	r2, r1
 8004b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b66:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	0151      	lsls	r1, r2, #5
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	440a      	add	r2, r1
 8004b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	2101      	movs	r1, #1
 8004b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9e:	041b      	lsls	r3, r3, #16
 8004ba0:	43db      	mvns	r3, r3
 8004ba2:	68f9      	ldr	r1, [r7, #12]
 8004ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ba8:	4013      	ands	r3, r2
 8004baa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb2:	69da      	ldr	r2, [r3, #28]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc2:	041b      	lsls	r3, r3, #16
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	68f9      	ldr	r1, [r7, #12]
 8004bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bcc:	4013      	ands	r3, r2
 8004bce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	0159      	lsls	r1, r3, #5
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	440b      	add	r3, r1
 8004be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bea:	4619      	mov	r1, r3
 8004bec:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <USB_DeactivateEndpoint+0x1b4>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	ec337800 	.word	0xec337800
 8004c04:	eff37800 	.word	0xeff37800

08004c08 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08a      	sub	sp, #40	; 0x28
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	4613      	mov	r3, r2
 8004c14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	785b      	ldrb	r3, [r3, #1]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	f040 815c 	bne.w	8004ee2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d132      	bne.n	8004c98 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	0151      	lsls	r1, r2, #5
 8004c44:	69fa      	ldr	r2, [r7, #28]
 8004c46:	440a      	add	r2, r1
 8004c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	0151      	lsls	r1, r2, #5
 8004c68:	69fa      	ldr	r2, [r7, #28]
 8004c6a:	440a      	add	r2, r1
 8004c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	0151      	lsls	r1, r2, #5
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	440a      	add	r2, r1
 8004c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c90:	0cdb      	lsrs	r3, r3, #19
 8004c92:	04db      	lsls	r3, r3, #19
 8004c94:	6113      	str	r3, [r2, #16]
 8004c96:	e074      	b.n	8004d82 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	0151      	lsls	r1, r2, #5
 8004caa:	69fa      	ldr	r2, [r7, #28]
 8004cac:	440a      	add	r2, r1
 8004cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb2:	0cdb      	lsrs	r3, r3, #19
 8004cb4:	04db      	lsls	r3, r3, #19
 8004cb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	0151      	lsls	r1, r2, #5
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	440a      	add	r2, r1
 8004cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cd6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	6999      	ldr	r1, [r3, #24]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	440b      	add	r3, r1
 8004cf4:	1e59      	subs	r1, r3, #1
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cfe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d00:	4b9d      	ldr	r3, [pc, #628]	; (8004f78 <USB_EPStartXfer+0x370>)
 8004d02:	400b      	ands	r3, r1
 8004d04:	69b9      	ldr	r1, [r7, #24]
 8004d06:	0148      	lsls	r0, r1, #5
 8004d08:	69f9      	ldr	r1, [r7, #28]
 8004d0a:	4401      	add	r1, r0
 8004d0c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d10:	4313      	orrs	r3, r2
 8004d12:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d2a:	69b9      	ldr	r1, [r7, #24]
 8004d2c:	0148      	lsls	r0, r1, #5
 8004d2e:	69f9      	ldr	r1, [r7, #28]
 8004d30:	4401      	add	r1, r0
 8004d32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d36:	4313      	orrs	r3, r2
 8004d38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	791b      	ldrb	r3, [r3, #4]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d11f      	bne.n	8004d82 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	0151      	lsls	r1, r2, #5
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	440a      	add	r2, r1
 8004d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004d60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	0151      	lsls	r1, r2, #5
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	440a      	add	r2, r1
 8004d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d80:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d14b      	bne.n	8004e20 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d009      	beq.n	8004da4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	791b      	ldrb	r3, [r3, #4]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d128      	bne.n	8004dfe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d110      	bne.n	8004dde <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	0151      	lsls	r1, r2, #5
 8004dce:	69fa      	ldr	r2, [r7, #28]
 8004dd0:	440a      	add	r2, r1
 8004dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	e00f      	b.n	8004dfe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	0151      	lsls	r1, r2, #5
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	440a      	add	r2, r1
 8004df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dfc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	0151      	lsls	r1, r2, #5
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	440a      	add	r2, r1
 8004e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	e133      	b.n	8005088 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	0151      	lsls	r1, r2, #5
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	440a      	add	r2, r1
 8004e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e3e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	791b      	ldrb	r3, [r3, #4]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d015      	beq.n	8004e74 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 811b 	beq.w	8005088 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	2101      	movs	r1, #1
 8004e64:	fa01 f303 	lsl.w	r3, r1, r3
 8004e68:	69f9      	ldr	r1, [r7, #28]
 8004e6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	634b      	str	r3, [r1, #52]	; 0x34
 8004e72:	e109      	b.n	8005088 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d110      	bne.n	8004ea6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	0151      	lsls	r1, r2, #5
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	440a      	add	r2, r1
 8004e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	e00f      	b.n	8004ec6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	0151      	lsls	r1, r2, #5
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	440a      	add	r2, r1
 8004ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	6919      	ldr	r1, [r3, #16]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	781a      	ldrb	r2, [r3, #0]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	b298      	uxth	r0, r3
 8004ed4:	79fb      	ldrb	r3, [r7, #7]
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	4603      	mov	r3, r0
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fade 	bl	800549c <USB_WritePacket>
 8004ee0:	e0d2      	b.n	8005088 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	0151      	lsls	r1, r2, #5
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	440a      	add	r2, r1
 8004ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004efc:	0cdb      	lsrs	r3, r3, #19
 8004efe:	04db      	lsls	r3, r3, #19
 8004f00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	0151      	lsls	r1, r2, #5
 8004f14:	69fa      	ldr	r2, [r7, #28]
 8004f16:	440a      	add	r2, r1
 8004f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f24:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d126      	bne.n	8004f7c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f44:	69b9      	ldr	r1, [r7, #24]
 8004f46:	0148      	lsls	r0, r1, #5
 8004f48:	69f9      	ldr	r1, [r7, #28]
 8004f4a:	4401      	add	r1, r0
 8004f4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f50:	4313      	orrs	r3, r2
 8004f52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	69fa      	ldr	r2, [r7, #28]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f72:	6113      	str	r3, [r2, #16]
 8004f74:	e03a      	b.n	8004fec <USB_EPStartXfer+0x3e4>
 8004f76:	bf00      	nop
 8004f78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	699a      	ldr	r2, [r3, #24]
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4413      	add	r3, r2
 8004f86:	1e5a      	subs	r2, r3, #1
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f90:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	8afa      	ldrh	r2, [r7, #22]
 8004f98:	fb03 f202 	mul.w	r2, r3, r2
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	8afb      	ldrh	r3, [r7, #22]
 8004fb0:	04d9      	lsls	r1, r3, #19
 8004fb2:	4b38      	ldr	r3, [pc, #224]	; (8005094 <USB_EPStartXfer+0x48c>)
 8004fb4:	400b      	ands	r3, r1
 8004fb6:	69b9      	ldr	r1, [r7, #24]
 8004fb8:	0148      	lsls	r0, r1, #5
 8004fba:	69f9      	ldr	r1, [r7, #28]
 8004fbc:	4401      	add	r1, r0
 8004fbe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fdc:	69b9      	ldr	r1, [r7, #24]
 8004fde:	0148      	lsls	r0, r1, #5
 8004fe0:	69f9      	ldr	r1, [r7, #28]
 8004fe2:	4401      	add	r1, r0
 8004fe4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d10d      	bne.n	800500e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d009      	beq.n	800500e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	6919      	ldr	r1, [r3, #16]
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500a:	460a      	mov	r2, r1
 800500c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	791b      	ldrb	r3, [r3, #4]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d128      	bne.n	8005068 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005022:	2b00      	cmp	r3, #0
 8005024:	d110      	bne.n	8005048 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	0151      	lsls	r1, r2, #5
 8005038:	69fa      	ldr	r2, [r7, #28]
 800503a:	440a      	add	r2, r1
 800503c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005040:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	e00f      	b.n	8005068 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	69fa      	ldr	r2, [r7, #28]
 800505c:	440a      	add	r2, r1
 800505e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005066:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	0151      	lsls	r1, r2, #5
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	440a      	add	r2, r1
 800507e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005082:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005086:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3720      	adds	r7, #32
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	1ff80000 	.word	0x1ff80000

08005098 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	4613      	mov	r3, r2
 80050a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	785b      	ldrb	r3, [r3, #1]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	f040 80ce 	bne.w	8005256 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d132      	bne.n	8005128 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	0151      	lsls	r1, r2, #5
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	440a      	add	r2, r1
 80050d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	0151      	lsls	r1, r2, #5
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	440a      	add	r2, r1
 80050fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005100:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005104:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	440a      	add	r2, r1
 800511c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005120:	0cdb      	lsrs	r3, r3, #19
 8005122:	04db      	lsls	r3, r3, #19
 8005124:	6113      	str	r3, [r2, #16]
 8005126:	e04e      	b.n	80051c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	0151      	lsls	r1, r2, #5
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	440a      	add	r2, r1
 800513e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005142:	0cdb      	lsrs	r3, r3, #19
 8005144:	04db      	lsls	r3, r3, #19
 8005146:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	0151      	lsls	r1, r2, #5
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	440a      	add	r2, r1
 800515e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005162:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005166:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800516a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	699a      	ldr	r2, [r3, #24]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	429a      	cmp	r2, r3
 8005176:	d903      	bls.n	8005180 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	0151      	lsls	r1, r2, #5
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	440a      	add	r2, r1
 8005196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800519e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ac:	691a      	ldr	r2, [r3, #16]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b6:	6939      	ldr	r1, [r7, #16]
 80051b8:	0148      	lsls	r0, r1, #5
 80051ba:	6979      	ldr	r1, [r7, #20]
 80051bc:	4401      	add	r1, r0
 80051be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051c2:	4313      	orrs	r3, r2
 80051c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d11e      	bne.n	800520a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d009      	beq.n	80051e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	461a      	mov	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005202:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	e097      	b.n	800533a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	0151      	lsls	r1, r2, #5
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	440a      	add	r2, r1
 8005220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005224:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005228:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 8083 	beq.w	800533a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	f003 030f 	and.w	r3, r3, #15
 8005244:	2101      	movs	r1, #1
 8005246:	fa01 f303 	lsl.w	r3, r1, r3
 800524a:	6979      	ldr	r1, [r7, #20]
 800524c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005250:	4313      	orrs	r3, r2
 8005252:	634b      	str	r3, [r1, #52]	; 0x34
 8005254:	e071      	b.n	800533a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	440a      	add	r2, r1
 800526c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005270:	0cdb      	lsrs	r3, r3, #19
 8005272:	04db      	lsls	r3, r3, #19
 8005274:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	0151      	lsls	r1, r2, #5
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	440a      	add	r2, r1
 800528c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005290:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005294:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005298:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052e8:	6939      	ldr	r1, [r7, #16]
 80052ea:	0148      	lsls	r0, r1, #5
 80052ec:	6979      	ldr	r1, [r7, #20]
 80052ee:	4401      	add	r1, r0
 80052f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052f4:	4313      	orrs	r3, r2
 80052f6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80052f8:	79fb      	ldrb	r3, [r7, #7]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d10d      	bne.n	800531a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	6919      	ldr	r1, [r3, #16]
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005316:	460a      	mov	r2, r1
 8005318:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	0151      	lsls	r1, r2, #5
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	440a      	add	r2, r1
 8005330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005334:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005338:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	371c      	adds	r7, #28
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005356:	2300      	movs	r3, #0
 8005358:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	785b      	ldrb	r3, [r3, #1]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d14a      	bne.n	80053fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800537a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800537e:	f040 8086 	bne.w	800548e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	7812      	ldrb	r2, [r2, #0]
 8005396:	0151      	lsls	r1, r2, #5
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	440a      	add	r2, r1
 800539c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	7812      	ldrb	r2, [r2, #0]
 80053ba:	0151      	lsls	r1, r2, #5
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	440a      	add	r2, r1
 80053c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3301      	adds	r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d902      	bls.n	80053e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	75fb      	strb	r3, [r7, #23]
          break;
 80053de:	e056      	b.n	800548e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053f8:	d0e7      	beq.n	80053ca <USB_EPStopXfer+0x82>
 80053fa:	e048      	b.n	800548e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005414:	d13b      	bne.n	800548e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	7812      	ldrb	r2, [r2, #0]
 800542a:	0151      	lsls	r1, r2, #5
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	440a      	add	r2, r1
 8005430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005434:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005438:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	7812      	ldrb	r2, [r2, #0]
 800544e:	0151      	lsls	r1, r2, #5
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	440a      	add	r2, r1
 8005454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005458:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800545c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3301      	adds	r3, #1
 8005462:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f242 7210 	movw	r2, #10000	; 0x2710
 800546a:	4293      	cmp	r3, r2
 800546c:	d902      	bls.n	8005474 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	75fb      	strb	r3, [r7, #23]
          break;
 8005472:	e00c      	b.n	800548e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800548c:	d0e7      	beq.n	800545e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800548e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005490:	4618      	mov	r0, r3
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800549c:	b480      	push	{r7}
 800549e:	b089      	sub	sp, #36	; 0x24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	4611      	mov	r1, r2
 80054a8:	461a      	mov	r2, r3
 80054aa:	460b      	mov	r3, r1
 80054ac:	71fb      	strb	r3, [r7, #7]
 80054ae:	4613      	mov	r3, r2
 80054b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80054ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d123      	bne.n	800550a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80054c2:	88bb      	ldrh	r3, [r7, #4]
 80054c4:	3303      	adds	r3, #3
 80054c6:	089b      	lsrs	r3, r3, #2
 80054c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80054ca:	2300      	movs	r3, #0
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	e018      	b.n	8005502 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80054d0:	79fb      	ldrb	r3, [r7, #7]
 80054d2:	031a      	lsls	r2, r3, #12
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054dc:	461a      	mov	r2, r3
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	3301      	adds	r3, #1
 80054e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	3301      	adds	r3, #1
 80054ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	3301      	adds	r3, #1
 80054f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	3301      	adds	r3, #1
 80054fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	3301      	adds	r3, #1
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	429a      	cmp	r2, r3
 8005508:	d3e2      	bcc.n	80054d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3724      	adds	r7, #36	; 0x24
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005518:	b480      	push	{r7}
 800551a:	b08b      	sub	sp, #44	; 0x2c
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	4613      	mov	r3, r2
 8005524:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800552e:	88fb      	ldrh	r3, [r7, #6]
 8005530:	089b      	lsrs	r3, r3, #2
 8005532:	b29b      	uxth	r3, r3
 8005534:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005536:	88fb      	ldrh	r3, [r7, #6]
 8005538:	f003 0303 	and.w	r3, r3, #3
 800553c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800553e:	2300      	movs	r3, #0
 8005540:	623b      	str	r3, [r7, #32]
 8005542:	e014      	b.n	800556e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	3301      	adds	r3, #1
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	3301      	adds	r3, #1
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	3301      	adds	r3, #1
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	3301      	adds	r3, #1
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	3301      	adds	r3, #1
 800556c:	623b      	str	r3, [r7, #32]
 800556e:	6a3a      	ldr	r2, [r7, #32]
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	429a      	cmp	r2, r3
 8005574:	d3e6      	bcc.n	8005544 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005576:	8bfb      	ldrh	r3, [r7, #30]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01e      	beq.n	80055ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005586:	461a      	mov	r2, r3
 8005588:	f107 0310 	add.w	r3, r7, #16
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	fa22 f303 	lsr.w	r3, r2, r3
 800559c:	b2da      	uxtb	r2, r3
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	701a      	strb	r2, [r3, #0]
      i++;
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	3301      	adds	r3, #1
 80055a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	3301      	adds	r3, #1
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80055ae:	8bfb      	ldrh	r3, [r7, #30]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80055b4:	8bfb      	ldrh	r3, [r7, #30]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1ea      	bne.n	8005590 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055bc:	4618      	mov	r0, r3
 80055be:	372c      	adds	r7, #44	; 0x2c
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d12c      	bne.n	800563e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	db12      	blt.n	800561c <USB_EPSetStall+0x54>
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00f      	beq.n	800561c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	0151      	lsls	r1, r2, #5
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	440a      	add	r2, r1
 8005612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005616:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800561a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	0151      	lsls	r1, r2, #5
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	440a      	add	r2, r1
 8005632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005636:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800563a:	6013      	str	r3, [r2, #0]
 800563c:	e02b      	b.n	8005696 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	db12      	blt.n	8005676 <USB_EPSetStall+0xae>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00f      	beq.n	8005676 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	440a      	add	r2, r1
 800566c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005670:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005674:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	0151      	lsls	r1, r2, #5
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	440a      	add	r2, r1
 800568c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005694:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	785b      	ldrb	r3, [r3, #1]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d128      	bne.n	8005712 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	0151      	lsls	r1, r2, #5
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	440a      	add	r2, r1
 80056d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	791b      	ldrb	r3, [r3, #4]
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d003      	beq.n	80056f0 <USB_EPClearStall+0x4c>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	791b      	ldrb	r3, [r3, #4]
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d138      	bne.n	8005762 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	0151      	lsls	r1, r2, #5
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	440a      	add	r2, r1
 8005706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	e027      	b.n	8005762 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	0151      	lsls	r1, r2, #5
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	440a      	add	r2, r1
 8005728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800572c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005730:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	791b      	ldrb	r3, [r3, #4]
 8005736:	2b03      	cmp	r3, #3
 8005738:	d003      	beq.n	8005742 <USB_EPClearStall+0x9e>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	791b      	ldrb	r3, [r3, #4]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d10f      	bne.n	8005762 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	0151      	lsls	r1, r2, #5
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	440a      	add	r2, r1
 8005758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005760:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800578e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005792:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80057a4:	68f9      	ldr	r1, [r7, #12]
 80057a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057aa:	4313      	orrs	r3, r2
 80057ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80057d6:	f023 0303 	bic.w	r3, r3, #3
 80057da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ea:	f023 0302 	bic.w	r3, r3, #2
 80057ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057fe:	b480      	push	{r7}
 8005800:	b085      	sub	sp, #20
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005818:	f023 0303 	bic.w	r3, r3, #3
 800581c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800582c:	f043 0302 	orr.w	r3, r3, #2
 8005830:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4013      	ands	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005858:	68fb      	ldr	r3, [r7, #12]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005866:	b480      	push	{r7}
 8005868:	b085      	sub	sp, #20
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	4013      	ands	r3, r2
 8005888:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	0c1b      	lsrs	r3, r3, #16
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800589a:	b480      	push	{r7}
 800589c:	b085      	sub	sp, #20
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	4013      	ands	r3, r2
 80058bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	b29b      	uxth	r3, r3
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b085      	sub	sp, #20
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	460b      	mov	r3, r1
 80058d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	4013      	ands	r3, r2
 80058fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058fc:	68bb      	ldr	r3, [r7, #8]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800590a:	b480      	push	{r7}
 800590c:	b087      	sub	sp, #28
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	460b      	mov	r3, r1
 8005914:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	fa22 f303 	lsr.w	r3, r2, r3
 800593a:	01db      	lsls	r3, r3, #7
 800593c:	b2db      	uxtb	r3, r3
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4013      	ands	r3, r2
 8005956:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005958:	68bb      	ldr	r3, [r7, #8]
}
 800595a:	4618      	mov	r0, r3
 800595c:	371c      	adds	r7, #28
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f003 0301 	and.w	r3, r3, #1
}
 8005976:	4618      	mov	r0, r3
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005982:	b480      	push	{r7}
 8005984:	b085      	sub	sp, #20
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800599c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80059a0:	f023 0307 	bic.w	r3, r3, #7
 80059a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	460b      	mov	r3, r1
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	333c      	adds	r3, #60	; 0x3c
 80059de:	3304      	adds	r3, #4
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4a26      	ldr	r2, [pc, #152]	; (8005a80 <USB_EP0_OutStart+0xb8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d90a      	bls.n	8005a02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059fc:	d101      	bne.n	8005a02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	e037      	b.n	8005a72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a08:	461a      	mov	r2, r3
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a30:	f043 0318 	orr.w	r3, r3, #24
 8005a34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a44:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005a48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005a4a:	7afb      	ldrb	r3, [r7, #11]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d10f      	bne.n	8005a70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a56:	461a      	mov	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005a6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	4f54300a 	.word	0x4f54300a

08005a84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3301      	adds	r3, #1
 8005a94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4a13      	ldr	r2, [pc, #76]	; (8005ae8 <USB_CoreReset+0x64>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d901      	bls.n	8005aa2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e01b      	b.n	8005ada <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	daf2      	bge.n	8005a90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f043 0201 	orr.w	r2, r3, #1
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3301      	adds	r3, #1
 8005abe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4a09      	ldr	r2, [pc, #36]	; (8005ae8 <USB_CoreReset+0x64>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d901      	bls.n	8005acc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e006      	b.n	8005ada <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d0f0      	beq.n	8005aba <USB_CoreReset+0x36>

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	00030d40 	.word	0x00030d40

08005aec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005af8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005afc:	f002 fca4 	bl	8008448 <USBD_static_malloc>
 8005b00:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d109      	bne.n	8005b1c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	32b0      	adds	r2, #176	; 0xb0
 8005b12:	2100      	movs	r1, #0
 8005b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e0d4      	b.n	8005cc6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005b1c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005b20:	2100      	movs	r1, #0
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f002 fd0c 	bl	8008540 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	32b0      	adds	r2, #176	; 0xb0
 8005b32:	68f9      	ldr	r1, [r7, #12]
 8005b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	32b0      	adds	r2, #176	; 0xb0
 8005b42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	7c1b      	ldrb	r3, [r3, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d138      	bne.n	8005bc6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005b54:	4b5e      	ldr	r3, [pc, #376]	; (8005cd0 <USBD_CDC_Init+0x1e4>)
 8005b56:	7819      	ldrb	r1, [r3, #0]
 8005b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f002 fb4f 	bl	8008202 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005b64:	4b5a      	ldr	r3, [pc, #360]	; (8005cd0 <USBD_CDC_Init+0x1e4>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	f003 020f 	and.w	r2, r3, #15
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	3324      	adds	r3, #36	; 0x24
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005b7e:	4b55      	ldr	r3, [pc, #340]	; (8005cd4 <USBD_CDC_Init+0x1e8>)
 8005b80:	7819      	ldrb	r1, [r3, #0]
 8005b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b86:	2202      	movs	r2, #2
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f002 fb3a 	bl	8008202 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005b8e:	4b51      	ldr	r3, [pc, #324]	; (8005cd4 <USBD_CDC_Init+0x1e8>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	f003 020f 	and.w	r2, r3, #15
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005baa:	4b4b      	ldr	r3, [pc, #300]	; (8005cd8 <USBD_CDC_Init+0x1ec>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	f003 020f 	and.w	r2, r3, #15
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	440b      	add	r3, r1
 8005bbe:	3326      	adds	r3, #38	; 0x26
 8005bc0:	2210      	movs	r2, #16
 8005bc2:	801a      	strh	r2, [r3, #0]
 8005bc4:	e035      	b.n	8005c32 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005bc6:	4b42      	ldr	r3, [pc, #264]	; (8005cd0 <USBD_CDC_Init+0x1e4>)
 8005bc8:	7819      	ldrb	r1, [r3, #0]
 8005bca:	2340      	movs	r3, #64	; 0x40
 8005bcc:	2202      	movs	r2, #2
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f002 fb17 	bl	8008202 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005bd4:	4b3e      	ldr	r3, [pc, #248]	; (8005cd0 <USBD_CDC_Init+0x1e4>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	f003 020f 	and.w	r2, r3, #15
 8005bdc:	6879      	ldr	r1, [r7, #4]
 8005bde:	4613      	mov	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	440b      	add	r3, r1
 8005be8:	3324      	adds	r3, #36	; 0x24
 8005bea:	2201      	movs	r2, #1
 8005bec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005bee:	4b39      	ldr	r3, [pc, #228]	; (8005cd4 <USBD_CDC_Init+0x1e8>)
 8005bf0:	7819      	ldrb	r1, [r3, #0]
 8005bf2:	2340      	movs	r3, #64	; 0x40
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f002 fb03 	bl	8008202 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005bfc:	4b35      	ldr	r3, [pc, #212]	; (8005cd4 <USBD_CDC_Init+0x1e8>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	f003 020f 	and.w	r2, r3, #15
 8005c04:	6879      	ldr	r1, [r7, #4]
 8005c06:	4613      	mov	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	440b      	add	r3, r1
 8005c10:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005c14:	2201      	movs	r2, #1
 8005c16:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005c18:	4b2f      	ldr	r3, [pc, #188]	; (8005cd8 <USBD_CDC_Init+0x1ec>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	f003 020f 	and.w	r2, r3, #15
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	4613      	mov	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	440b      	add	r3, r1
 8005c2c:	3326      	adds	r3, #38	; 0x26
 8005c2e:	2210      	movs	r2, #16
 8005c30:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005c32:	4b29      	ldr	r3, [pc, #164]	; (8005cd8 <USBD_CDC_Init+0x1ec>)
 8005c34:	7819      	ldrb	r1, [r3, #0]
 8005c36:	2308      	movs	r3, #8
 8005c38:	2203      	movs	r2, #3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f002 fae1 	bl	8008202 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005c40:	4b25      	ldr	r3, [pc, #148]	; (8005cd8 <USBD_CDC_Init+0x1ec>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	f003 020f 	and.w	r2, r3, #15
 8005c48:	6879      	ldr	r1, [r7, #4]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	440b      	add	r3, r1
 8005c54:	3324      	adds	r3, #36	; 0x24
 8005c56:	2201      	movs	r2, #1
 8005c58:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	33b0      	adds	r3, #176	; 0xb0
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005c90:	2302      	movs	r3, #2
 8005c92:	e018      	b.n	8005cc6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	7c1b      	ldrb	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10a      	bne.n	8005cb2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c9c:	4b0d      	ldr	r3, [pc, #52]	; (8005cd4 <USBD_CDC_Init+0x1e8>)
 8005c9e:	7819      	ldrb	r1, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f002 fb98 	bl	80083e0 <USBD_LL_PrepareReceive>
 8005cb0:	e008      	b.n	8005cc4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005cb2:	4b08      	ldr	r3, [pc, #32]	; (8005cd4 <USBD_CDC_Init+0x1e8>)
 8005cb4:	7819      	ldrb	r1, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cbc:	2340      	movs	r3, #64	; 0x40
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f002 fb8e 	bl	80083e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000093 	.word	0x20000093
 8005cd4:	20000094 	.word	0x20000094
 8005cd8:	20000095 	.word	0x20000095

08005cdc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005ce8:	4b3a      	ldr	r3, [pc, #232]	; (8005dd4 <USBD_CDC_DeInit+0xf8>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	4619      	mov	r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f002 faad 	bl	800824e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005cf4:	4b37      	ldr	r3, [pc, #220]	; (8005dd4 <USBD_CDC_DeInit+0xf8>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	f003 020f 	and.w	r2, r3, #15
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	3324      	adds	r3, #36	; 0x24
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005d0e:	4b32      	ldr	r3, [pc, #200]	; (8005dd8 <USBD_CDC_DeInit+0xfc>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	4619      	mov	r1, r3
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f002 fa9a 	bl	800824e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005d1a:	4b2f      	ldr	r3, [pc, #188]	; (8005dd8 <USBD_CDC_DeInit+0xfc>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	f003 020f 	and.w	r2, r3, #15
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d32:	2200      	movs	r2, #0
 8005d34:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005d36:	4b29      	ldr	r3, [pc, #164]	; (8005ddc <USBD_CDC_DeInit+0x100>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f002 fa86 	bl	800824e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005d42:	4b26      	ldr	r3, [pc, #152]	; (8005ddc <USBD_CDC_DeInit+0x100>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	f003 020f 	and.w	r2, r3, #15
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	440b      	add	r3, r1
 8005d56:	3324      	adds	r3, #36	; 0x24
 8005d58:	2200      	movs	r2, #0
 8005d5a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005d5c:	4b1f      	ldr	r3, [pc, #124]	; (8005ddc <USBD_CDC_DeInit+0x100>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	f003 020f 	and.w	r2, r3, #15
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	4613      	mov	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	3326      	adds	r3, #38	; 0x26
 8005d72:	2200      	movs	r2, #0
 8005d74:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	32b0      	adds	r2, #176	; 0xb0
 8005d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01f      	beq.n	8005dc8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	33b0      	adds	r3, #176	; 0xb0
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	32b0      	adds	r2, #176	; 0xb0
 8005da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f002 fb5a 	bl	8008464 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	32b0      	adds	r2, #176	; 0xb0
 8005dba:	2100      	movs	r1, #0
 8005dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000093 	.word	0x20000093
 8005dd8:	20000094 	.word	0x20000094
 8005ddc:	20000095 	.word	0x20000095

08005de0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	32b0      	adds	r2, #176	; 0xb0
 8005df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e0bf      	b.n	8005f90 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d050      	beq.n	8005ebe <USBD_CDC_Setup+0xde>
 8005e1c:	2b20      	cmp	r3, #32
 8005e1e:	f040 80af 	bne.w	8005f80 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	88db      	ldrh	r3, [r3, #6]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d03a      	beq.n	8005ea0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	b25b      	sxtb	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	da1b      	bge.n	8005e6c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	33b0      	adds	r3, #176	; 0xb0
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005e4a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	88d2      	ldrh	r2, [r2, #6]
 8005e50:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	88db      	ldrh	r3, [r3, #6]
 8005e56:	2b07      	cmp	r3, #7
 8005e58:	bf28      	it	cs
 8005e5a:	2307      	movcs	r3, #7
 8005e5c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	89fa      	ldrh	r2, [r7, #14]
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f001 fd89 	bl	800797c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005e6a:	e090      	b.n	8005f8e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	785a      	ldrb	r2, [r3, #1]
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	88db      	ldrh	r3, [r3, #6]
 8005e7a:	2b3f      	cmp	r3, #63	; 0x3f
 8005e7c:	d803      	bhi.n	8005e86 <USBD_CDC_Setup+0xa6>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	88db      	ldrh	r3, [r3, #6]
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	e000      	b.n	8005e88 <USBD_CDC_Setup+0xa8>
 8005e86:	2240      	movs	r2, #64	; 0x40
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005e8e:	6939      	ldr	r1, [r7, #16]
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005e96:	461a      	mov	r2, r3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f001 fd9b 	bl	80079d4 <USBD_CtlPrepareRx>
      break;
 8005e9e:	e076      	b.n	8005f8e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	33b0      	adds	r3, #176	; 0xb0
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	7850      	ldrb	r0, [r2, #1]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	4798      	blx	r3
      break;
 8005ebc:	e067      	b.n	8005f8e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	785b      	ldrb	r3, [r3, #1]
 8005ec2:	2b0b      	cmp	r3, #11
 8005ec4:	d851      	bhi.n	8005f6a <USBD_CDC_Setup+0x18a>
 8005ec6:	a201      	add	r2, pc, #4	; (adr r2, 8005ecc <USBD_CDC_Setup+0xec>)
 8005ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ecc:	08005efd 	.word	0x08005efd
 8005ed0:	08005f79 	.word	0x08005f79
 8005ed4:	08005f6b 	.word	0x08005f6b
 8005ed8:	08005f6b 	.word	0x08005f6b
 8005edc:	08005f6b 	.word	0x08005f6b
 8005ee0:	08005f6b 	.word	0x08005f6b
 8005ee4:	08005f6b 	.word	0x08005f6b
 8005ee8:	08005f6b 	.word	0x08005f6b
 8005eec:	08005f6b 	.word	0x08005f6b
 8005ef0:	08005f6b 	.word	0x08005f6b
 8005ef4:	08005f27 	.word	0x08005f27
 8005ef8:	08005f51 	.word	0x08005f51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b03      	cmp	r3, #3
 8005f06:	d107      	bne.n	8005f18 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005f08:	f107 030a 	add.w	r3, r7, #10
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f001 fd33 	bl	800797c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f16:	e032      	b.n	8005f7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 fcbd 	bl	800789a <USBD_CtlError>
            ret = USBD_FAIL;
 8005f20:	2303      	movs	r3, #3
 8005f22:	75fb      	strb	r3, [r7, #23]
          break;
 8005f24:	e02b      	b.n	8005f7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d107      	bne.n	8005f42 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005f32:	f107 030d 	add.w	r3, r7, #13
 8005f36:	2201      	movs	r2, #1
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f001 fd1e 	bl	800797c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f40:	e01d      	b.n	8005f7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005f42:	6839      	ldr	r1, [r7, #0]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 fca8 	bl	800789a <USBD_CtlError>
            ret = USBD_FAIL;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f4e:	e016      	b.n	8005f7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d00f      	beq.n	8005f7c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f001 fc9b 	bl	800789a <USBD_CtlError>
            ret = USBD_FAIL;
 8005f64:	2303      	movs	r3, #3
 8005f66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005f68:	e008      	b.n	8005f7c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 fc94 	bl	800789a <USBD_CtlError>
          ret = USBD_FAIL;
 8005f72:	2303      	movs	r3, #3
 8005f74:	75fb      	strb	r3, [r7, #23]
          break;
 8005f76:	e002      	b.n	8005f7e <USBD_CDC_Setup+0x19e>
          break;
 8005f78:	bf00      	nop
 8005f7a:	e008      	b.n	8005f8e <USBD_CDC_Setup+0x1ae>
          break;
 8005f7c:	bf00      	nop
      }
      break;
 8005f7e:	e006      	b.n	8005f8e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f001 fc89 	bl	800789a <USBD_CtlError>
      ret = USBD_FAIL;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f8c:	bf00      	nop
  }

  return (uint8_t)ret;
 8005f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005faa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	32b0      	adds	r2, #176	; 0xb0
 8005fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e065      	b.n	800608e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	32b0      	adds	r2, #176	; 0xb0
 8005fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005fd2:	78fb      	ldrb	r3, [r7, #3]
 8005fd4:	f003 020f 	and.w	r2, r3, #15
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	440b      	add	r3, r1
 8005fe4:	3318      	adds	r3, #24
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d02f      	beq.n	800604c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005fec:	78fb      	ldrb	r3, [r7, #3]
 8005fee:	f003 020f 	and.w	r2, r3, #15
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	3318      	adds	r3, #24
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	78fb      	ldrb	r3, [r7, #3]
 8006004:	f003 010f 	and.w	r1, r3, #15
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	460b      	mov	r3, r1
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	440b      	add	r3, r1
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4403      	add	r3, r0
 8006014:	3348      	adds	r3, #72	; 0x48
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	fbb2 f1f3 	udiv	r1, r2, r3
 800601c:	fb01 f303 	mul.w	r3, r1, r3
 8006020:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006022:	2b00      	cmp	r3, #0
 8006024:	d112      	bne.n	800604c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006026:	78fb      	ldrb	r3, [r7, #3]
 8006028:	f003 020f 	and.w	r2, r3, #15
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	440b      	add	r3, r1
 8006038:	3318      	adds	r3, #24
 800603a:	2200      	movs	r2, #0
 800603c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800603e:	78f9      	ldrb	r1, [r7, #3]
 8006040:	2300      	movs	r3, #0
 8006042:	2200      	movs	r2, #0
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f002 f9aa 	bl	800839e <USBD_LL_Transmit>
 800604a:	e01f      	b.n	800608c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2200      	movs	r2, #0
 8006050:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	33b0      	adds	r3, #176	; 0xb0
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d010      	beq.n	800608c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	33b0      	adds	r3, #176	; 0xb0
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006088:	78fa      	ldrb	r2, [r7, #3]
 800608a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	460b      	mov	r3, r1
 80060a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	32b0      	adds	r2, #176	; 0xb0
 80060ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	32b0      	adds	r2, #176	; 0xb0
 80060bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e01a      	b.n	80060fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80060c8:	78fb      	ldrb	r3, [r7, #3]
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f002 f9a8 	bl	8008422 <USBD_LL_GetRxDataSize>
 80060d2:	4602      	mov	r2, r0
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	33b0      	adds	r3, #176	; 0xb0
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80060f8:	4611      	mov	r1, r2
 80060fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	32b0      	adds	r2, #176	; 0xb0
 8006118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800611c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006124:	2303      	movs	r3, #3
 8006126:	e025      	b.n	8006174 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	33b0      	adds	r3, #176	; 0xb0
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01a      	beq.n	8006172 <USBD_CDC_EP0_RxReady+0x6c>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006142:	2bff      	cmp	r3, #255	; 0xff
 8006144:	d015      	beq.n	8006172 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	33b0      	adds	r3, #176	; 0xb0
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800615e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006166:	b292      	uxth	r2, r2
 8006168:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	22ff      	movs	r2, #255	; 0xff
 800616e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006184:	2182      	movs	r1, #130	; 0x82
 8006186:	4818      	ldr	r0, [pc, #96]	; (80061e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006188:	f000 fd4f 	bl	8006c2a <USBD_GetEpDesc>
 800618c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800618e:	2101      	movs	r1, #1
 8006190:	4815      	ldr	r0, [pc, #84]	; (80061e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006192:	f000 fd4a 	bl	8006c2a <USBD_GetEpDesc>
 8006196:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006198:	2181      	movs	r1, #129	; 0x81
 800619a:	4813      	ldr	r0, [pc, #76]	; (80061e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800619c:	f000 fd45 	bl	8006c2a <USBD_GetEpDesc>
 80061a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	2210      	movs	r2, #16
 80061ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d006      	beq.n	80061c2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061bc:	711a      	strb	r2, [r3, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d006      	beq.n	80061d6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061d0:	711a      	strb	r2, [r3, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2243      	movs	r2, #67	; 0x43
 80061da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80061dc:	4b02      	ldr	r3, [pc, #8]	; (80061e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000050 	.word	0x20000050

080061ec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80061f4:	2182      	movs	r1, #130	; 0x82
 80061f6:	4818      	ldr	r0, [pc, #96]	; (8006258 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80061f8:	f000 fd17 	bl	8006c2a <USBD_GetEpDesc>
 80061fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80061fe:	2101      	movs	r1, #1
 8006200:	4815      	ldr	r0, [pc, #84]	; (8006258 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006202:	f000 fd12 	bl	8006c2a <USBD_GetEpDesc>
 8006206:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006208:	2181      	movs	r1, #129	; 0x81
 800620a:	4813      	ldr	r0, [pc, #76]	; (8006258 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800620c:	f000 fd0d 	bl	8006c2a <USBD_GetEpDesc>
 8006210:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2210      	movs	r2, #16
 800621c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d006      	beq.n	8006232 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	2200      	movs	r2, #0
 8006228:	711a      	strb	r2, [r3, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f042 0202 	orr.w	r2, r2, #2
 8006230:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d006      	beq.n	8006246 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	711a      	strb	r2, [r3, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f042 0202 	orr.w	r2, r2, #2
 8006244:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2243      	movs	r2, #67	; 0x43
 800624a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800624c:	4b02      	ldr	r3, [pc, #8]	; (8006258 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800624e:	4618      	mov	r0, r3
 8006250:	3718      	adds	r7, #24
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20000050 	.word	0x20000050

0800625c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006264:	2182      	movs	r1, #130	; 0x82
 8006266:	4818      	ldr	r0, [pc, #96]	; (80062c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006268:	f000 fcdf 	bl	8006c2a <USBD_GetEpDesc>
 800626c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800626e:	2101      	movs	r1, #1
 8006270:	4815      	ldr	r0, [pc, #84]	; (80062c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006272:	f000 fcda 	bl	8006c2a <USBD_GetEpDesc>
 8006276:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006278:	2181      	movs	r1, #129	; 0x81
 800627a:	4813      	ldr	r0, [pc, #76]	; (80062c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800627c:	f000 fcd5 	bl	8006c2a <USBD_GetEpDesc>
 8006280:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2210      	movs	r2, #16
 800628c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d006      	beq.n	80062a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	2200      	movs	r2, #0
 8006298:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800629c:	711a      	strb	r2, [r3, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d006      	beq.n	80062b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062b0:	711a      	strb	r2, [r3, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2243      	movs	r2, #67	; 0x43
 80062ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80062bc:	4b02      	ldr	r3, [pc, #8]	; (80062c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20000050 	.word	0x20000050

080062cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	220a      	movs	r2, #10
 80062d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80062da:	4b03      	ldr	r3, [pc, #12]	; (80062e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80062dc:	4618      	mov	r0, r3
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	2000000c 	.word	0x2000000c

080062ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e009      	b.n	8006314 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	33b0      	adds	r3, #176	; 0xb0
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	32b0      	adds	r2, #176	; 0xb0
 8006336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800633a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006342:	2303      	movs	r3, #3
 8006344:	e008      	b.n	8006358 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	371c      	adds	r7, #28
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	32b0      	adds	r2, #176	; 0xb0
 8006378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800637c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006384:	2303      	movs	r3, #3
 8006386:	e004      	b.n	8006392 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
	...

080063a0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	32b0      	adds	r2, #176	; 0xb0
 80063b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80063b8:	2301      	movs	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	32b0      	adds	r2, #176	; 0xb0
 80063c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e025      	b.n	800641e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d11f      	bne.n	800641c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2201      	movs	r2, #1
 80063e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80063e4:	4b10      	ldr	r3, [pc, #64]	; (8006428 <USBD_CDC_TransmitPacket+0x88>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	f003 020f 	and.w	r2, r3, #15
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4403      	add	r3, r0
 80063fe:	3318      	adds	r3, #24
 8006400:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006402:	4b09      	ldr	r3, [pc, #36]	; (8006428 <USBD_CDC_TransmitPacket+0x88>)
 8006404:	7819      	ldrb	r1, [r3, #0]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 ffc3 	bl	800839e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800641c:	7bfb      	ldrb	r3, [r7, #15]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20000093 	.word	0x20000093

0800642c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	32b0      	adds	r2, #176	; 0xb0
 800643e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006442:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	32b0      	adds	r2, #176	; 0xb0
 800644e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006456:	2303      	movs	r3, #3
 8006458:	e018      	b.n	800648c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	7c1b      	ldrb	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10a      	bne.n	8006478 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006462:	4b0c      	ldr	r3, [pc, #48]	; (8006494 <USBD_CDC_ReceivePacket+0x68>)
 8006464:	7819      	ldrb	r1, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800646c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f001 ffb5 	bl	80083e0 <USBD_LL_PrepareReceive>
 8006476:	e008      	b.n	800648a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006478:	4b06      	ldr	r3, [pc, #24]	; (8006494 <USBD_CDC_ReceivePacket+0x68>)
 800647a:	7819      	ldrb	r1, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006482:	2340      	movs	r3, #64	; 0x40
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f001 ffab 	bl	80083e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	20000094 	.word	0x20000094

08006498 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	4613      	mov	r3, r2
 80064a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e01f      	b.n	80064f0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	79fa      	ldrb	r2, [r7, #7]
 80064e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f001 fe25 	bl	8008134 <USBD_LL_Init>
 80064ea:	4603      	mov	r3, r0
 80064ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 80064ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800650c:	2303      	movs	r3, #3
 800650e:	e025      	b.n	800655c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	32ae      	adds	r2, #174	; 0xae
 8006522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00f      	beq.n	800654c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	32ae      	adds	r2, #174	; 0xae
 8006536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	f107 020e 	add.w	r2, r7, #14
 8006540:	4610      	mov	r0, r2
 8006542:	4798      	blx	r3
 8006544:	4602      	mov	r2, r0
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f001 fe2d 	bl	80081cc <USBD_LL_Start>
 8006572:	4603      	mov	r3, r0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006584:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006586:	4618      	mov	r0, r3
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	460b      	mov	r3, r1
 800659c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d009      	beq.n	80065c0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	78fa      	ldrb	r2, [r7, #3]
 80065b6:	4611      	mov	r1, r2
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	4798      	blx	r3
 80065bc:	4603      	mov	r3, r0
 80065be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	460b      	mov	r3, r1
 80065d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	78fa      	ldrb	r2, [r7, #3]
 80065e4:	4611      	mov	r1, r2
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4798      	blx	r3
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80065f0:	2303      	movs	r3, #3
 80065f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	4618      	mov	r0, r3
 8006612:	f001 f908 	bl	8007826 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006624:	461a      	mov	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006632:	f003 031f 	and.w	r3, r3, #31
 8006636:	2b02      	cmp	r3, #2
 8006638:	d01a      	beq.n	8006670 <USBD_LL_SetupStage+0x72>
 800663a:	2b02      	cmp	r3, #2
 800663c:	d822      	bhi.n	8006684 <USBD_LL_SetupStage+0x86>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <USBD_LL_SetupStage+0x4a>
 8006642:	2b01      	cmp	r3, #1
 8006644:	d00a      	beq.n	800665c <USBD_LL_SetupStage+0x5e>
 8006646:	e01d      	b.n	8006684 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fb5f 	bl	8006d14 <USBD_StdDevReq>
 8006656:	4603      	mov	r3, r0
 8006658:	73fb      	strb	r3, [r7, #15]
      break;
 800665a:	e020      	b.n	800669e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fbc7 	bl	8006df8 <USBD_StdItfReq>
 800666a:	4603      	mov	r3, r0
 800666c:	73fb      	strb	r3, [r7, #15]
      break;
 800666e:	e016      	b.n	800669e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fc29 	bl	8006ed0 <USBD_StdEPReq>
 800667e:	4603      	mov	r3, r0
 8006680:	73fb      	strb	r3, [r7, #15]
      break;
 8006682:	e00c      	b.n	800669e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800668a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800668e:	b2db      	uxtb	r3, r3
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 fdfa 	bl	800828c <USBD_LL_StallEP>
 8006698:	4603      	mov	r3, r0
 800669a:	73fb      	strb	r3, [r7, #15]
      break;
 800669c:	bf00      	nop
  }

  return ret;
 800669e:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	460b      	mov	r3, r1
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80066ba:	7afb      	ldrb	r3, [r7, #11]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d16e      	bne.n	800679e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80066c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	f040 8098 	bne.w	8006804 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d913      	bls.n	8006708 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	1ad2      	subs	r2, r2, r3
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	4293      	cmp	r3, r2
 80066f8:	bf28      	it	cs
 80066fa:	4613      	movcs	r3, r2
 80066fc:	461a      	mov	r2, r3
 80066fe:	6879      	ldr	r1, [r7, #4]
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f001 f984 	bl	8007a0e <USBD_CtlContinueRx>
 8006706:	e07d      	b.n	8006804 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800670e:	f003 031f 	and.w	r3, r3, #31
 8006712:	2b02      	cmp	r3, #2
 8006714:	d014      	beq.n	8006740 <USBD_LL_DataOutStage+0x98>
 8006716:	2b02      	cmp	r3, #2
 8006718:	d81d      	bhi.n	8006756 <USBD_LL_DataOutStage+0xae>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <USBD_LL_DataOutStage+0x7c>
 800671e:	2b01      	cmp	r3, #1
 8006720:	d003      	beq.n	800672a <USBD_LL_DataOutStage+0x82>
 8006722:	e018      	b.n	8006756 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	75bb      	strb	r3, [r7, #22]
            break;
 8006728:	e018      	b.n	800675c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006730:	b2db      	uxtb	r3, r3
 8006732:	4619      	mov	r1, r3
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 fa5e 	bl	8006bf6 <USBD_CoreFindIF>
 800673a:	4603      	mov	r3, r0
 800673c:	75bb      	strb	r3, [r7, #22]
            break;
 800673e:	e00d      	b.n	800675c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006746:	b2db      	uxtb	r3, r3
 8006748:	4619      	mov	r1, r3
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 fa60 	bl	8006c10 <USBD_CoreFindEP>
 8006750:	4603      	mov	r3, r0
 8006752:	75bb      	strb	r3, [r7, #22]
            break;
 8006754:	e002      	b.n	800675c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	75bb      	strb	r3, [r7, #22]
            break;
 800675a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800675c:	7dbb      	ldrb	r3, [r7, #22]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d119      	bne.n	8006796 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b03      	cmp	r3, #3
 800676c:	d113      	bne.n	8006796 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800676e:	7dba      	ldrb	r2, [r7, #22]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	32ae      	adds	r2, #174	; 0xae
 8006774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00b      	beq.n	8006796 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800677e:	7dba      	ldrb	r2, [r7, #22]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006786:	7dba      	ldrb	r2, [r7, #22]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	32ae      	adds	r2, #174	; 0xae
 800678c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f001 f94a 	bl	8007a30 <USBD_CtlSendStatus>
 800679c:	e032      	b.n	8006804 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800679e:	7afb      	ldrb	r3, [r7, #11]
 80067a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	4619      	mov	r1, r3
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 fa31 	bl	8006c10 <USBD_CoreFindEP>
 80067ae:	4603      	mov	r3, r0
 80067b0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067b2:	7dbb      	ldrb	r3, [r7, #22]
 80067b4:	2bff      	cmp	r3, #255	; 0xff
 80067b6:	d025      	beq.n	8006804 <USBD_LL_DataOutStage+0x15c>
 80067b8:	7dbb      	ldrb	r3, [r7, #22]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d122      	bne.n	8006804 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d117      	bne.n	80067fa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80067ca:	7dba      	ldrb	r2, [r7, #22]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	32ae      	adds	r2, #174	; 0xae
 80067d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00f      	beq.n	80067fa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80067da:	7dba      	ldrb	r2, [r7, #22]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80067e2:	7dba      	ldrb	r2, [r7, #22]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	32ae      	adds	r2, #174	; 0xae
 80067e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	7afa      	ldrb	r2, [r7, #11]
 80067f0:	4611      	mov	r1, r2
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	4798      	blx	r3
 80067f6:	4603      	mov	r3, r0
 80067f8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006800:	7dfb      	ldrb	r3, [r7, #23]
 8006802:	e000      	b.n	8006806 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b086      	sub	sp, #24
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	460b      	mov	r3, r1
 8006818:	607a      	str	r2, [r7, #4]
 800681a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800681c:	7afb      	ldrb	r3, [r7, #11]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d16f      	bne.n	8006902 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	3314      	adds	r3, #20
 8006826:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800682e:	2b02      	cmp	r3, #2
 8006830:	d15a      	bne.n	80068e8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	689a      	ldr	r2, [r3, #8]
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	429a      	cmp	r2, r3
 800683c:	d914      	bls.n	8006868 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	1ad2      	subs	r2, r2, r3
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	461a      	mov	r2, r3
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f001 f8ac 	bl	80079b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800685a:	2300      	movs	r3, #0
 800685c:	2200      	movs	r2, #0
 800685e:	2100      	movs	r1, #0
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f001 fdbd 	bl	80083e0 <USBD_LL_PrepareReceive>
 8006866:	e03f      	b.n	80068e8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	68da      	ldr	r2, [r3, #12]
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	429a      	cmp	r2, r3
 8006872:	d11c      	bne.n	80068ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800687c:	429a      	cmp	r2, r3
 800687e:	d316      	bcc.n	80068ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800688a:	429a      	cmp	r2, r3
 800688c:	d20f      	bcs.n	80068ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800688e:	2200      	movs	r2, #0
 8006890:	2100      	movs	r1, #0
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f001 f88d 	bl	80079b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068a0:	2300      	movs	r3, #0
 80068a2:	2200      	movs	r2, #0
 80068a4:	2100      	movs	r1, #0
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f001 fd9a 	bl	80083e0 <USBD_LL_PrepareReceive>
 80068ac:	e01c      	b.n	80068e8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d10f      	bne.n	80068da <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d009      	beq.n	80068da <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80068da:	2180      	movs	r1, #128	; 0x80
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f001 fcd5 	bl	800828c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f001 f8b7 	bl	8007a56 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d03a      	beq.n	8006968 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f7ff fe42 	bl	800657c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006900:	e032      	b.n	8006968 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006902:	7afb      	ldrb	r3, [r7, #11]
 8006904:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006908:	b2db      	uxtb	r3, r3
 800690a:	4619      	mov	r1, r3
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 f97f 	bl	8006c10 <USBD_CoreFindEP>
 8006912:	4603      	mov	r3, r0
 8006914:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006916:	7dfb      	ldrb	r3, [r7, #23]
 8006918:	2bff      	cmp	r3, #255	; 0xff
 800691a:	d025      	beq.n	8006968 <USBD_LL_DataInStage+0x15a>
 800691c:	7dfb      	ldrb	r3, [r7, #23]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d122      	bne.n	8006968 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b03      	cmp	r3, #3
 800692c:	d11c      	bne.n	8006968 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800692e:	7dfa      	ldrb	r2, [r7, #23]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	32ae      	adds	r2, #174	; 0xae
 8006934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d014      	beq.n	8006968 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800693e:	7dfa      	ldrb	r2, [r7, #23]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006946:	7dfa      	ldrb	r2, [r7, #23]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	32ae      	adds	r2, #174	; 0xae
 800694c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	7afa      	ldrb	r2, [r7, #11]
 8006954:	4611      	mov	r1, r2
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	4798      	blx	r3
 800695a:	4603      	mov	r3, r0
 800695c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800695e:	7dbb      	ldrb	r3, [r7, #22]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006964:	7dbb      	ldrb	r3, [r7, #22]
 8006966:	e000      	b.n	800696a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d014      	beq.n	80069d8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00e      	beq.n	80069d8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	6852      	ldr	r2, [r2, #4]
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	4611      	mov	r1, r2
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	4798      	blx	r3
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80069d4:	2303      	movs	r3, #3
 80069d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069d8:	2340      	movs	r3, #64	; 0x40
 80069da:	2200      	movs	r2, #0
 80069dc:	2100      	movs	r1, #0
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f001 fc0f 	bl	8008202 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2240      	movs	r2, #64	; 0x40
 80069f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069f4:	2340      	movs	r3, #64	; 0x40
 80069f6:	2200      	movs	r2, #0
 80069f8:	2180      	movs	r1, #128	; 0x80
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f001 fc01 	bl	8008202 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2240      	movs	r2, #64	; 0x40
 8006a0a:	621a      	str	r2, [r3, #32]

  return ret;
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	78fa      	ldrb	r2, [r7, #3]
 8006a26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2204      	movs	r2, #4
 8006a50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d106      	bne.n	8006a84 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b082      	sub	sp, #8
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b03      	cmp	r3, #3
 8006aa4:	d110      	bne.n	8006ac8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00b      	beq.n	8006ac8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d005      	beq.n	8006ac8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b082      	sub	sp, #8
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	460b      	mov	r3, r1
 8006adc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	32ae      	adds	r2, #174	; 0xae
 8006ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e01c      	b.n	8006b2e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d115      	bne.n	8006b2c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	32ae      	adds	r2, #174	; 0xae
 8006b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00b      	beq.n	8006b2c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	32ae      	adds	r2, #174	; 0xae
 8006b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	78fa      	ldrb	r2, [r7, #3]
 8006b26:	4611      	mov	r1, r2
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b082      	sub	sp, #8
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	32ae      	adds	r2, #174	; 0xae
 8006b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e01c      	b.n	8006b92 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d115      	bne.n	8006b90 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	32ae      	adds	r2, #174	; 0xae
 8006b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00b      	beq.n	8006b90 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	32ae      	adds	r2, #174	; 0xae
 8006b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b88:	78fa      	ldrb	r2, [r7, #3]
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00e      	beq.n	8006bec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	6852      	ldr	r2, [r2, #4]
 8006bda:	b2d2      	uxtb	r2, r2
 8006bdc:	4611      	mov	r1, r2
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	4798      	blx	r3
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006be8:	2303      	movs	r3, #3
 8006bea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006c02:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006c1c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b086      	sub	sp, #24
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	460b      	mov	r3, r1
 8006c34:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	885b      	ldrh	r3, [r3, #2]
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d920      	bls.n	8006c94 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006c5a:	e013      	b.n	8006c84 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006c5c:	f107 030a 	add.w	r3, r7, #10
 8006c60:	4619      	mov	r1, r3
 8006c62:	6978      	ldr	r0, [r7, #20]
 8006c64:	f000 f81b 	bl	8006c9e <USBD_GetNextDesc>
 8006c68:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	785b      	ldrb	r3, [r3, #1]
 8006c6e:	2b05      	cmp	r3, #5
 8006c70:	d108      	bne.n	8006c84 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	789b      	ldrb	r3, [r3, #2]
 8006c7a:	78fa      	ldrb	r2, [r7, #3]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d008      	beq.n	8006c92 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006c80:	2300      	movs	r3, #0
 8006c82:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	885b      	ldrh	r3, [r3, #2]
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	897b      	ldrh	r3, [r7, #10]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d8e5      	bhi.n	8006c5c <USBD_GetEpDesc+0x32>
 8006c90:	e000      	b.n	8006c94 <USBD_GetEpDesc+0x6a>
          break;
 8006c92:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006c94:	693b      	ldr	r3, [r7, #16]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b085      	sub	sp, #20
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	881a      	ldrh	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	4413      	add	r3, r2
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006cca:	68fb      	ldr	r3, [r7, #12]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	3301      	adds	r3, #1
 8006cee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006cf6:	8a3b      	ldrh	r3, [r7, #16]
 8006cf8:	021b      	lsls	r3, r3, #8
 8006cfa:	b21a      	sxth	r2, r3
 8006cfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	b21b      	sxth	r3, r3
 8006d04:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006d06:	89fb      	ldrh	r3, [r7, #14]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	371c      	adds	r7, #28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d2a:	2b40      	cmp	r3, #64	; 0x40
 8006d2c:	d005      	beq.n	8006d3a <USBD_StdDevReq+0x26>
 8006d2e:	2b40      	cmp	r3, #64	; 0x40
 8006d30:	d857      	bhi.n	8006de2 <USBD_StdDevReq+0xce>
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00f      	beq.n	8006d56 <USBD_StdDevReq+0x42>
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	d153      	bne.n	8006de2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	32ae      	adds	r2, #174	; 0xae
 8006d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	4798      	blx	r3
 8006d50:	4603      	mov	r3, r0
 8006d52:	73fb      	strb	r3, [r7, #15]
      break;
 8006d54:	e04a      	b.n	8006dec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	785b      	ldrb	r3, [r3, #1]
 8006d5a:	2b09      	cmp	r3, #9
 8006d5c:	d83b      	bhi.n	8006dd6 <USBD_StdDevReq+0xc2>
 8006d5e:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <USBD_StdDevReq+0x50>)
 8006d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d64:	08006db9 	.word	0x08006db9
 8006d68:	08006dcd 	.word	0x08006dcd
 8006d6c:	08006dd7 	.word	0x08006dd7
 8006d70:	08006dc3 	.word	0x08006dc3
 8006d74:	08006dd7 	.word	0x08006dd7
 8006d78:	08006d97 	.word	0x08006d97
 8006d7c:	08006d8d 	.word	0x08006d8d
 8006d80:	08006dd7 	.word	0x08006dd7
 8006d84:	08006daf 	.word	0x08006daf
 8006d88:	08006da1 	.word	0x08006da1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fa3c 	bl	800720c <USBD_GetDescriptor>
          break;
 8006d94:	e024      	b.n	8006de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fba1 	bl	80074e0 <USBD_SetAddress>
          break;
 8006d9e:	e01f      	b.n	8006de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006da0:	6839      	ldr	r1, [r7, #0]
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fbe0 	bl	8007568 <USBD_SetConfig>
 8006da8:	4603      	mov	r3, r0
 8006daa:	73fb      	strb	r3, [r7, #15]
          break;
 8006dac:	e018      	b.n	8006de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fc83 	bl	80076bc <USBD_GetConfig>
          break;
 8006db6:	e013      	b.n	8006de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fcb4 	bl	8007728 <USBD_GetStatus>
          break;
 8006dc0:	e00e      	b.n	8006de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fce3 	bl	8007790 <USBD_SetFeature>
          break;
 8006dca:	e009      	b.n	8006de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fd07 	bl	80077e2 <USBD_ClrFeature>
          break;
 8006dd4:	e004      	b.n	8006de0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fd5e 	bl	800789a <USBD_CtlError>
          break;
 8006dde:	bf00      	nop
      }
      break;
 8006de0:	e004      	b.n	8006dec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fd58 	bl	800789a <USBD_CtlError>
      break;
 8006dea:	bf00      	nop
  }

  return ret;
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop

08006df8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e0e:	2b40      	cmp	r3, #64	; 0x40
 8006e10:	d005      	beq.n	8006e1e <USBD_StdItfReq+0x26>
 8006e12:	2b40      	cmp	r3, #64	; 0x40
 8006e14:	d852      	bhi.n	8006ebc <USBD_StdItfReq+0xc4>
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <USBD_StdItfReq+0x26>
 8006e1a:	2b20      	cmp	r3, #32
 8006e1c:	d14e      	bne.n	8006ebc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	3b01      	subs	r3, #1
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d840      	bhi.n	8006eae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	889b      	ldrh	r3, [r3, #4]
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d836      	bhi.n	8006ea4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	889b      	ldrh	r3, [r3, #4]
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff fed9 	bl	8006bf6 <USBD_CoreFindIF>
 8006e44:	4603      	mov	r3, r0
 8006e46:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e48:	7bbb      	ldrb	r3, [r7, #14]
 8006e4a:	2bff      	cmp	r3, #255	; 0xff
 8006e4c:	d01d      	beq.n	8006e8a <USBD_StdItfReq+0x92>
 8006e4e:	7bbb      	ldrb	r3, [r7, #14]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d11a      	bne.n	8006e8a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006e54:	7bba      	ldrb	r2, [r7, #14]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	32ae      	adds	r2, #174	; 0xae
 8006e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00f      	beq.n	8006e84 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006e64:	7bba      	ldrb	r2, [r7, #14]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e6c:	7bba      	ldrb	r2, [r7, #14]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	32ae      	adds	r2, #174	; 0xae
 8006e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	4798      	blx	r3
 8006e7e:	4603      	mov	r3, r0
 8006e80:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006e82:	e004      	b.n	8006e8e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006e84:	2303      	movs	r3, #3
 8006e86:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006e88:	e001      	b.n	8006e8e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	88db      	ldrh	r3, [r3, #6]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d110      	bne.n	8006eb8 <USBD_StdItfReq+0xc0>
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10d      	bne.n	8006eb8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fdc7 	bl	8007a30 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006ea2:	e009      	b.n	8006eb8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fcf7 	bl	800789a <USBD_CtlError>
          break;
 8006eac:	e004      	b.n	8006eb8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fcf2 	bl	800789a <USBD_CtlError>
          break;
 8006eb6:	e000      	b.n	8006eba <USBD_StdItfReq+0xc2>
          break;
 8006eb8:	bf00      	nop
      }
      break;
 8006eba:	e004      	b.n	8006ec6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fceb 	bl	800789a <USBD_CtlError>
      break;
 8006ec4:	bf00      	nop
  }

  return ret;
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	889b      	ldrh	r3, [r3, #4]
 8006ee2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eec:	2b40      	cmp	r3, #64	; 0x40
 8006eee:	d007      	beq.n	8006f00 <USBD_StdEPReq+0x30>
 8006ef0:	2b40      	cmp	r3, #64	; 0x40
 8006ef2:	f200 817f 	bhi.w	80071f4 <USBD_StdEPReq+0x324>
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d02a      	beq.n	8006f50 <USBD_StdEPReq+0x80>
 8006efa:	2b20      	cmp	r3, #32
 8006efc:	f040 817a 	bne.w	80071f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7ff fe83 	bl	8006c10 <USBD_CoreFindEP>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f0e:	7b7b      	ldrb	r3, [r7, #13]
 8006f10:	2bff      	cmp	r3, #255	; 0xff
 8006f12:	f000 8174 	beq.w	80071fe <USBD_StdEPReq+0x32e>
 8006f16:	7b7b      	ldrb	r3, [r7, #13]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f040 8170 	bne.w	80071fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006f1e:	7b7a      	ldrb	r2, [r7, #13]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006f26:	7b7a      	ldrb	r2, [r7, #13]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	32ae      	adds	r2, #174	; 0xae
 8006f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 8163 	beq.w	80071fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006f38:	7b7a      	ldrb	r2, [r7, #13]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	32ae      	adds	r2, #174	; 0xae
 8006f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	4798      	blx	r3
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f4e:	e156      	b.n	80071fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	785b      	ldrb	r3, [r3, #1]
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d008      	beq.n	8006f6a <USBD_StdEPReq+0x9a>
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	f300 8145 	bgt.w	80071e8 <USBD_StdEPReq+0x318>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f000 809b 	beq.w	800709a <USBD_StdEPReq+0x1ca>
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d03c      	beq.n	8006fe2 <USBD_StdEPReq+0x112>
 8006f68:	e13e      	b.n	80071e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d002      	beq.n	8006f7c <USBD_StdEPReq+0xac>
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d016      	beq.n	8006fa8 <USBD_StdEPReq+0xd8>
 8006f7a:	e02c      	b.n	8006fd6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00d      	beq.n	8006f9e <USBD_StdEPReq+0xce>
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	2b80      	cmp	r3, #128	; 0x80
 8006f86:	d00a      	beq.n	8006f9e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f88:	7bbb      	ldrb	r3, [r7, #14]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 f97d 	bl	800828c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f92:	2180      	movs	r1, #128	; 0x80
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 f979 	bl	800828c <USBD_LL_StallEP>
 8006f9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f9c:	e020      	b.n	8006fe0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fc7a 	bl	800789a <USBD_CtlError>
              break;
 8006fa6:	e01b      	b.n	8006fe0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	885b      	ldrh	r3, [r3, #2]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10e      	bne.n	8006fce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006fb0:	7bbb      	ldrb	r3, [r7, #14]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00b      	beq.n	8006fce <USBD_StdEPReq+0xfe>
 8006fb6:	7bbb      	ldrb	r3, [r7, #14]
 8006fb8:	2b80      	cmp	r3, #128	; 0x80
 8006fba:	d008      	beq.n	8006fce <USBD_StdEPReq+0xfe>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	88db      	ldrh	r3, [r3, #6]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d104      	bne.n	8006fce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 f95f 	bl	800828c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fd2e 	bl	8007a30 <USBD_CtlSendStatus>

              break;
 8006fd4:	e004      	b.n	8006fe0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fc5e 	bl	800789a <USBD_CtlError>
              break;
 8006fde:	bf00      	nop
          }
          break;
 8006fe0:	e107      	b.n	80071f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d002      	beq.n	8006ff4 <USBD_StdEPReq+0x124>
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d016      	beq.n	8007020 <USBD_StdEPReq+0x150>
 8006ff2:	e04b      	b.n	800708c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00d      	beq.n	8007016 <USBD_StdEPReq+0x146>
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	2b80      	cmp	r3, #128	; 0x80
 8006ffe:	d00a      	beq.n	8007016 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 f941 	bl	800828c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800700a:	2180      	movs	r1, #128	; 0x80
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 f93d 	bl	800828c <USBD_LL_StallEP>
 8007012:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007014:	e040      	b.n	8007098 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fc3e 	bl	800789a <USBD_CtlError>
              break;
 800701e:	e03b      	b.n	8007098 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	885b      	ldrh	r3, [r3, #2]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d136      	bne.n	8007096 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007028:	7bbb      	ldrb	r3, [r7, #14]
 800702a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800702e:	2b00      	cmp	r3, #0
 8007030:	d004      	beq.n	800703c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007032:	7bbb      	ldrb	r3, [r7, #14]
 8007034:	4619      	mov	r1, r3
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f001 f947 	bl	80082ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fcf7 	bl	8007a30 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007042:	7bbb      	ldrb	r3, [r7, #14]
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff fde2 	bl	8006c10 <USBD_CoreFindEP>
 800704c:	4603      	mov	r3, r0
 800704e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007050:	7b7b      	ldrb	r3, [r7, #13]
 8007052:	2bff      	cmp	r3, #255	; 0xff
 8007054:	d01f      	beq.n	8007096 <USBD_StdEPReq+0x1c6>
 8007056:	7b7b      	ldrb	r3, [r7, #13]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d11c      	bne.n	8007096 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800705c:	7b7a      	ldrb	r2, [r7, #13]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007064:	7b7a      	ldrb	r2, [r7, #13]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	32ae      	adds	r2, #174	; 0xae
 800706a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d010      	beq.n	8007096 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007074:	7b7a      	ldrb	r2, [r7, #13]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	32ae      	adds	r2, #174	; 0xae
 800707a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	4798      	blx	r3
 8007086:	4603      	mov	r3, r0
 8007088:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800708a:	e004      	b.n	8007096 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fc03 	bl	800789a <USBD_CtlError>
              break;
 8007094:	e000      	b.n	8007098 <USBD_StdEPReq+0x1c8>
              break;
 8007096:	bf00      	nop
          }
          break;
 8007098:	e0ab      	b.n	80071f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d002      	beq.n	80070ac <USBD_StdEPReq+0x1dc>
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d032      	beq.n	8007110 <USBD_StdEPReq+0x240>
 80070aa:	e097      	b.n	80071dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ac:	7bbb      	ldrb	r3, [r7, #14]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d007      	beq.n	80070c2 <USBD_StdEPReq+0x1f2>
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
 80070b4:	2b80      	cmp	r3, #128	; 0x80
 80070b6:	d004      	beq.n	80070c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fbed 	bl	800789a <USBD_CtlError>
                break;
 80070c0:	e091      	b.n	80071e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	da0b      	bge.n	80070e2 <USBD_StdEPReq+0x212>
 80070ca:	7bbb      	ldrb	r3, [r7, #14]
 80070cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070d0:	4613      	mov	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	3310      	adds	r3, #16
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	4413      	add	r3, r2
 80070de:	3304      	adds	r3, #4
 80070e0:	e00b      	b.n	80070fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070e8:	4613      	mov	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	4413      	add	r3, r2
 80070f8:	3304      	adds	r3, #4
 80070fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2202      	movs	r2, #2
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fc37 	bl	800797c <USBD_CtlSendData>
              break;
 800710e:	e06a      	b.n	80071e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007114:	2b00      	cmp	r3, #0
 8007116:	da11      	bge.n	800713c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007118:	7bbb      	ldrb	r3, [r7, #14]
 800711a:	f003 020f 	and.w	r2, r3, #15
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	4613      	mov	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	440b      	add	r3, r1
 800712a:	3324      	adds	r3, #36	; 0x24
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d117      	bne.n	8007162 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fbb0 	bl	800789a <USBD_CtlError>
                  break;
 800713a:	e054      	b.n	80071e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800713c:	7bbb      	ldrb	r3, [r7, #14]
 800713e:	f003 020f 	and.w	r2, r3, #15
 8007142:	6879      	ldr	r1, [r7, #4]
 8007144:	4613      	mov	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	440b      	add	r3, r1
 800714e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d104      	bne.n	8007162 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fb9d 	bl	800789a <USBD_CtlError>
                  break;
 8007160:	e041      	b.n	80071e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007162:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007166:	2b00      	cmp	r3, #0
 8007168:	da0b      	bge.n	8007182 <USBD_StdEPReq+0x2b2>
 800716a:	7bbb      	ldrb	r3, [r7, #14]
 800716c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007170:	4613      	mov	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	3310      	adds	r3, #16
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	4413      	add	r3, r2
 800717e:	3304      	adds	r3, #4
 8007180:	e00b      	b.n	800719a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007188:	4613      	mov	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	4413      	add	r3, r2
 8007198:	3304      	adds	r3, #4
 800719a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800719c:	7bbb      	ldrb	r3, [r7, #14]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <USBD_StdEPReq+0x2d8>
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	2b80      	cmp	r3, #128	; 0x80
 80071a6:	d103      	bne.n	80071b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	e00e      	b.n	80071ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 f8a7 	bl	8008308 <USBD_LL_IsStallEP>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2201      	movs	r2, #1
 80071c4:	601a      	str	r2, [r3, #0]
 80071c6:	e002      	b.n	80071ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2202      	movs	r2, #2
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fbd1 	bl	800797c <USBD_CtlSendData>
              break;
 80071da:	e004      	b.n	80071e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fb5b 	bl	800789a <USBD_CtlError>
              break;
 80071e4:	bf00      	nop
          }
          break;
 80071e6:	e004      	b.n	80071f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fb55 	bl	800789a <USBD_CtlError>
          break;
 80071f0:	bf00      	nop
      }
      break;
 80071f2:	e005      	b.n	8007200 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fb4f 	bl	800789a <USBD_CtlError>
      break;
 80071fc:	e000      	b.n	8007200 <USBD_StdEPReq+0x330>
      break;
 80071fe:	bf00      	nop
  }

  return ret;
 8007200:	7bfb      	ldrb	r3, [r7, #15]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
	...

0800720c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007216:	2300      	movs	r3, #0
 8007218:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	885b      	ldrh	r3, [r3, #2]
 8007226:	0a1b      	lsrs	r3, r3, #8
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b01      	subs	r3, #1
 800722c:	2b06      	cmp	r3, #6
 800722e:	f200 8128 	bhi.w	8007482 <USBD_GetDescriptor+0x276>
 8007232:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <USBD_GetDescriptor+0x2c>)
 8007234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007238:	08007255 	.word	0x08007255
 800723c:	0800726d 	.word	0x0800726d
 8007240:	080072ad 	.word	0x080072ad
 8007244:	08007483 	.word	0x08007483
 8007248:	08007483 	.word	0x08007483
 800724c:	08007423 	.word	0x08007423
 8007250:	0800744f 	.word	0x0800744f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	7c12      	ldrb	r2, [r2, #16]
 8007260:	f107 0108 	add.w	r1, r7, #8
 8007264:	4610      	mov	r0, r2
 8007266:	4798      	blx	r3
 8007268:	60f8      	str	r0, [r7, #12]
      break;
 800726a:	e112      	b.n	8007492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	7c1b      	ldrb	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10d      	bne.n	8007290 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727c:	f107 0208 	add.w	r2, r7, #8
 8007280:	4610      	mov	r0, r2
 8007282:	4798      	blx	r3
 8007284:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3301      	adds	r3, #1
 800728a:	2202      	movs	r2, #2
 800728c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800728e:	e100      	b.n	8007492 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007298:	f107 0208 	add.w	r2, r7, #8
 800729c:	4610      	mov	r0, r2
 800729e:	4798      	blx	r3
 80072a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3301      	adds	r3, #1
 80072a6:	2202      	movs	r2, #2
 80072a8:	701a      	strb	r2, [r3, #0]
      break;
 80072aa:	e0f2      	b.n	8007492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	885b      	ldrh	r3, [r3, #2]
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b05      	cmp	r3, #5
 80072b4:	f200 80ac 	bhi.w	8007410 <USBD_GetDescriptor+0x204>
 80072b8:	a201      	add	r2, pc, #4	; (adr r2, 80072c0 <USBD_GetDescriptor+0xb4>)
 80072ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072be:	bf00      	nop
 80072c0:	080072d9 	.word	0x080072d9
 80072c4:	0800730d 	.word	0x0800730d
 80072c8:	08007341 	.word	0x08007341
 80072cc:	08007375 	.word	0x08007375
 80072d0:	080073a9 	.word	0x080073a9
 80072d4:	080073dd 	.word	0x080073dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00b      	beq.n	80072fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	7c12      	ldrb	r2, [r2, #16]
 80072f0:	f107 0108 	add.w	r1, r7, #8
 80072f4:	4610      	mov	r0, r2
 80072f6:	4798      	blx	r3
 80072f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072fa:	e091      	b.n	8007420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 facb 	bl	800789a <USBD_CtlError>
            err++;
 8007304:	7afb      	ldrb	r3, [r7, #11]
 8007306:	3301      	adds	r3, #1
 8007308:	72fb      	strb	r3, [r7, #11]
          break;
 800730a:	e089      	b.n	8007420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00b      	beq.n	8007330 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	7c12      	ldrb	r2, [r2, #16]
 8007324:	f107 0108 	add.w	r1, r7, #8
 8007328:	4610      	mov	r0, r2
 800732a:	4798      	blx	r3
 800732c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800732e:	e077      	b.n	8007420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fab1 	bl	800789a <USBD_CtlError>
            err++;
 8007338:	7afb      	ldrb	r3, [r7, #11]
 800733a:	3301      	adds	r3, #1
 800733c:	72fb      	strb	r3, [r7, #11]
          break;
 800733e:	e06f      	b.n	8007420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00b      	beq.n	8007364 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	7c12      	ldrb	r2, [r2, #16]
 8007358:	f107 0108 	add.w	r1, r7, #8
 800735c:	4610      	mov	r0, r2
 800735e:	4798      	blx	r3
 8007360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007362:	e05d      	b.n	8007420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fa97 	bl	800789a <USBD_CtlError>
            err++;
 800736c:	7afb      	ldrb	r3, [r7, #11]
 800736e:	3301      	adds	r3, #1
 8007370:	72fb      	strb	r3, [r7, #11]
          break;
 8007372:	e055      	b.n	8007420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00b      	beq.n	8007398 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	7c12      	ldrb	r2, [r2, #16]
 800738c:	f107 0108 	add.w	r1, r7, #8
 8007390:	4610      	mov	r0, r2
 8007392:	4798      	blx	r3
 8007394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007396:	e043      	b.n	8007420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fa7d 	bl	800789a <USBD_CtlError>
            err++;
 80073a0:	7afb      	ldrb	r3, [r7, #11]
 80073a2:	3301      	adds	r3, #1
 80073a4:	72fb      	strb	r3, [r7, #11]
          break;
 80073a6:	e03b      	b.n	8007420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00b      	beq.n	80073cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	7c12      	ldrb	r2, [r2, #16]
 80073c0:	f107 0108 	add.w	r1, r7, #8
 80073c4:	4610      	mov	r0, r2
 80073c6:	4798      	blx	r3
 80073c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ca:	e029      	b.n	8007420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fa63 	bl	800789a <USBD_CtlError>
            err++;
 80073d4:	7afb      	ldrb	r3, [r7, #11]
 80073d6:	3301      	adds	r3, #1
 80073d8:	72fb      	strb	r3, [r7, #11]
          break;
 80073da:	e021      	b.n	8007420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00b      	beq.n	8007400 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	7c12      	ldrb	r2, [r2, #16]
 80073f4:	f107 0108 	add.w	r1, r7, #8
 80073f8:	4610      	mov	r0, r2
 80073fa:	4798      	blx	r3
 80073fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073fe:	e00f      	b.n	8007420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fa49 	bl	800789a <USBD_CtlError>
            err++;
 8007408:	7afb      	ldrb	r3, [r7, #11]
 800740a:	3301      	adds	r3, #1
 800740c:	72fb      	strb	r3, [r7, #11]
          break;
 800740e:	e007      	b.n	8007420 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa41 	bl	800789a <USBD_CtlError>
          err++;
 8007418:	7afb      	ldrb	r3, [r7, #11]
 800741a:	3301      	adds	r3, #1
 800741c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800741e:	bf00      	nop
      }
      break;
 8007420:	e037      	b.n	8007492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	7c1b      	ldrb	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d109      	bne.n	800743e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007432:	f107 0208 	add.w	r2, r7, #8
 8007436:	4610      	mov	r0, r2
 8007438:	4798      	blx	r3
 800743a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800743c:	e029      	b.n	8007492 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fa2a 	bl	800789a <USBD_CtlError>
        err++;
 8007446:	7afb      	ldrb	r3, [r7, #11]
 8007448:	3301      	adds	r3, #1
 800744a:	72fb      	strb	r3, [r7, #11]
      break;
 800744c:	e021      	b.n	8007492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	7c1b      	ldrb	r3, [r3, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10d      	bne.n	8007472 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800745c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745e:	f107 0208 	add.w	r2, r7, #8
 8007462:	4610      	mov	r0, r2
 8007464:	4798      	blx	r3
 8007466:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3301      	adds	r3, #1
 800746c:	2207      	movs	r2, #7
 800746e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007470:	e00f      	b.n	8007492 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fa10 	bl	800789a <USBD_CtlError>
        err++;
 800747a:	7afb      	ldrb	r3, [r7, #11]
 800747c:	3301      	adds	r3, #1
 800747e:	72fb      	strb	r3, [r7, #11]
      break;
 8007480:	e007      	b.n	8007492 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fa08 	bl	800789a <USBD_CtlError>
      err++;
 800748a:	7afb      	ldrb	r3, [r7, #11]
 800748c:	3301      	adds	r3, #1
 800748e:	72fb      	strb	r3, [r7, #11]
      break;
 8007490:	bf00      	nop
  }

  if (err != 0U)
 8007492:	7afb      	ldrb	r3, [r7, #11]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d11e      	bne.n	80074d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	88db      	ldrh	r3, [r3, #6]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d016      	beq.n	80074ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80074a0:	893b      	ldrh	r3, [r7, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00e      	beq.n	80074c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	88da      	ldrh	r2, [r3, #6]
 80074aa:	893b      	ldrh	r3, [r7, #8]
 80074ac:	4293      	cmp	r3, r2
 80074ae:	bf28      	it	cs
 80074b0:	4613      	movcs	r3, r2
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80074b6:	893b      	ldrh	r3, [r7, #8]
 80074b8:	461a      	mov	r2, r3
 80074ba:	68f9      	ldr	r1, [r7, #12]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fa5d 	bl	800797c <USBD_CtlSendData>
 80074c2:	e009      	b.n	80074d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f9e7 	bl	800789a <USBD_CtlError>
 80074cc:	e004      	b.n	80074d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 faae 	bl	8007a30 <USBD_CtlSendStatus>
 80074d4:	e000      	b.n	80074d8 <USBD_GetDescriptor+0x2cc>
    return;
 80074d6:	bf00      	nop
  }
}
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop

080074e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	889b      	ldrh	r3, [r3, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d131      	bne.n	8007556 <USBD_SetAddress+0x76>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	88db      	ldrh	r3, [r3, #6]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d12d      	bne.n	8007556 <USBD_SetAddress+0x76>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	885b      	ldrh	r3, [r3, #2]
 80074fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007500:	d829      	bhi.n	8007556 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	885b      	ldrh	r3, [r3, #2]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800750c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b03      	cmp	r3, #3
 8007518:	d104      	bne.n	8007524 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f9bc 	bl	800789a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007522:	e01d      	b.n	8007560 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	7bfa      	ldrb	r2, [r7, #15]
 8007528:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 ff15 	bl	8008360 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fa7a 	bl	8007a30 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d004      	beq.n	800754c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2202      	movs	r2, #2
 8007546:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800754a:	e009      	b.n	8007560 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007554:	e004      	b.n	8007560 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007556:	6839      	ldr	r1, [r7, #0]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f99e 	bl	800789a <USBD_CtlError>
  }
}
 800755e:	bf00      	nop
 8007560:	bf00      	nop
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	885b      	ldrh	r3, [r3, #2]
 800757a:	b2da      	uxtb	r2, r3
 800757c:	4b4e      	ldr	r3, [pc, #312]	; (80076b8 <USBD_SetConfig+0x150>)
 800757e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007580:	4b4d      	ldr	r3, [pc, #308]	; (80076b8 <USBD_SetConfig+0x150>)
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d905      	bls.n	8007594 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f985 	bl	800789a <USBD_CtlError>
    return USBD_FAIL;
 8007590:	2303      	movs	r3, #3
 8007592:	e08c      	b.n	80076ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b02      	cmp	r3, #2
 800759e:	d002      	beq.n	80075a6 <USBD_SetConfig+0x3e>
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d029      	beq.n	80075f8 <USBD_SetConfig+0x90>
 80075a4:	e075      	b.n	8007692 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80075a6:	4b44      	ldr	r3, [pc, #272]	; (80076b8 <USBD_SetConfig+0x150>)
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d020      	beq.n	80075f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80075ae:	4b42      	ldr	r3, [pc, #264]	; (80076b8 <USBD_SetConfig+0x150>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80075b8:	4b3f      	ldr	r3, [pc, #252]	; (80076b8 <USBD_SetConfig+0x150>)
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	4619      	mov	r1, r3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7fe ffe7 	bl	8006592 <USBD_SetClassConfig>
 80075c4:	4603      	mov	r3, r0
 80075c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d008      	beq.n	80075e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f962 	bl	800789a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2202      	movs	r2, #2
 80075da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80075de:	e065      	b.n	80076ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fa25 	bl	8007a30 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2203      	movs	r2, #3
 80075ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80075ee:	e05d      	b.n	80076ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fa1d 	bl	8007a30 <USBD_CtlSendStatus>
      break;
 80075f6:	e059      	b.n	80076ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80075f8:	4b2f      	ldr	r3, [pc, #188]	; (80076b8 <USBD_SetConfig+0x150>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d112      	bne.n	8007626 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007608:	4b2b      	ldr	r3, [pc, #172]	; (80076b8 <USBD_SetConfig+0x150>)
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	461a      	mov	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007612:	4b29      	ldr	r3, [pc, #164]	; (80076b8 <USBD_SetConfig+0x150>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7fe ffd6 	bl	80065ca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fa06 	bl	8007a30 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007624:	e042      	b.n	80076ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007626:	4b24      	ldr	r3, [pc, #144]	; (80076b8 <USBD_SetConfig+0x150>)
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	429a      	cmp	r2, r3
 8007632:	d02a      	beq.n	800768a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7fe ffc4 	bl	80065ca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007642:	4b1d      	ldr	r3, [pc, #116]	; (80076b8 <USBD_SetConfig+0x150>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800764c:	4b1a      	ldr	r3, [pc, #104]	; (80076b8 <USBD_SetConfig+0x150>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7fe ff9d 	bl	8006592 <USBD_SetClassConfig>
 8007658:	4603      	mov	r3, r0
 800765a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800765c:	7bfb      	ldrb	r3, [r7, #15]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00f      	beq.n	8007682 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f918 	bl	800789a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	b2db      	uxtb	r3, r3
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7fe ffa9 	bl	80065ca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007680:	e014      	b.n	80076ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f9d4 	bl	8007a30 <USBD_CtlSendStatus>
      break;
 8007688:	e010      	b.n	80076ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f9d0 	bl	8007a30 <USBD_CtlSendStatus>
      break;
 8007690:	e00c      	b.n	80076ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007692:	6839      	ldr	r1, [r7, #0]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f900 	bl	800789a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800769a:	4b07      	ldr	r3, [pc, #28]	; (80076b8 <USBD_SetConfig+0x150>)
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7fe ff92 	bl	80065ca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80076a6:	2303      	movs	r3, #3
 80076a8:	73fb      	strb	r3, [r7, #15]
      break;
 80076aa:	bf00      	nop
  }

  return ret;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20000384 	.word	0x20000384

080076bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	88db      	ldrh	r3, [r3, #6]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d004      	beq.n	80076d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f8e2 	bl	800789a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80076d6:	e023      	b.n	8007720 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	dc02      	bgt.n	80076ea <USBD_GetConfig+0x2e>
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	dc03      	bgt.n	80076f0 <USBD_GetConfig+0x34>
 80076e8:	e015      	b.n	8007716 <USBD_GetConfig+0x5a>
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d00b      	beq.n	8007706 <USBD_GetConfig+0x4a>
 80076ee:	e012      	b.n	8007716 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	3308      	adds	r3, #8
 80076fa:	2201      	movs	r2, #1
 80076fc:	4619      	mov	r1, r3
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f93c 	bl	800797c <USBD_CtlSendData>
        break;
 8007704:	e00c      	b.n	8007720 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	3304      	adds	r3, #4
 800770a:	2201      	movs	r2, #1
 800770c:	4619      	mov	r1, r3
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f934 	bl	800797c <USBD_CtlSendData>
        break;
 8007714:	e004      	b.n	8007720 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f8be 	bl	800789a <USBD_CtlError>
        break;
 800771e:	bf00      	nop
}
 8007720:	bf00      	nop
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007738:	b2db      	uxtb	r3, r3
 800773a:	3b01      	subs	r3, #1
 800773c:	2b02      	cmp	r3, #2
 800773e:	d81e      	bhi.n	800777e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	88db      	ldrh	r3, [r3, #6]
 8007744:	2b02      	cmp	r3, #2
 8007746:	d004      	beq.n	8007752 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f8a5 	bl	800789a <USBD_CtlError>
        break;
 8007750:	e01a      	b.n	8007788 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800775e:	2b00      	cmp	r3, #0
 8007760:	d005      	beq.n	800776e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f043 0202 	orr.w	r2, r3, #2
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	330c      	adds	r3, #12
 8007772:	2202      	movs	r2, #2
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f900 	bl	800797c <USBD_CtlSendData>
      break;
 800777c:	e004      	b.n	8007788 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f88a 	bl	800789a <USBD_CtlError>
      break;
 8007786:	bf00      	nop
  }
}
 8007788:	bf00      	nop
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	885b      	ldrh	r3, [r3, #2]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d107      	bne.n	80077b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f940 	bl	8007a30 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80077b0:	e013      	b.n	80077da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	885b      	ldrh	r3, [r3, #2]
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d10b      	bne.n	80077d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	889b      	ldrh	r3, [r3, #4]
 80077be:	0a1b      	lsrs	r3, r3, #8
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f930 	bl	8007a30 <USBD_CtlSendStatus>
}
 80077d0:	e003      	b.n	80077da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f860 	bl	800789a <USBD_CtlError>
}
 80077da:	bf00      	nop
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b082      	sub	sp, #8
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	3b01      	subs	r3, #1
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d80b      	bhi.n	8007812 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	885b      	ldrh	r3, [r3, #2]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d10c      	bne.n	800781c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f910 	bl	8007a30 <USBD_CtlSendStatus>
      }
      break;
 8007810:	e004      	b.n	800781c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f840 	bl	800789a <USBD_CtlError>
      break;
 800781a:	e000      	b.n	800781e <USBD_ClrFeature+0x3c>
      break;
 800781c:	bf00      	nop
  }
}
 800781e:	bf00      	nop
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b084      	sub	sp, #16
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	781a      	ldrb	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	3301      	adds	r3, #1
 8007840:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	781a      	ldrb	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3301      	adds	r3, #1
 800784e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f7ff fa41 	bl	8006cd8 <SWAPBYTE>
 8007856:	4603      	mov	r3, r0
 8007858:	461a      	mov	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3301      	adds	r3, #1
 8007862:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3301      	adds	r3, #1
 8007868:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f7ff fa34 	bl	8006cd8 <SWAPBYTE>
 8007870:	4603      	mov	r3, r0
 8007872:	461a      	mov	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	3301      	adds	r3, #1
 800787c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3301      	adds	r3, #1
 8007882:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f7ff fa27 	bl	8006cd8 <SWAPBYTE>
 800788a:	4603      	mov	r3, r0
 800788c:	461a      	mov	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	80da      	strh	r2, [r3, #6]
}
 8007892:	bf00      	nop
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80078a4:	2180      	movs	r1, #128	; 0x80
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fcf0 	bl	800828c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80078ac:	2100      	movs	r1, #0
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fcec 	bl	800828c <USBD_LL_StallEP>
}
 80078b4:	bf00      	nop
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d036      	beq.n	8007940 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80078d6:	6938      	ldr	r0, [r7, #16]
 80078d8:	f000 f836 	bl	8007948 <USBD_GetLen>
 80078dc:	4603      	mov	r3, r0
 80078de:	3301      	adds	r3, #1
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	005b      	lsls	r3, r3, #1
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	4413      	add	r3, r2
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	7812      	ldrb	r2, [r2, #0]
 80078f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
 80078f8:	3301      	adds	r3, #1
 80078fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80078fc:	7dfb      	ldrb	r3, [r7, #23]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	4413      	add	r3, r2
 8007902:	2203      	movs	r2, #3
 8007904:	701a      	strb	r2, [r3, #0]
  idx++;
 8007906:	7dfb      	ldrb	r3, [r7, #23]
 8007908:	3301      	adds	r3, #1
 800790a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800790c:	e013      	b.n	8007936 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800790e:	7dfb      	ldrb	r3, [r7, #23]
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	4413      	add	r3, r2
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	7812      	ldrb	r2, [r2, #0]
 8007918:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	3301      	adds	r3, #1
 800791e:	613b      	str	r3, [r7, #16]
    idx++;
 8007920:	7dfb      	ldrb	r3, [r7, #23]
 8007922:	3301      	adds	r3, #1
 8007924:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007926:	7dfb      	ldrb	r3, [r7, #23]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	4413      	add	r3, r2
 800792c:	2200      	movs	r2, #0
 800792e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007930:	7dfb      	ldrb	r3, [r7, #23]
 8007932:	3301      	adds	r3, #1
 8007934:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1e7      	bne.n	800790e <USBD_GetString+0x52>
 800793e:	e000      	b.n	8007942 <USBD_GetString+0x86>
    return;
 8007940:	bf00      	nop
  }
}
 8007942:	3718      	adds	r7, #24
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007950:	2300      	movs	r3, #0
 8007952:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007958:	e005      	b.n	8007966 <USBD_GetLen+0x1e>
  {
    len++;
 800795a:	7bfb      	ldrb	r3, [r7, #15]
 800795c:	3301      	adds	r3, #1
 800795e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	3301      	adds	r3, #1
 8007964:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1f5      	bne.n	800795a <USBD_GetLen+0x12>
  }

  return len;
 800796e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2202      	movs	r2, #2
 800798c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	2100      	movs	r1, #0
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 fcfb 	bl	800839e <USBD_LL_Transmit>

  return USBD_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b084      	sub	sp, #16
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	60b9      	str	r1, [r7, #8]
 80079bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	2100      	movs	r1, #0
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f000 fcea 	bl	800839e <USBD_LL_Transmit>

  return USBD_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2203      	movs	r2, #3
 80079e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	2100      	movs	r1, #0
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 fcee 	bl	80083e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b084      	sub	sp, #16
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	60f8      	str	r0, [r7, #12]
 8007a16:	60b9      	str	r1, [r7, #8]
 8007a18:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	2100      	movs	r1, #0
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 fcdd 	bl	80083e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2204      	movs	r2, #4
 8007a3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a40:	2300      	movs	r3, #0
 8007a42:	2200      	movs	r2, #0
 8007a44:	2100      	movs	r1, #0
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fca9 	bl	800839e <USBD_LL_Transmit>

  return USBD_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2205      	movs	r2, #5
 8007a62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a66:	2300      	movs	r3, #0
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fcb7 	bl	80083e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a80:	2200      	movs	r2, #0
 8007a82:	4912      	ldr	r1, [pc, #72]	; (8007acc <MX_USB_DEVICE_Init+0x50>)
 8007a84:	4812      	ldr	r0, [pc, #72]	; (8007ad0 <MX_USB_DEVICE_Init+0x54>)
 8007a86:	f7fe fd07 	bl	8006498 <USBD_Init>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007a90:	f7f9 fc40 	bl	8001314 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007a94:	490f      	ldr	r1, [pc, #60]	; (8007ad4 <MX_USB_DEVICE_Init+0x58>)
 8007a96:	480e      	ldr	r0, [pc, #56]	; (8007ad0 <MX_USB_DEVICE_Init+0x54>)
 8007a98:	f7fe fd2e 	bl	80064f8 <USBD_RegisterClass>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007aa2:	f7f9 fc37 	bl	8001314 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007aa6:	490c      	ldr	r1, [pc, #48]	; (8007ad8 <MX_USB_DEVICE_Init+0x5c>)
 8007aa8:	4809      	ldr	r0, [pc, #36]	; (8007ad0 <MX_USB_DEVICE_Init+0x54>)
 8007aaa:	f7fe fc1f 	bl	80062ec <USBD_CDC_RegisterInterface>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ab4:	f7f9 fc2e 	bl	8001314 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ab8:	4805      	ldr	r0, [pc, #20]	; (8007ad0 <MX_USB_DEVICE_Init+0x54>)
 8007aba:	f7fe fd53 	bl	8006564 <USBD_Start>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d001      	beq.n	8007ac8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ac4:	f7f9 fc26 	bl	8001314 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ac8:	bf00      	nop
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	200000ac 	.word	0x200000ac
 8007ad0:	20000388 	.word	0x20000388
 8007ad4:	20000018 	.word	0x20000018
 8007ad8:	20000098 	.word	0x20000098

08007adc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	4905      	ldr	r1, [pc, #20]	; (8007af8 <CDC_Init_FS+0x1c>)
 8007ae4:	4805      	ldr	r0, [pc, #20]	; (8007afc <CDC_Init_FS+0x20>)
 8007ae6:	f7fe fc1b 	bl	8006320 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007aea:	4905      	ldr	r1, [pc, #20]	; (8007b00 <CDC_Init_FS+0x24>)
 8007aec:	4803      	ldr	r0, [pc, #12]	; (8007afc <CDC_Init_FS+0x20>)
 8007aee:	f7fe fc39 	bl	8006364 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007af2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	20000e64 	.word	0x20000e64
 8007afc:	20000388 	.word	0x20000388
 8007b00:	20000664 	.word	0x20000664

08007b04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007b04:	b480      	push	{r7}
 8007b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007b08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	6039      	str	r1, [r7, #0]
 8007b1e:	71fb      	strb	r3, [r7, #7]
 8007b20:	4613      	mov	r3, r2
 8007b22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007b24:	79fb      	ldrb	r3, [r7, #7]
 8007b26:	2b23      	cmp	r3, #35	; 0x23
 8007b28:	d84a      	bhi.n	8007bc0 <CDC_Control_FS+0xac>
 8007b2a:	a201      	add	r2, pc, #4	; (adr r2, 8007b30 <CDC_Control_FS+0x1c>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007bc1 	.word	0x08007bc1
 8007b34:	08007bc1 	.word	0x08007bc1
 8007b38:	08007bc1 	.word	0x08007bc1
 8007b3c:	08007bc1 	.word	0x08007bc1
 8007b40:	08007bc1 	.word	0x08007bc1
 8007b44:	08007bc1 	.word	0x08007bc1
 8007b48:	08007bc1 	.word	0x08007bc1
 8007b4c:	08007bc1 	.word	0x08007bc1
 8007b50:	08007bc1 	.word	0x08007bc1
 8007b54:	08007bc1 	.word	0x08007bc1
 8007b58:	08007bc1 	.word	0x08007bc1
 8007b5c:	08007bc1 	.word	0x08007bc1
 8007b60:	08007bc1 	.word	0x08007bc1
 8007b64:	08007bc1 	.word	0x08007bc1
 8007b68:	08007bc1 	.word	0x08007bc1
 8007b6c:	08007bc1 	.word	0x08007bc1
 8007b70:	08007bc1 	.word	0x08007bc1
 8007b74:	08007bc1 	.word	0x08007bc1
 8007b78:	08007bc1 	.word	0x08007bc1
 8007b7c:	08007bc1 	.word	0x08007bc1
 8007b80:	08007bc1 	.word	0x08007bc1
 8007b84:	08007bc1 	.word	0x08007bc1
 8007b88:	08007bc1 	.word	0x08007bc1
 8007b8c:	08007bc1 	.word	0x08007bc1
 8007b90:	08007bc1 	.word	0x08007bc1
 8007b94:	08007bc1 	.word	0x08007bc1
 8007b98:	08007bc1 	.word	0x08007bc1
 8007b9c:	08007bc1 	.word	0x08007bc1
 8007ba0:	08007bc1 	.word	0x08007bc1
 8007ba4:	08007bc1 	.word	0x08007bc1
 8007ba8:	08007bc1 	.word	0x08007bc1
 8007bac:	08007bc1 	.word	0x08007bc1
 8007bb0:	08007bc1 	.word	0x08007bc1
 8007bb4:	08007bc1 	.word	0x08007bc1
 8007bb8:	08007bc1 	.word	0x08007bc1
 8007bbc:	08007bc1 	.word	0x08007bc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007bc0:	bf00      	nop
  }

  return (USBD_OK);
 8007bc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	480b      	ldr	r0, [pc, #44]	; (8007c0c <CDC_Receive_FS+0x3c>)
 8007bde:	f7fe fbc1 	bl	8006364 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007be2:	480a      	ldr	r0, [pc, #40]	; (8007c0c <CDC_Receive_FS+0x3c>)
 8007be4:	f7fe fc22 	bl	800642c <USBD_CDC_ReceivePacket>
  flag=1;
 8007be8:	4b09      	ldr	r3, [pc, #36]	; (8007c10 <CDC_Receive_FS+0x40>)
 8007bea:	2201      	movs	r2, #1
 8007bec:	601a      	str	r2, [r3, #0]
 // memset (buffer, '\0', 64);  // clear the buffer
   uint8_t len = (uint8_t)*Len;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	73fb      	strb	r3, [r7, #15]
   memcpy(recievebuffer, Buf, len);  // copy the data to the buffer
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	4806      	ldr	r0, [pc, #24]	; (8007c14 <CDC_Receive_FS+0x44>)
 8007bfc:	f000 fc92 	bl	8008524 <memcpy>
 //  memset(Buf, '\0', len);   // clear the Buf also
  return (USBD_OK);
 8007c00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20000388 	.word	0x20000388
 8007c10:	20000330 	.word	0x20000330
 8007c14:	200002f0 	.word	0x200002f0

08007c18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	460b      	mov	r3, r1
 8007c22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007c28:	4b0d      	ldr	r3, [pc, #52]	; (8007c60 <CDC_Transmit_FS+0x48>)
 8007c2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e00b      	b.n	8007c56 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007c3e:	887b      	ldrh	r3, [r7, #2]
 8007c40:	461a      	mov	r2, r3
 8007c42:	6879      	ldr	r1, [r7, #4]
 8007c44:	4806      	ldr	r0, [pc, #24]	; (8007c60 <CDC_Transmit_FS+0x48>)
 8007c46:	f7fe fb6b 	bl	8006320 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007c4a:	4805      	ldr	r0, [pc, #20]	; (8007c60 <CDC_Transmit_FS+0x48>)
 8007c4c:	f7fe fba8 	bl	80063a0 <USBD_CDC_TransmitPacket>
 8007c50:	4603      	mov	r3, r0
 8007c52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	20000388 	.word	0x20000388

08007c64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007c76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	371c      	adds	r7, #28
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
	...

08007c88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	4603      	mov	r3, r0
 8007c90:	6039      	str	r1, [r7, #0]
 8007c92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	2212      	movs	r2, #18
 8007c98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c9a:	4b03      	ldr	r3, [pc, #12]	; (8007ca8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	200000c8 	.word	0x200000c8

08007cac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	6039      	str	r1, [r7, #0]
 8007cb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	2204      	movs	r2, #4
 8007cbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007cbe:	4b03      	ldr	r3, [pc, #12]	; (8007ccc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	200000dc 	.word	0x200000dc

08007cd0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	6039      	str	r1, [r7, #0]
 8007cda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007cdc:	79fb      	ldrb	r3, [r7, #7]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d105      	bne.n	8007cee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	4907      	ldr	r1, [pc, #28]	; (8007d04 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ce6:	4808      	ldr	r0, [pc, #32]	; (8007d08 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ce8:	f7ff fde8 	bl	80078bc <USBD_GetString>
 8007cec:	e004      	b.n	8007cf8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	4904      	ldr	r1, [pc, #16]	; (8007d04 <USBD_FS_ProductStrDescriptor+0x34>)
 8007cf2:	4805      	ldr	r0, [pc, #20]	; (8007d08 <USBD_FS_ProductStrDescriptor+0x38>)
 8007cf4:	f7ff fde2 	bl	80078bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cf8:	4b02      	ldr	r3, [pc, #8]	; (8007d04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20001664 	.word	0x20001664
 8007d08:	0800ceb0 	.word	0x0800ceb0

08007d0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	4603      	mov	r3, r0
 8007d14:	6039      	str	r1, [r7, #0]
 8007d16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	4904      	ldr	r1, [pc, #16]	; (8007d2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d1c:	4804      	ldr	r0, [pc, #16]	; (8007d30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d1e:	f7ff fdcd 	bl	80078bc <USBD_GetString>
  return USBD_StrDesc;
 8007d22:	4b02      	ldr	r3, [pc, #8]	; (8007d2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	20001664 	.word	0x20001664
 8007d30:	0800cec8 	.word	0x0800cec8

08007d34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	6039      	str	r1, [r7, #0]
 8007d3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	221a      	movs	r2, #26
 8007d44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d46:	f000 f843 	bl	8007dd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d4a:	4b02      	ldr	r3, [pc, #8]	; (8007d54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	200000e0 	.word	0x200000e0

08007d58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4603      	mov	r3, r0
 8007d60:	6039      	str	r1, [r7, #0]
 8007d62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007d64:	79fb      	ldrb	r3, [r7, #7]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d105      	bne.n	8007d76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	4907      	ldr	r1, [pc, #28]	; (8007d8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d6e:	4808      	ldr	r0, [pc, #32]	; (8007d90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d70:	f7ff fda4 	bl	80078bc <USBD_GetString>
 8007d74:	e004      	b.n	8007d80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	4904      	ldr	r1, [pc, #16]	; (8007d8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d7a:	4805      	ldr	r0, [pc, #20]	; (8007d90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d7c:	f7ff fd9e 	bl	80078bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d80:	4b02      	ldr	r3, [pc, #8]	; (8007d8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20001664 	.word	0x20001664
 8007d90:	0800cedc 	.word	0x0800cedc

08007d94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	6039      	str	r1, [r7, #0]
 8007d9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007da0:	79fb      	ldrb	r3, [r7, #7]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d105      	bne.n	8007db2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	4907      	ldr	r1, [pc, #28]	; (8007dc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007daa:	4808      	ldr	r0, [pc, #32]	; (8007dcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007dac:	f7ff fd86 	bl	80078bc <USBD_GetString>
 8007db0:	e004      	b.n	8007dbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	4904      	ldr	r1, [pc, #16]	; (8007dc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007db6:	4805      	ldr	r0, [pc, #20]	; (8007dcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007db8:	f7ff fd80 	bl	80078bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dbc:	4b02      	ldr	r3, [pc, #8]	; (8007dc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20001664 	.word	0x20001664
 8007dcc:	0800cee8 	.word	0x0800cee8

08007dd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007dd6:	4b0f      	ldr	r3, [pc, #60]	; (8007e14 <Get_SerialNum+0x44>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007ddc:	4b0e      	ldr	r3, [pc, #56]	; (8007e18 <Get_SerialNum+0x48>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007de2:	4b0e      	ldr	r3, [pc, #56]	; (8007e1c <Get_SerialNum+0x4c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4413      	add	r3, r2
 8007dee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d009      	beq.n	8007e0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007df6:	2208      	movs	r2, #8
 8007df8:	4909      	ldr	r1, [pc, #36]	; (8007e20 <Get_SerialNum+0x50>)
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f000 f814 	bl	8007e28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e00:	2204      	movs	r2, #4
 8007e02:	4908      	ldr	r1, [pc, #32]	; (8007e24 <Get_SerialNum+0x54>)
 8007e04:	68b8      	ldr	r0, [r7, #8]
 8007e06:	f000 f80f 	bl	8007e28 <IntToUnicode>
  }
}
 8007e0a:	bf00      	nop
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	1fff7a10 	.word	0x1fff7a10
 8007e18:	1fff7a14 	.word	0x1fff7a14
 8007e1c:	1fff7a18 	.word	0x1fff7a18
 8007e20:	200000e2 	.word	0x200000e2
 8007e24:	200000f2 	.word	0x200000f2

08007e28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	4613      	mov	r3, r2
 8007e34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007e36:	2300      	movs	r3, #0
 8007e38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	75fb      	strb	r3, [r7, #23]
 8007e3e:	e027      	b.n	8007e90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	0f1b      	lsrs	r3, r3, #28
 8007e44:	2b09      	cmp	r3, #9
 8007e46:	d80b      	bhi.n	8007e60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	0f1b      	lsrs	r3, r3, #28
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	7dfb      	ldrb	r3, [r7, #23]
 8007e50:	005b      	lsls	r3, r3, #1
 8007e52:	4619      	mov	r1, r3
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	440b      	add	r3, r1
 8007e58:	3230      	adds	r2, #48	; 0x30
 8007e5a:	b2d2      	uxtb	r2, r2
 8007e5c:	701a      	strb	r2, [r3, #0]
 8007e5e:	e00a      	b.n	8007e76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	0f1b      	lsrs	r3, r3, #28
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	440b      	add	r3, r1
 8007e70:	3237      	adds	r2, #55	; 0x37
 8007e72:	b2d2      	uxtb	r2, r2
 8007e74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	011b      	lsls	r3, r3, #4
 8007e7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
 8007e7e:	005b      	lsls	r3, r3, #1
 8007e80:	3301      	adds	r3, #1
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	4413      	add	r3, r2
 8007e86:	2200      	movs	r2, #0
 8007e88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e8a:	7dfb      	ldrb	r3, [r7, #23]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	75fb      	strb	r3, [r7, #23]
 8007e90:	7dfa      	ldrb	r2, [r7, #23]
 8007e92:	79fb      	ldrb	r3, [r7, #7]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d3d3      	bcc.n	8007e40 <IntToUnicode+0x18>
  }
}
 8007e98:	bf00      	nop
 8007e9a:	bf00      	nop
 8007e9c:	371c      	adds	r7, #28
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
	...

08007ea8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b08a      	sub	sp, #40	; 0x28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007eb0:	f107 0314 	add.w	r3, r7, #20
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	605a      	str	r2, [r3, #4]
 8007eba:	609a      	str	r2, [r3, #8]
 8007ebc:	60da      	str	r2, [r3, #12]
 8007ebe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ec8:	d13a      	bne.n	8007f40 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007eca:	2300      	movs	r3, #0
 8007ecc:	613b      	str	r3, [r7, #16]
 8007ece:	4b1e      	ldr	r3, [pc, #120]	; (8007f48 <HAL_PCD_MspInit+0xa0>)
 8007ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed2:	4a1d      	ldr	r2, [pc, #116]	; (8007f48 <HAL_PCD_MspInit+0xa0>)
 8007ed4:	f043 0301 	orr.w	r3, r3, #1
 8007ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8007eda:	4b1b      	ldr	r3, [pc, #108]	; (8007f48 <HAL_PCD_MspInit+0xa0>)
 8007edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	613b      	str	r3, [r7, #16]
 8007ee4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ee6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eec:	2302      	movs	r3, #2
 8007eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ef8:	230a      	movs	r3, #10
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007efc:	f107 0314 	add.w	r3, r7, #20
 8007f00:	4619      	mov	r1, r3
 8007f02:	4812      	ldr	r0, [pc, #72]	; (8007f4c <HAL_PCD_MspInit+0xa4>)
 8007f04:	f7f9 fd7e 	bl	8001a04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f08:	4b0f      	ldr	r3, [pc, #60]	; (8007f48 <HAL_PCD_MspInit+0xa0>)
 8007f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0c:	4a0e      	ldr	r2, [pc, #56]	; (8007f48 <HAL_PCD_MspInit+0xa0>)
 8007f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f12:	6353      	str	r3, [r2, #52]	; 0x34
 8007f14:	2300      	movs	r3, #0
 8007f16:	60fb      	str	r3, [r7, #12]
 8007f18:	4b0b      	ldr	r3, [pc, #44]	; (8007f48 <HAL_PCD_MspInit+0xa0>)
 8007f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1c:	4a0a      	ldr	r2, [pc, #40]	; (8007f48 <HAL_PCD_MspInit+0xa0>)
 8007f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f22:	6453      	str	r3, [r2, #68]	; 0x44
 8007f24:	4b08      	ldr	r3, [pc, #32]	; (8007f48 <HAL_PCD_MspInit+0xa0>)
 8007f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f30:	2200      	movs	r2, #0
 8007f32:	2100      	movs	r1, #0
 8007f34:	2043      	movs	r0, #67	; 0x43
 8007f36:	f7f9 fd20 	bl	800197a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f3a:	2043      	movs	r0, #67	; 0x43
 8007f3c:	f7f9 fd39 	bl	80019b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f40:	bf00      	nop
 8007f42:	3728      	adds	r7, #40	; 0x28
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	40023800 	.word	0x40023800
 8007f4c:	40020000 	.word	0x40020000

08007f50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007f64:	4619      	mov	r1, r3
 8007f66:	4610      	mov	r0, r2
 8007f68:	f7fe fb49 	bl	80065fe <USBD_LL_SetupStage>
}
 8007f6c:	bf00      	nop
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007f86:	78fa      	ldrb	r2, [r7, #3]
 8007f88:	6879      	ldr	r1, [r7, #4]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	00db      	lsls	r3, r3, #3
 8007f8e:	4413      	add	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	440b      	add	r3, r1
 8007f94:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	f7fe fb83 	bl	80066a8 <USBD_LL_DataOutStage>
}
 8007fa2:	bf00      	nop
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b082      	sub	sp, #8
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007fbc:	78fa      	ldrb	r2, [r7, #3]
 8007fbe:	6879      	ldr	r1, [r7, #4]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	00db      	lsls	r3, r3, #3
 8007fc4:	4413      	add	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	440b      	add	r3, r1
 8007fca:	334c      	adds	r3, #76	; 0x4c
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	78fb      	ldrb	r3, [r7, #3]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	f7fe fc1c 	bl	800680e <USBD_LL_DataInStage>
}
 8007fd6:	bf00      	nop
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fe fd50 	bl	8006a92 <USBD_LL_SOF>
}
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008002:	2301      	movs	r3, #1
 8008004:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d102      	bne.n	8008014 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800800e:	2300      	movs	r3, #0
 8008010:	73fb      	strb	r3, [r7, #15]
 8008012:	e008      	b.n	8008026 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	2b02      	cmp	r3, #2
 800801a:	d102      	bne.n	8008022 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800801c:	2301      	movs	r3, #1
 800801e:	73fb      	strb	r3, [r7, #15]
 8008020:	e001      	b.n	8008026 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008022:	f7f9 f977 	bl	8001314 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800802c:	7bfa      	ldrb	r2, [r7, #15]
 800802e:	4611      	mov	r1, r2
 8008030:	4618      	mov	r0, r3
 8008032:	f7fe fcf0 	bl	8006a16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800803c:	4618      	mov	r0, r3
 800803e:	f7fe fc98 	bl	8006972 <USBD_LL_Reset>
}
 8008042:	bf00      	nop
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
	...

0800804c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe fceb 	bl	8006a36 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	6812      	ldr	r2, [r2, #0]
 800806e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008072:	f043 0301 	orr.w	r3, r3, #1
 8008076:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d005      	beq.n	800808c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008080:	4b04      	ldr	r3, [pc, #16]	; (8008094 <HAL_PCD_SuspendCallback+0x48>)
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	4a03      	ldr	r2, [pc, #12]	; (8008094 <HAL_PCD_SuspendCallback+0x48>)
 8008086:	f043 0306 	orr.w	r3, r3, #6
 800808a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800808c:	bf00      	nop
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	e000ed00 	.word	0xe000ed00

08008098 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fe fcdb 	bl	8006a62 <USBD_LL_Resume>
}
 80080ac:	bf00      	nop
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	460b      	mov	r3, r1
 80080be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080c6:	78fa      	ldrb	r2, [r7, #3]
 80080c8:	4611      	mov	r1, r2
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fe fd33 	bl	8006b36 <USBD_LL_IsoOUTIncomplete>
}
 80080d0:	bf00      	nop
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080ea:	78fa      	ldrb	r2, [r7, #3]
 80080ec:	4611      	mov	r1, r2
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fe fcef 	bl	8006ad2 <USBD_LL_IsoINIncomplete>
}
 80080f4:	bf00      	nop
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800810a:	4618      	mov	r0, r3
 800810c:	f7fe fd45 	bl	8006b9a <USBD_LL_DevConnected>
}
 8008110:	bf00      	nop
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008126:	4618      	mov	r0, r3
 8008128:	f7fe fd42 	bl	8006bb0 <USBD_LL_DevDisconnected>
}
 800812c:	bf00      	nop
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d13c      	bne.n	80081be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008144:	4a20      	ldr	r2, [pc, #128]	; (80081c8 <USBD_LL_Init+0x94>)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a1e      	ldr	r2, [pc, #120]	; (80081c8 <USBD_LL_Init+0x94>)
 8008150:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008154:	4b1c      	ldr	r3, [pc, #112]	; (80081c8 <USBD_LL_Init+0x94>)
 8008156:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800815a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800815c:	4b1a      	ldr	r3, [pc, #104]	; (80081c8 <USBD_LL_Init+0x94>)
 800815e:	2204      	movs	r2, #4
 8008160:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008162:	4b19      	ldr	r3, [pc, #100]	; (80081c8 <USBD_LL_Init+0x94>)
 8008164:	2202      	movs	r2, #2
 8008166:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008168:	4b17      	ldr	r3, [pc, #92]	; (80081c8 <USBD_LL_Init+0x94>)
 800816a:	2200      	movs	r2, #0
 800816c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800816e:	4b16      	ldr	r3, [pc, #88]	; (80081c8 <USBD_LL_Init+0x94>)
 8008170:	2202      	movs	r2, #2
 8008172:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008174:	4b14      	ldr	r3, [pc, #80]	; (80081c8 <USBD_LL_Init+0x94>)
 8008176:	2200      	movs	r2, #0
 8008178:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800817a:	4b13      	ldr	r3, [pc, #76]	; (80081c8 <USBD_LL_Init+0x94>)
 800817c:	2200      	movs	r2, #0
 800817e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008180:	4b11      	ldr	r3, [pc, #68]	; (80081c8 <USBD_LL_Init+0x94>)
 8008182:	2200      	movs	r2, #0
 8008184:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008186:	4b10      	ldr	r3, [pc, #64]	; (80081c8 <USBD_LL_Init+0x94>)
 8008188:	2200      	movs	r2, #0
 800818a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800818c:	4b0e      	ldr	r3, [pc, #56]	; (80081c8 <USBD_LL_Init+0x94>)
 800818e:	2200      	movs	r2, #0
 8008190:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008192:	480d      	ldr	r0, [pc, #52]	; (80081c8 <USBD_LL_Init+0x94>)
 8008194:	f7f9 fe1e 	bl	8001dd4 <HAL_PCD_Init>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800819e:	f7f9 f8b9 	bl	8001314 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80081a2:	2180      	movs	r1, #128	; 0x80
 80081a4:	4808      	ldr	r0, [pc, #32]	; (80081c8 <USBD_LL_Init+0x94>)
 80081a6:	f7fb f876 	bl	8003296 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80081aa:	2240      	movs	r2, #64	; 0x40
 80081ac:	2100      	movs	r1, #0
 80081ae:	4806      	ldr	r0, [pc, #24]	; (80081c8 <USBD_LL_Init+0x94>)
 80081b0:	f7fb f82a 	bl	8003208 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80081b4:	2280      	movs	r2, #128	; 0x80
 80081b6:	2101      	movs	r1, #1
 80081b8:	4803      	ldr	r0, [pc, #12]	; (80081c8 <USBD_LL_Init+0x94>)
 80081ba:	f7fb f825 	bl	8003208 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	20001864 	.word	0x20001864

080081cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7f9 ff13 	bl	800200e <HAL_PCD_Start>
 80081e8:	4603      	mov	r3, r0
 80081ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 f942 	bl	8008478 <USBD_Get_USB_Status>
 80081f4:	4603      	mov	r3, r0
 80081f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	4608      	mov	r0, r1
 800820c:	4611      	mov	r1, r2
 800820e:	461a      	mov	r2, r3
 8008210:	4603      	mov	r3, r0
 8008212:	70fb      	strb	r3, [r7, #3]
 8008214:	460b      	mov	r3, r1
 8008216:	70bb      	strb	r3, [r7, #2]
 8008218:	4613      	mov	r3, r2
 800821a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800822a:	78bb      	ldrb	r3, [r7, #2]
 800822c:	883a      	ldrh	r2, [r7, #0]
 800822e:	78f9      	ldrb	r1, [r7, #3]
 8008230:	f7fa fbe4 	bl	80029fc <HAL_PCD_EP_Open>
 8008234:	4603      	mov	r3, r0
 8008236:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	4618      	mov	r0, r3
 800823c:	f000 f91c 	bl	8008478 <USBD_Get_USB_Status>
 8008240:	4603      	mov	r3, r0
 8008242:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008244:	7bbb      	ldrb	r3, [r7, #14]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	460b      	mov	r3, r1
 8008258:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008268:	78fa      	ldrb	r2, [r7, #3]
 800826a:	4611      	mov	r1, r2
 800826c:	4618      	mov	r0, r3
 800826e:	f7fa fc2d 	bl	8002acc <HAL_PCD_EP_Close>
 8008272:	4603      	mov	r3, r0
 8008274:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008276:	7bfb      	ldrb	r3, [r7, #15]
 8008278:	4618      	mov	r0, r3
 800827a:	f000 f8fd 	bl	8008478 <USBD_Get_USB_Status>
 800827e:	4603      	mov	r3, r0
 8008280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008282:	7bbb      	ldrb	r3, [r7, #14]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082a6:	78fa      	ldrb	r2, [r7, #3]
 80082a8:	4611      	mov	r1, r2
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fa fd05 	bl	8002cba <HAL_PCD_EP_SetStall>
 80082b0:	4603      	mov	r3, r0
 80082b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 f8de 	bl	8008478 <USBD_Get_USB_Status>
 80082bc:	4603      	mov	r3, r0
 80082be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	460b      	mov	r3, r1
 80082d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082e4:	78fa      	ldrb	r2, [r7, #3]
 80082e6:	4611      	mov	r1, r2
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fa fd4a 	bl	8002d82 <HAL_PCD_EP_ClrStall>
 80082ee:	4603      	mov	r3, r0
 80082f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 f8bf 	bl	8008478 <USBD_Get_USB_Status>
 80082fa:	4603      	mov	r3, r0
 80082fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800831a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800831c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008320:	2b00      	cmp	r3, #0
 8008322:	da0b      	bge.n	800833c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800832a:	68f9      	ldr	r1, [r7, #12]
 800832c:	4613      	mov	r3, r2
 800832e:	00db      	lsls	r3, r3, #3
 8008330:	4413      	add	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	440b      	add	r3, r1
 8008336:	333e      	adds	r3, #62	; 0x3e
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	e00b      	b.n	8008354 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800833c:	78fb      	ldrb	r3, [r7, #3]
 800833e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008342:	68f9      	ldr	r1, [r7, #12]
 8008344:	4613      	mov	r3, r2
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	4413      	add	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	440b      	add	r3, r1
 800834e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008352:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800837a:	78fa      	ldrb	r2, [r7, #3]
 800837c:	4611      	mov	r1, r2
 800837e:	4618      	mov	r0, r3
 8008380:	f7fa fb17 	bl	80029b2 <HAL_PCD_SetAddress>
 8008384:	4603      	mov	r3, r0
 8008386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008388:	7bfb      	ldrb	r3, [r7, #15]
 800838a:	4618      	mov	r0, r3
 800838c:	f000 f874 	bl	8008478 <USBD_Get_USB_Status>
 8008390:	4603      	mov	r3, r0
 8008392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008394:	7bbb      	ldrb	r3, [r7, #14]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b086      	sub	sp, #24
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	60f8      	str	r0, [r7, #12]
 80083a6:	607a      	str	r2, [r7, #4]
 80083a8:	603b      	str	r3, [r7, #0]
 80083aa:	460b      	mov	r3, r1
 80083ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80083bc:	7af9      	ldrb	r1, [r7, #11]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	f7fa fc30 	bl	8002c26 <HAL_PCD_EP_Transmit>
 80083c6:	4603      	mov	r3, r0
 80083c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083ca:	7dfb      	ldrb	r3, [r7, #23]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 f853 	bl	8008478 <USBD_Get_USB_Status>
 80083d2:	4603      	mov	r3, r0
 80083d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80083d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3718      	adds	r7, #24
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	607a      	str	r2, [r7, #4]
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	460b      	mov	r3, r1
 80083ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80083fe:	7af9      	ldrb	r1, [r7, #11]
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	f7fa fbac 	bl	8002b60 <HAL_PCD_EP_Receive>
 8008408:	4603      	mov	r3, r0
 800840a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800840c:	7dfb      	ldrb	r3, [r7, #23]
 800840e:	4618      	mov	r0, r3
 8008410:	f000 f832 	bl	8008478 <USBD_Get_USB_Status>
 8008414:	4603      	mov	r3, r0
 8008416:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008418:	7dbb      	ldrb	r3, [r7, #22]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3718      	adds	r7, #24
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	460b      	mov	r3, r1
 800842c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008434:	78fa      	ldrb	r2, [r7, #3]
 8008436:	4611      	mov	r1, r2
 8008438:	4618      	mov	r0, r3
 800843a:	f7fa fbdc 	bl	8002bf6 <HAL_PCD_EP_GetRxCount>
 800843e:	4603      	mov	r3, r0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008450:	4b03      	ldr	r3, [pc, #12]	; (8008460 <USBD_static_malloc+0x18>)
}
 8008452:	4618      	mov	r0, r3
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	20001d70 	.word	0x20001d70

08008464 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]

}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	2b03      	cmp	r3, #3
 800848a:	d817      	bhi.n	80084bc <USBD_Get_USB_Status+0x44>
 800848c:	a201      	add	r2, pc, #4	; (adr r2, 8008494 <USBD_Get_USB_Status+0x1c>)
 800848e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008492:	bf00      	nop
 8008494:	080084a5 	.word	0x080084a5
 8008498:	080084ab 	.word	0x080084ab
 800849c:	080084b1 	.word	0x080084b1
 80084a0:	080084b7 	.word	0x080084b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]
    break;
 80084a8:	e00b      	b.n	80084c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084aa:	2303      	movs	r3, #3
 80084ac:	73fb      	strb	r3, [r7, #15]
    break;
 80084ae:	e008      	b.n	80084c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80084b0:	2301      	movs	r3, #1
 80084b2:	73fb      	strb	r3, [r7, #15]
    break;
 80084b4:	e005      	b.n	80084c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80084b6:	2303      	movs	r3, #3
 80084b8:	73fb      	strb	r3, [r7, #15]
    break;
 80084ba:	e002      	b.n	80084c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80084bc:	2303      	movs	r3, #3
 80084be:	73fb      	strb	r3, [r7, #15]
    break;
 80084c0:	bf00      	nop
  }
  return usb_status;
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <__errno>:
 80084d0:	4b01      	ldr	r3, [pc, #4]	; (80084d8 <__errno+0x8>)
 80084d2:	6818      	ldr	r0, [r3, #0]
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	200000fc 	.word	0x200000fc

080084dc <__libc_init_array>:
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	4d0d      	ldr	r5, [pc, #52]	; (8008514 <__libc_init_array+0x38>)
 80084e0:	4c0d      	ldr	r4, [pc, #52]	; (8008518 <__libc_init_array+0x3c>)
 80084e2:	1b64      	subs	r4, r4, r5
 80084e4:	10a4      	asrs	r4, r4, #2
 80084e6:	2600      	movs	r6, #0
 80084e8:	42a6      	cmp	r6, r4
 80084ea:	d109      	bne.n	8008500 <__libc_init_array+0x24>
 80084ec:	4d0b      	ldr	r5, [pc, #44]	; (800851c <__libc_init_array+0x40>)
 80084ee:	4c0c      	ldr	r4, [pc, #48]	; (8008520 <__libc_init_array+0x44>)
 80084f0:	f004 fcc2 	bl	800ce78 <_init>
 80084f4:	1b64      	subs	r4, r4, r5
 80084f6:	10a4      	asrs	r4, r4, #2
 80084f8:	2600      	movs	r6, #0
 80084fa:	42a6      	cmp	r6, r4
 80084fc:	d105      	bne.n	800850a <__libc_init_array+0x2e>
 80084fe:	bd70      	pop	{r4, r5, r6, pc}
 8008500:	f855 3b04 	ldr.w	r3, [r5], #4
 8008504:	4798      	blx	r3
 8008506:	3601      	adds	r6, #1
 8008508:	e7ee      	b.n	80084e8 <__libc_init_array+0xc>
 800850a:	f855 3b04 	ldr.w	r3, [r5], #4
 800850e:	4798      	blx	r3
 8008510:	3601      	adds	r6, #1
 8008512:	e7f2      	b.n	80084fa <__libc_init_array+0x1e>
 8008514:	0800d3b4 	.word	0x0800d3b4
 8008518:	0800d3b4 	.word	0x0800d3b4
 800851c:	0800d3b4 	.word	0x0800d3b4
 8008520:	0800d3b8 	.word	0x0800d3b8

08008524 <memcpy>:
 8008524:	440a      	add	r2, r1
 8008526:	4291      	cmp	r1, r2
 8008528:	f100 33ff 	add.w	r3, r0, #4294967295
 800852c:	d100      	bne.n	8008530 <memcpy+0xc>
 800852e:	4770      	bx	lr
 8008530:	b510      	push	{r4, lr}
 8008532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008536:	f803 4f01 	strb.w	r4, [r3, #1]!
 800853a:	4291      	cmp	r1, r2
 800853c:	d1f9      	bne.n	8008532 <memcpy+0xe>
 800853e:	bd10      	pop	{r4, pc}

08008540 <memset>:
 8008540:	4402      	add	r2, r0
 8008542:	4603      	mov	r3, r0
 8008544:	4293      	cmp	r3, r2
 8008546:	d100      	bne.n	800854a <memset+0xa>
 8008548:	4770      	bx	lr
 800854a:	f803 1b01 	strb.w	r1, [r3], #1
 800854e:	e7f9      	b.n	8008544 <memset+0x4>

08008550 <__cvt>:
 8008550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008554:	ec55 4b10 	vmov	r4, r5, d0
 8008558:	2d00      	cmp	r5, #0
 800855a:	460e      	mov	r6, r1
 800855c:	4619      	mov	r1, r3
 800855e:	462b      	mov	r3, r5
 8008560:	bfbb      	ittet	lt
 8008562:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008566:	461d      	movlt	r5, r3
 8008568:	2300      	movge	r3, #0
 800856a:	232d      	movlt	r3, #45	; 0x2d
 800856c:	700b      	strb	r3, [r1, #0]
 800856e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008570:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008574:	4691      	mov	r9, r2
 8008576:	f023 0820 	bic.w	r8, r3, #32
 800857a:	bfbc      	itt	lt
 800857c:	4622      	movlt	r2, r4
 800857e:	4614      	movlt	r4, r2
 8008580:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008584:	d005      	beq.n	8008592 <__cvt+0x42>
 8008586:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800858a:	d100      	bne.n	800858e <__cvt+0x3e>
 800858c:	3601      	adds	r6, #1
 800858e:	2102      	movs	r1, #2
 8008590:	e000      	b.n	8008594 <__cvt+0x44>
 8008592:	2103      	movs	r1, #3
 8008594:	ab03      	add	r3, sp, #12
 8008596:	9301      	str	r3, [sp, #4]
 8008598:	ab02      	add	r3, sp, #8
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	ec45 4b10 	vmov	d0, r4, r5
 80085a0:	4653      	mov	r3, sl
 80085a2:	4632      	mov	r2, r6
 80085a4:	f001 fde0 	bl	800a168 <_dtoa_r>
 80085a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80085ac:	4607      	mov	r7, r0
 80085ae:	d102      	bne.n	80085b6 <__cvt+0x66>
 80085b0:	f019 0f01 	tst.w	r9, #1
 80085b4:	d022      	beq.n	80085fc <__cvt+0xac>
 80085b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085ba:	eb07 0906 	add.w	r9, r7, r6
 80085be:	d110      	bne.n	80085e2 <__cvt+0x92>
 80085c0:	783b      	ldrb	r3, [r7, #0]
 80085c2:	2b30      	cmp	r3, #48	; 0x30
 80085c4:	d10a      	bne.n	80085dc <__cvt+0x8c>
 80085c6:	2200      	movs	r2, #0
 80085c8:	2300      	movs	r3, #0
 80085ca:	4620      	mov	r0, r4
 80085cc:	4629      	mov	r1, r5
 80085ce:	f7f8 fa7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80085d2:	b918      	cbnz	r0, 80085dc <__cvt+0x8c>
 80085d4:	f1c6 0601 	rsb	r6, r6, #1
 80085d8:	f8ca 6000 	str.w	r6, [sl]
 80085dc:	f8da 3000 	ldr.w	r3, [sl]
 80085e0:	4499      	add	r9, r3
 80085e2:	2200      	movs	r2, #0
 80085e4:	2300      	movs	r3, #0
 80085e6:	4620      	mov	r0, r4
 80085e8:	4629      	mov	r1, r5
 80085ea:	f7f8 fa6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80085ee:	b108      	cbz	r0, 80085f4 <__cvt+0xa4>
 80085f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80085f4:	2230      	movs	r2, #48	; 0x30
 80085f6:	9b03      	ldr	r3, [sp, #12]
 80085f8:	454b      	cmp	r3, r9
 80085fa:	d307      	bcc.n	800860c <__cvt+0xbc>
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008600:	1bdb      	subs	r3, r3, r7
 8008602:	4638      	mov	r0, r7
 8008604:	6013      	str	r3, [r2, #0]
 8008606:	b004      	add	sp, #16
 8008608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800860c:	1c59      	adds	r1, r3, #1
 800860e:	9103      	str	r1, [sp, #12]
 8008610:	701a      	strb	r2, [r3, #0]
 8008612:	e7f0      	b.n	80085f6 <__cvt+0xa6>

08008614 <__exponent>:
 8008614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008616:	4603      	mov	r3, r0
 8008618:	2900      	cmp	r1, #0
 800861a:	bfb8      	it	lt
 800861c:	4249      	neglt	r1, r1
 800861e:	f803 2b02 	strb.w	r2, [r3], #2
 8008622:	bfb4      	ite	lt
 8008624:	222d      	movlt	r2, #45	; 0x2d
 8008626:	222b      	movge	r2, #43	; 0x2b
 8008628:	2909      	cmp	r1, #9
 800862a:	7042      	strb	r2, [r0, #1]
 800862c:	dd2a      	ble.n	8008684 <__exponent+0x70>
 800862e:	f10d 0407 	add.w	r4, sp, #7
 8008632:	46a4      	mov	ip, r4
 8008634:	270a      	movs	r7, #10
 8008636:	46a6      	mov	lr, r4
 8008638:	460a      	mov	r2, r1
 800863a:	fb91 f6f7 	sdiv	r6, r1, r7
 800863e:	fb07 1516 	mls	r5, r7, r6, r1
 8008642:	3530      	adds	r5, #48	; 0x30
 8008644:	2a63      	cmp	r2, #99	; 0x63
 8008646:	f104 34ff 	add.w	r4, r4, #4294967295
 800864a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800864e:	4631      	mov	r1, r6
 8008650:	dcf1      	bgt.n	8008636 <__exponent+0x22>
 8008652:	3130      	adds	r1, #48	; 0x30
 8008654:	f1ae 0502 	sub.w	r5, lr, #2
 8008658:	f804 1c01 	strb.w	r1, [r4, #-1]
 800865c:	1c44      	adds	r4, r0, #1
 800865e:	4629      	mov	r1, r5
 8008660:	4561      	cmp	r1, ip
 8008662:	d30a      	bcc.n	800867a <__exponent+0x66>
 8008664:	f10d 0209 	add.w	r2, sp, #9
 8008668:	eba2 020e 	sub.w	r2, r2, lr
 800866c:	4565      	cmp	r5, ip
 800866e:	bf88      	it	hi
 8008670:	2200      	movhi	r2, #0
 8008672:	4413      	add	r3, r2
 8008674:	1a18      	subs	r0, r3, r0
 8008676:	b003      	add	sp, #12
 8008678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800867a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800867e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008682:	e7ed      	b.n	8008660 <__exponent+0x4c>
 8008684:	2330      	movs	r3, #48	; 0x30
 8008686:	3130      	adds	r1, #48	; 0x30
 8008688:	7083      	strb	r3, [r0, #2]
 800868a:	70c1      	strb	r1, [r0, #3]
 800868c:	1d03      	adds	r3, r0, #4
 800868e:	e7f1      	b.n	8008674 <__exponent+0x60>

08008690 <_printf_float>:
 8008690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	ed2d 8b02 	vpush	{d8}
 8008698:	b08d      	sub	sp, #52	; 0x34
 800869a:	460c      	mov	r4, r1
 800869c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80086a0:	4616      	mov	r6, r2
 80086a2:	461f      	mov	r7, r3
 80086a4:	4605      	mov	r5, r0
 80086a6:	f002 febd 	bl	800b424 <_localeconv_r>
 80086aa:	f8d0 a000 	ldr.w	sl, [r0]
 80086ae:	4650      	mov	r0, sl
 80086b0:	f7f7 fd8e 	bl	80001d0 <strlen>
 80086b4:	2300      	movs	r3, #0
 80086b6:	930a      	str	r3, [sp, #40]	; 0x28
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	9305      	str	r3, [sp, #20]
 80086bc:	f8d8 3000 	ldr.w	r3, [r8]
 80086c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80086c4:	3307      	adds	r3, #7
 80086c6:	f023 0307 	bic.w	r3, r3, #7
 80086ca:	f103 0208 	add.w	r2, r3, #8
 80086ce:	f8c8 2000 	str.w	r2, [r8]
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80086da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80086de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086e2:	9307      	str	r3, [sp, #28]
 80086e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80086e8:	ee08 0a10 	vmov	s16, r0
 80086ec:	4b9f      	ldr	r3, [pc, #636]	; (800896c <_printf_float+0x2dc>)
 80086ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086f2:	f04f 32ff 	mov.w	r2, #4294967295
 80086f6:	f7f8 fa19 	bl	8000b2c <__aeabi_dcmpun>
 80086fa:	bb88      	cbnz	r0, 8008760 <_printf_float+0xd0>
 80086fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008700:	4b9a      	ldr	r3, [pc, #616]	; (800896c <_printf_float+0x2dc>)
 8008702:	f04f 32ff 	mov.w	r2, #4294967295
 8008706:	f7f8 f9f3 	bl	8000af0 <__aeabi_dcmple>
 800870a:	bb48      	cbnz	r0, 8008760 <_printf_float+0xd0>
 800870c:	2200      	movs	r2, #0
 800870e:	2300      	movs	r3, #0
 8008710:	4640      	mov	r0, r8
 8008712:	4649      	mov	r1, r9
 8008714:	f7f8 f9e2 	bl	8000adc <__aeabi_dcmplt>
 8008718:	b110      	cbz	r0, 8008720 <_printf_float+0x90>
 800871a:	232d      	movs	r3, #45	; 0x2d
 800871c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008720:	4b93      	ldr	r3, [pc, #588]	; (8008970 <_printf_float+0x2e0>)
 8008722:	4894      	ldr	r0, [pc, #592]	; (8008974 <_printf_float+0x2e4>)
 8008724:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008728:	bf94      	ite	ls
 800872a:	4698      	movls	r8, r3
 800872c:	4680      	movhi	r8, r0
 800872e:	2303      	movs	r3, #3
 8008730:	6123      	str	r3, [r4, #16]
 8008732:	9b05      	ldr	r3, [sp, #20]
 8008734:	f023 0204 	bic.w	r2, r3, #4
 8008738:	6022      	str	r2, [r4, #0]
 800873a:	f04f 0900 	mov.w	r9, #0
 800873e:	9700      	str	r7, [sp, #0]
 8008740:	4633      	mov	r3, r6
 8008742:	aa0b      	add	r2, sp, #44	; 0x2c
 8008744:	4621      	mov	r1, r4
 8008746:	4628      	mov	r0, r5
 8008748:	f000 f9d8 	bl	8008afc <_printf_common>
 800874c:	3001      	adds	r0, #1
 800874e:	f040 8090 	bne.w	8008872 <_printf_float+0x1e2>
 8008752:	f04f 30ff 	mov.w	r0, #4294967295
 8008756:	b00d      	add	sp, #52	; 0x34
 8008758:	ecbd 8b02 	vpop	{d8}
 800875c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008760:	4642      	mov	r2, r8
 8008762:	464b      	mov	r3, r9
 8008764:	4640      	mov	r0, r8
 8008766:	4649      	mov	r1, r9
 8008768:	f7f8 f9e0 	bl	8000b2c <__aeabi_dcmpun>
 800876c:	b140      	cbz	r0, 8008780 <_printf_float+0xf0>
 800876e:	464b      	mov	r3, r9
 8008770:	2b00      	cmp	r3, #0
 8008772:	bfbc      	itt	lt
 8008774:	232d      	movlt	r3, #45	; 0x2d
 8008776:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800877a:	487f      	ldr	r0, [pc, #508]	; (8008978 <_printf_float+0x2e8>)
 800877c:	4b7f      	ldr	r3, [pc, #508]	; (800897c <_printf_float+0x2ec>)
 800877e:	e7d1      	b.n	8008724 <_printf_float+0x94>
 8008780:	6863      	ldr	r3, [r4, #4]
 8008782:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008786:	9206      	str	r2, [sp, #24]
 8008788:	1c5a      	adds	r2, r3, #1
 800878a:	d13f      	bne.n	800880c <_printf_float+0x17c>
 800878c:	2306      	movs	r3, #6
 800878e:	6063      	str	r3, [r4, #4]
 8008790:	9b05      	ldr	r3, [sp, #20]
 8008792:	6861      	ldr	r1, [r4, #4]
 8008794:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008798:	2300      	movs	r3, #0
 800879a:	9303      	str	r3, [sp, #12]
 800879c:	ab0a      	add	r3, sp, #40	; 0x28
 800879e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80087a2:	ab09      	add	r3, sp, #36	; 0x24
 80087a4:	ec49 8b10 	vmov	d0, r8, r9
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	6022      	str	r2, [r4, #0]
 80087ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80087b0:	4628      	mov	r0, r5
 80087b2:	f7ff fecd 	bl	8008550 <__cvt>
 80087b6:	9b06      	ldr	r3, [sp, #24]
 80087b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087ba:	2b47      	cmp	r3, #71	; 0x47
 80087bc:	4680      	mov	r8, r0
 80087be:	d108      	bne.n	80087d2 <_printf_float+0x142>
 80087c0:	1cc8      	adds	r0, r1, #3
 80087c2:	db02      	blt.n	80087ca <_printf_float+0x13a>
 80087c4:	6863      	ldr	r3, [r4, #4]
 80087c6:	4299      	cmp	r1, r3
 80087c8:	dd41      	ble.n	800884e <_printf_float+0x1be>
 80087ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80087ce:	fa5f fb8b 	uxtb.w	fp, fp
 80087d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80087d6:	d820      	bhi.n	800881a <_printf_float+0x18a>
 80087d8:	3901      	subs	r1, #1
 80087da:	465a      	mov	r2, fp
 80087dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80087e0:	9109      	str	r1, [sp, #36]	; 0x24
 80087e2:	f7ff ff17 	bl	8008614 <__exponent>
 80087e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087e8:	1813      	adds	r3, r2, r0
 80087ea:	2a01      	cmp	r2, #1
 80087ec:	4681      	mov	r9, r0
 80087ee:	6123      	str	r3, [r4, #16]
 80087f0:	dc02      	bgt.n	80087f8 <_printf_float+0x168>
 80087f2:	6822      	ldr	r2, [r4, #0]
 80087f4:	07d2      	lsls	r2, r2, #31
 80087f6:	d501      	bpl.n	80087fc <_printf_float+0x16c>
 80087f8:	3301      	adds	r3, #1
 80087fa:	6123      	str	r3, [r4, #16]
 80087fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008800:	2b00      	cmp	r3, #0
 8008802:	d09c      	beq.n	800873e <_printf_float+0xae>
 8008804:	232d      	movs	r3, #45	; 0x2d
 8008806:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800880a:	e798      	b.n	800873e <_printf_float+0xae>
 800880c:	9a06      	ldr	r2, [sp, #24]
 800880e:	2a47      	cmp	r2, #71	; 0x47
 8008810:	d1be      	bne.n	8008790 <_printf_float+0x100>
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1bc      	bne.n	8008790 <_printf_float+0x100>
 8008816:	2301      	movs	r3, #1
 8008818:	e7b9      	b.n	800878e <_printf_float+0xfe>
 800881a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800881e:	d118      	bne.n	8008852 <_printf_float+0x1c2>
 8008820:	2900      	cmp	r1, #0
 8008822:	6863      	ldr	r3, [r4, #4]
 8008824:	dd0b      	ble.n	800883e <_printf_float+0x1ae>
 8008826:	6121      	str	r1, [r4, #16]
 8008828:	b913      	cbnz	r3, 8008830 <_printf_float+0x1a0>
 800882a:	6822      	ldr	r2, [r4, #0]
 800882c:	07d0      	lsls	r0, r2, #31
 800882e:	d502      	bpl.n	8008836 <_printf_float+0x1a6>
 8008830:	3301      	adds	r3, #1
 8008832:	440b      	add	r3, r1
 8008834:	6123      	str	r3, [r4, #16]
 8008836:	65a1      	str	r1, [r4, #88]	; 0x58
 8008838:	f04f 0900 	mov.w	r9, #0
 800883c:	e7de      	b.n	80087fc <_printf_float+0x16c>
 800883e:	b913      	cbnz	r3, 8008846 <_printf_float+0x1b6>
 8008840:	6822      	ldr	r2, [r4, #0]
 8008842:	07d2      	lsls	r2, r2, #31
 8008844:	d501      	bpl.n	800884a <_printf_float+0x1ba>
 8008846:	3302      	adds	r3, #2
 8008848:	e7f4      	b.n	8008834 <_printf_float+0x1a4>
 800884a:	2301      	movs	r3, #1
 800884c:	e7f2      	b.n	8008834 <_printf_float+0x1a4>
 800884e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008854:	4299      	cmp	r1, r3
 8008856:	db05      	blt.n	8008864 <_printf_float+0x1d4>
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	6121      	str	r1, [r4, #16]
 800885c:	07d8      	lsls	r0, r3, #31
 800885e:	d5ea      	bpl.n	8008836 <_printf_float+0x1a6>
 8008860:	1c4b      	adds	r3, r1, #1
 8008862:	e7e7      	b.n	8008834 <_printf_float+0x1a4>
 8008864:	2900      	cmp	r1, #0
 8008866:	bfd4      	ite	le
 8008868:	f1c1 0202 	rsble	r2, r1, #2
 800886c:	2201      	movgt	r2, #1
 800886e:	4413      	add	r3, r2
 8008870:	e7e0      	b.n	8008834 <_printf_float+0x1a4>
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	055a      	lsls	r2, r3, #21
 8008876:	d407      	bmi.n	8008888 <_printf_float+0x1f8>
 8008878:	6923      	ldr	r3, [r4, #16]
 800887a:	4642      	mov	r2, r8
 800887c:	4631      	mov	r1, r6
 800887e:	4628      	mov	r0, r5
 8008880:	47b8      	blx	r7
 8008882:	3001      	adds	r0, #1
 8008884:	d12c      	bne.n	80088e0 <_printf_float+0x250>
 8008886:	e764      	b.n	8008752 <_printf_float+0xc2>
 8008888:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800888c:	f240 80e0 	bls.w	8008a50 <_printf_float+0x3c0>
 8008890:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008894:	2200      	movs	r2, #0
 8008896:	2300      	movs	r3, #0
 8008898:	f7f8 f916 	bl	8000ac8 <__aeabi_dcmpeq>
 800889c:	2800      	cmp	r0, #0
 800889e:	d034      	beq.n	800890a <_printf_float+0x27a>
 80088a0:	4a37      	ldr	r2, [pc, #220]	; (8008980 <_printf_float+0x2f0>)
 80088a2:	2301      	movs	r3, #1
 80088a4:	4631      	mov	r1, r6
 80088a6:	4628      	mov	r0, r5
 80088a8:	47b8      	blx	r7
 80088aa:	3001      	adds	r0, #1
 80088ac:	f43f af51 	beq.w	8008752 <_printf_float+0xc2>
 80088b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088b4:	429a      	cmp	r2, r3
 80088b6:	db02      	blt.n	80088be <_printf_float+0x22e>
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	07d8      	lsls	r0, r3, #31
 80088bc:	d510      	bpl.n	80088e0 <_printf_float+0x250>
 80088be:	ee18 3a10 	vmov	r3, s16
 80088c2:	4652      	mov	r2, sl
 80088c4:	4631      	mov	r1, r6
 80088c6:	4628      	mov	r0, r5
 80088c8:	47b8      	blx	r7
 80088ca:	3001      	adds	r0, #1
 80088cc:	f43f af41 	beq.w	8008752 <_printf_float+0xc2>
 80088d0:	f04f 0800 	mov.w	r8, #0
 80088d4:	f104 091a 	add.w	r9, r4, #26
 80088d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088da:	3b01      	subs	r3, #1
 80088dc:	4543      	cmp	r3, r8
 80088de:	dc09      	bgt.n	80088f4 <_printf_float+0x264>
 80088e0:	6823      	ldr	r3, [r4, #0]
 80088e2:	079b      	lsls	r3, r3, #30
 80088e4:	f100 8105 	bmi.w	8008af2 <_printf_float+0x462>
 80088e8:	68e0      	ldr	r0, [r4, #12]
 80088ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088ec:	4298      	cmp	r0, r3
 80088ee:	bfb8      	it	lt
 80088f0:	4618      	movlt	r0, r3
 80088f2:	e730      	b.n	8008756 <_printf_float+0xc6>
 80088f4:	2301      	movs	r3, #1
 80088f6:	464a      	mov	r2, r9
 80088f8:	4631      	mov	r1, r6
 80088fa:	4628      	mov	r0, r5
 80088fc:	47b8      	blx	r7
 80088fe:	3001      	adds	r0, #1
 8008900:	f43f af27 	beq.w	8008752 <_printf_float+0xc2>
 8008904:	f108 0801 	add.w	r8, r8, #1
 8008908:	e7e6      	b.n	80088d8 <_printf_float+0x248>
 800890a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800890c:	2b00      	cmp	r3, #0
 800890e:	dc39      	bgt.n	8008984 <_printf_float+0x2f4>
 8008910:	4a1b      	ldr	r2, [pc, #108]	; (8008980 <_printf_float+0x2f0>)
 8008912:	2301      	movs	r3, #1
 8008914:	4631      	mov	r1, r6
 8008916:	4628      	mov	r0, r5
 8008918:	47b8      	blx	r7
 800891a:	3001      	adds	r0, #1
 800891c:	f43f af19 	beq.w	8008752 <_printf_float+0xc2>
 8008920:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008924:	4313      	orrs	r3, r2
 8008926:	d102      	bne.n	800892e <_printf_float+0x29e>
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	07d9      	lsls	r1, r3, #31
 800892c:	d5d8      	bpl.n	80088e0 <_printf_float+0x250>
 800892e:	ee18 3a10 	vmov	r3, s16
 8008932:	4652      	mov	r2, sl
 8008934:	4631      	mov	r1, r6
 8008936:	4628      	mov	r0, r5
 8008938:	47b8      	blx	r7
 800893a:	3001      	adds	r0, #1
 800893c:	f43f af09 	beq.w	8008752 <_printf_float+0xc2>
 8008940:	f04f 0900 	mov.w	r9, #0
 8008944:	f104 0a1a 	add.w	sl, r4, #26
 8008948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800894a:	425b      	negs	r3, r3
 800894c:	454b      	cmp	r3, r9
 800894e:	dc01      	bgt.n	8008954 <_printf_float+0x2c4>
 8008950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008952:	e792      	b.n	800887a <_printf_float+0x1ea>
 8008954:	2301      	movs	r3, #1
 8008956:	4652      	mov	r2, sl
 8008958:	4631      	mov	r1, r6
 800895a:	4628      	mov	r0, r5
 800895c:	47b8      	blx	r7
 800895e:	3001      	adds	r0, #1
 8008960:	f43f aef7 	beq.w	8008752 <_printf_float+0xc2>
 8008964:	f109 0901 	add.w	r9, r9, #1
 8008968:	e7ee      	b.n	8008948 <_printf_float+0x2b8>
 800896a:	bf00      	nop
 800896c:	7fefffff 	.word	0x7fefffff
 8008970:	0800cf0c 	.word	0x0800cf0c
 8008974:	0800cf10 	.word	0x0800cf10
 8008978:	0800cf18 	.word	0x0800cf18
 800897c:	0800cf14 	.word	0x0800cf14
 8008980:	0800cf1c 	.word	0x0800cf1c
 8008984:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008986:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008988:	429a      	cmp	r2, r3
 800898a:	bfa8      	it	ge
 800898c:	461a      	movge	r2, r3
 800898e:	2a00      	cmp	r2, #0
 8008990:	4691      	mov	r9, r2
 8008992:	dc37      	bgt.n	8008a04 <_printf_float+0x374>
 8008994:	f04f 0b00 	mov.w	fp, #0
 8008998:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800899c:	f104 021a 	add.w	r2, r4, #26
 80089a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089a2:	9305      	str	r3, [sp, #20]
 80089a4:	eba3 0309 	sub.w	r3, r3, r9
 80089a8:	455b      	cmp	r3, fp
 80089aa:	dc33      	bgt.n	8008a14 <_printf_float+0x384>
 80089ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089b0:	429a      	cmp	r2, r3
 80089b2:	db3b      	blt.n	8008a2c <_printf_float+0x39c>
 80089b4:	6823      	ldr	r3, [r4, #0]
 80089b6:	07da      	lsls	r2, r3, #31
 80089b8:	d438      	bmi.n	8008a2c <_printf_float+0x39c>
 80089ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089bc:	9a05      	ldr	r2, [sp, #20]
 80089be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089c0:	1a9a      	subs	r2, r3, r2
 80089c2:	eba3 0901 	sub.w	r9, r3, r1
 80089c6:	4591      	cmp	r9, r2
 80089c8:	bfa8      	it	ge
 80089ca:	4691      	movge	r9, r2
 80089cc:	f1b9 0f00 	cmp.w	r9, #0
 80089d0:	dc35      	bgt.n	8008a3e <_printf_float+0x3ae>
 80089d2:	f04f 0800 	mov.w	r8, #0
 80089d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089da:	f104 0a1a 	add.w	sl, r4, #26
 80089de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089e2:	1a9b      	subs	r3, r3, r2
 80089e4:	eba3 0309 	sub.w	r3, r3, r9
 80089e8:	4543      	cmp	r3, r8
 80089ea:	f77f af79 	ble.w	80088e0 <_printf_float+0x250>
 80089ee:	2301      	movs	r3, #1
 80089f0:	4652      	mov	r2, sl
 80089f2:	4631      	mov	r1, r6
 80089f4:	4628      	mov	r0, r5
 80089f6:	47b8      	blx	r7
 80089f8:	3001      	adds	r0, #1
 80089fa:	f43f aeaa 	beq.w	8008752 <_printf_float+0xc2>
 80089fe:	f108 0801 	add.w	r8, r8, #1
 8008a02:	e7ec      	b.n	80089de <_printf_float+0x34e>
 8008a04:	4613      	mov	r3, r2
 8008a06:	4631      	mov	r1, r6
 8008a08:	4642      	mov	r2, r8
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	47b8      	blx	r7
 8008a0e:	3001      	adds	r0, #1
 8008a10:	d1c0      	bne.n	8008994 <_printf_float+0x304>
 8008a12:	e69e      	b.n	8008752 <_printf_float+0xc2>
 8008a14:	2301      	movs	r3, #1
 8008a16:	4631      	mov	r1, r6
 8008a18:	4628      	mov	r0, r5
 8008a1a:	9205      	str	r2, [sp, #20]
 8008a1c:	47b8      	blx	r7
 8008a1e:	3001      	adds	r0, #1
 8008a20:	f43f ae97 	beq.w	8008752 <_printf_float+0xc2>
 8008a24:	9a05      	ldr	r2, [sp, #20]
 8008a26:	f10b 0b01 	add.w	fp, fp, #1
 8008a2a:	e7b9      	b.n	80089a0 <_printf_float+0x310>
 8008a2c:	ee18 3a10 	vmov	r3, s16
 8008a30:	4652      	mov	r2, sl
 8008a32:	4631      	mov	r1, r6
 8008a34:	4628      	mov	r0, r5
 8008a36:	47b8      	blx	r7
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d1be      	bne.n	80089ba <_printf_float+0x32a>
 8008a3c:	e689      	b.n	8008752 <_printf_float+0xc2>
 8008a3e:	9a05      	ldr	r2, [sp, #20]
 8008a40:	464b      	mov	r3, r9
 8008a42:	4442      	add	r2, r8
 8008a44:	4631      	mov	r1, r6
 8008a46:	4628      	mov	r0, r5
 8008a48:	47b8      	blx	r7
 8008a4a:	3001      	adds	r0, #1
 8008a4c:	d1c1      	bne.n	80089d2 <_printf_float+0x342>
 8008a4e:	e680      	b.n	8008752 <_printf_float+0xc2>
 8008a50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a52:	2a01      	cmp	r2, #1
 8008a54:	dc01      	bgt.n	8008a5a <_printf_float+0x3ca>
 8008a56:	07db      	lsls	r3, r3, #31
 8008a58:	d538      	bpl.n	8008acc <_printf_float+0x43c>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	4642      	mov	r2, r8
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4628      	mov	r0, r5
 8008a62:	47b8      	blx	r7
 8008a64:	3001      	adds	r0, #1
 8008a66:	f43f ae74 	beq.w	8008752 <_printf_float+0xc2>
 8008a6a:	ee18 3a10 	vmov	r3, s16
 8008a6e:	4652      	mov	r2, sl
 8008a70:	4631      	mov	r1, r6
 8008a72:	4628      	mov	r0, r5
 8008a74:	47b8      	blx	r7
 8008a76:	3001      	adds	r0, #1
 8008a78:	f43f ae6b 	beq.w	8008752 <_printf_float+0xc2>
 8008a7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a80:	2200      	movs	r2, #0
 8008a82:	2300      	movs	r3, #0
 8008a84:	f7f8 f820 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a88:	b9d8      	cbnz	r0, 8008ac2 <_printf_float+0x432>
 8008a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a8c:	f108 0201 	add.w	r2, r8, #1
 8008a90:	3b01      	subs	r3, #1
 8008a92:	4631      	mov	r1, r6
 8008a94:	4628      	mov	r0, r5
 8008a96:	47b8      	blx	r7
 8008a98:	3001      	adds	r0, #1
 8008a9a:	d10e      	bne.n	8008aba <_printf_float+0x42a>
 8008a9c:	e659      	b.n	8008752 <_printf_float+0xc2>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	4652      	mov	r2, sl
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	47b8      	blx	r7
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	f43f ae52 	beq.w	8008752 <_printf_float+0xc2>
 8008aae:	f108 0801 	add.w	r8, r8, #1
 8008ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	4543      	cmp	r3, r8
 8008ab8:	dcf1      	bgt.n	8008a9e <_printf_float+0x40e>
 8008aba:	464b      	mov	r3, r9
 8008abc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ac0:	e6dc      	b.n	800887c <_printf_float+0x1ec>
 8008ac2:	f04f 0800 	mov.w	r8, #0
 8008ac6:	f104 0a1a 	add.w	sl, r4, #26
 8008aca:	e7f2      	b.n	8008ab2 <_printf_float+0x422>
 8008acc:	2301      	movs	r3, #1
 8008ace:	4642      	mov	r2, r8
 8008ad0:	e7df      	b.n	8008a92 <_printf_float+0x402>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	464a      	mov	r2, r9
 8008ad6:	4631      	mov	r1, r6
 8008ad8:	4628      	mov	r0, r5
 8008ada:	47b8      	blx	r7
 8008adc:	3001      	adds	r0, #1
 8008ade:	f43f ae38 	beq.w	8008752 <_printf_float+0xc2>
 8008ae2:	f108 0801 	add.w	r8, r8, #1
 8008ae6:	68e3      	ldr	r3, [r4, #12]
 8008ae8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008aea:	1a5b      	subs	r3, r3, r1
 8008aec:	4543      	cmp	r3, r8
 8008aee:	dcf0      	bgt.n	8008ad2 <_printf_float+0x442>
 8008af0:	e6fa      	b.n	80088e8 <_printf_float+0x258>
 8008af2:	f04f 0800 	mov.w	r8, #0
 8008af6:	f104 0919 	add.w	r9, r4, #25
 8008afa:	e7f4      	b.n	8008ae6 <_printf_float+0x456>

08008afc <_printf_common>:
 8008afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b00:	4616      	mov	r6, r2
 8008b02:	4699      	mov	r9, r3
 8008b04:	688a      	ldr	r2, [r1, #8]
 8008b06:	690b      	ldr	r3, [r1, #16]
 8008b08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	bfb8      	it	lt
 8008b10:	4613      	movlt	r3, r2
 8008b12:	6033      	str	r3, [r6, #0]
 8008b14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b18:	4607      	mov	r7, r0
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	b10a      	cbz	r2, 8008b22 <_printf_common+0x26>
 8008b1e:	3301      	adds	r3, #1
 8008b20:	6033      	str	r3, [r6, #0]
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	0699      	lsls	r1, r3, #26
 8008b26:	bf42      	ittt	mi
 8008b28:	6833      	ldrmi	r3, [r6, #0]
 8008b2a:	3302      	addmi	r3, #2
 8008b2c:	6033      	strmi	r3, [r6, #0]
 8008b2e:	6825      	ldr	r5, [r4, #0]
 8008b30:	f015 0506 	ands.w	r5, r5, #6
 8008b34:	d106      	bne.n	8008b44 <_printf_common+0x48>
 8008b36:	f104 0a19 	add.w	sl, r4, #25
 8008b3a:	68e3      	ldr	r3, [r4, #12]
 8008b3c:	6832      	ldr	r2, [r6, #0]
 8008b3e:	1a9b      	subs	r3, r3, r2
 8008b40:	42ab      	cmp	r3, r5
 8008b42:	dc26      	bgt.n	8008b92 <_printf_common+0x96>
 8008b44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b48:	1e13      	subs	r3, r2, #0
 8008b4a:	6822      	ldr	r2, [r4, #0]
 8008b4c:	bf18      	it	ne
 8008b4e:	2301      	movne	r3, #1
 8008b50:	0692      	lsls	r2, r2, #26
 8008b52:	d42b      	bmi.n	8008bac <_printf_common+0xb0>
 8008b54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b58:	4649      	mov	r1, r9
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	47c0      	blx	r8
 8008b5e:	3001      	adds	r0, #1
 8008b60:	d01e      	beq.n	8008ba0 <_printf_common+0xa4>
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	68e5      	ldr	r5, [r4, #12]
 8008b66:	6832      	ldr	r2, [r6, #0]
 8008b68:	f003 0306 	and.w	r3, r3, #6
 8008b6c:	2b04      	cmp	r3, #4
 8008b6e:	bf08      	it	eq
 8008b70:	1aad      	subeq	r5, r5, r2
 8008b72:	68a3      	ldr	r3, [r4, #8]
 8008b74:	6922      	ldr	r2, [r4, #16]
 8008b76:	bf0c      	ite	eq
 8008b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b7c:	2500      	movne	r5, #0
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	bfc4      	itt	gt
 8008b82:	1a9b      	subgt	r3, r3, r2
 8008b84:	18ed      	addgt	r5, r5, r3
 8008b86:	2600      	movs	r6, #0
 8008b88:	341a      	adds	r4, #26
 8008b8a:	42b5      	cmp	r5, r6
 8008b8c:	d11a      	bne.n	8008bc4 <_printf_common+0xc8>
 8008b8e:	2000      	movs	r0, #0
 8008b90:	e008      	b.n	8008ba4 <_printf_common+0xa8>
 8008b92:	2301      	movs	r3, #1
 8008b94:	4652      	mov	r2, sl
 8008b96:	4649      	mov	r1, r9
 8008b98:	4638      	mov	r0, r7
 8008b9a:	47c0      	blx	r8
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	d103      	bne.n	8008ba8 <_printf_common+0xac>
 8008ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba8:	3501      	adds	r5, #1
 8008baa:	e7c6      	b.n	8008b3a <_printf_common+0x3e>
 8008bac:	18e1      	adds	r1, r4, r3
 8008bae:	1c5a      	adds	r2, r3, #1
 8008bb0:	2030      	movs	r0, #48	; 0x30
 8008bb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bb6:	4422      	add	r2, r4
 8008bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bc0:	3302      	adds	r3, #2
 8008bc2:	e7c7      	b.n	8008b54 <_printf_common+0x58>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	4649      	mov	r1, r9
 8008bca:	4638      	mov	r0, r7
 8008bcc:	47c0      	blx	r8
 8008bce:	3001      	adds	r0, #1
 8008bd0:	d0e6      	beq.n	8008ba0 <_printf_common+0xa4>
 8008bd2:	3601      	adds	r6, #1
 8008bd4:	e7d9      	b.n	8008b8a <_printf_common+0x8e>
	...

08008bd8 <_printf_i>:
 8008bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bdc:	7e0f      	ldrb	r7, [r1, #24]
 8008bde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008be0:	2f78      	cmp	r7, #120	; 0x78
 8008be2:	4691      	mov	r9, r2
 8008be4:	4680      	mov	r8, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	469a      	mov	sl, r3
 8008bea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bee:	d807      	bhi.n	8008c00 <_printf_i+0x28>
 8008bf0:	2f62      	cmp	r7, #98	; 0x62
 8008bf2:	d80a      	bhi.n	8008c0a <_printf_i+0x32>
 8008bf4:	2f00      	cmp	r7, #0
 8008bf6:	f000 80d8 	beq.w	8008daa <_printf_i+0x1d2>
 8008bfa:	2f58      	cmp	r7, #88	; 0x58
 8008bfc:	f000 80a3 	beq.w	8008d46 <_printf_i+0x16e>
 8008c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c08:	e03a      	b.n	8008c80 <_printf_i+0xa8>
 8008c0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c0e:	2b15      	cmp	r3, #21
 8008c10:	d8f6      	bhi.n	8008c00 <_printf_i+0x28>
 8008c12:	a101      	add	r1, pc, #4	; (adr r1, 8008c18 <_printf_i+0x40>)
 8008c14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c18:	08008c71 	.word	0x08008c71
 8008c1c:	08008c85 	.word	0x08008c85
 8008c20:	08008c01 	.word	0x08008c01
 8008c24:	08008c01 	.word	0x08008c01
 8008c28:	08008c01 	.word	0x08008c01
 8008c2c:	08008c01 	.word	0x08008c01
 8008c30:	08008c85 	.word	0x08008c85
 8008c34:	08008c01 	.word	0x08008c01
 8008c38:	08008c01 	.word	0x08008c01
 8008c3c:	08008c01 	.word	0x08008c01
 8008c40:	08008c01 	.word	0x08008c01
 8008c44:	08008d91 	.word	0x08008d91
 8008c48:	08008cb5 	.word	0x08008cb5
 8008c4c:	08008d73 	.word	0x08008d73
 8008c50:	08008c01 	.word	0x08008c01
 8008c54:	08008c01 	.word	0x08008c01
 8008c58:	08008db3 	.word	0x08008db3
 8008c5c:	08008c01 	.word	0x08008c01
 8008c60:	08008cb5 	.word	0x08008cb5
 8008c64:	08008c01 	.word	0x08008c01
 8008c68:	08008c01 	.word	0x08008c01
 8008c6c:	08008d7b 	.word	0x08008d7b
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	1d1a      	adds	r2, r3, #4
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	602a      	str	r2, [r5, #0]
 8008c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c80:	2301      	movs	r3, #1
 8008c82:	e0a3      	b.n	8008dcc <_printf_i+0x1f4>
 8008c84:	6820      	ldr	r0, [r4, #0]
 8008c86:	6829      	ldr	r1, [r5, #0]
 8008c88:	0606      	lsls	r6, r0, #24
 8008c8a:	f101 0304 	add.w	r3, r1, #4
 8008c8e:	d50a      	bpl.n	8008ca6 <_printf_i+0xce>
 8008c90:	680e      	ldr	r6, [r1, #0]
 8008c92:	602b      	str	r3, [r5, #0]
 8008c94:	2e00      	cmp	r6, #0
 8008c96:	da03      	bge.n	8008ca0 <_printf_i+0xc8>
 8008c98:	232d      	movs	r3, #45	; 0x2d
 8008c9a:	4276      	negs	r6, r6
 8008c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ca0:	485e      	ldr	r0, [pc, #376]	; (8008e1c <_printf_i+0x244>)
 8008ca2:	230a      	movs	r3, #10
 8008ca4:	e019      	b.n	8008cda <_printf_i+0x102>
 8008ca6:	680e      	ldr	r6, [r1, #0]
 8008ca8:	602b      	str	r3, [r5, #0]
 8008caa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cae:	bf18      	it	ne
 8008cb0:	b236      	sxthne	r6, r6
 8008cb2:	e7ef      	b.n	8008c94 <_printf_i+0xbc>
 8008cb4:	682b      	ldr	r3, [r5, #0]
 8008cb6:	6820      	ldr	r0, [r4, #0]
 8008cb8:	1d19      	adds	r1, r3, #4
 8008cba:	6029      	str	r1, [r5, #0]
 8008cbc:	0601      	lsls	r1, r0, #24
 8008cbe:	d501      	bpl.n	8008cc4 <_printf_i+0xec>
 8008cc0:	681e      	ldr	r6, [r3, #0]
 8008cc2:	e002      	b.n	8008cca <_printf_i+0xf2>
 8008cc4:	0646      	lsls	r6, r0, #25
 8008cc6:	d5fb      	bpl.n	8008cc0 <_printf_i+0xe8>
 8008cc8:	881e      	ldrh	r6, [r3, #0]
 8008cca:	4854      	ldr	r0, [pc, #336]	; (8008e1c <_printf_i+0x244>)
 8008ccc:	2f6f      	cmp	r7, #111	; 0x6f
 8008cce:	bf0c      	ite	eq
 8008cd0:	2308      	moveq	r3, #8
 8008cd2:	230a      	movne	r3, #10
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cda:	6865      	ldr	r5, [r4, #4]
 8008cdc:	60a5      	str	r5, [r4, #8]
 8008cde:	2d00      	cmp	r5, #0
 8008ce0:	bfa2      	ittt	ge
 8008ce2:	6821      	ldrge	r1, [r4, #0]
 8008ce4:	f021 0104 	bicge.w	r1, r1, #4
 8008ce8:	6021      	strge	r1, [r4, #0]
 8008cea:	b90e      	cbnz	r6, 8008cf0 <_printf_i+0x118>
 8008cec:	2d00      	cmp	r5, #0
 8008cee:	d04d      	beq.n	8008d8c <_printf_i+0x1b4>
 8008cf0:	4615      	mov	r5, r2
 8008cf2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cf6:	fb03 6711 	mls	r7, r3, r1, r6
 8008cfa:	5dc7      	ldrb	r7, [r0, r7]
 8008cfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d00:	4637      	mov	r7, r6
 8008d02:	42bb      	cmp	r3, r7
 8008d04:	460e      	mov	r6, r1
 8008d06:	d9f4      	bls.n	8008cf2 <_printf_i+0x11a>
 8008d08:	2b08      	cmp	r3, #8
 8008d0a:	d10b      	bne.n	8008d24 <_printf_i+0x14c>
 8008d0c:	6823      	ldr	r3, [r4, #0]
 8008d0e:	07de      	lsls	r6, r3, #31
 8008d10:	d508      	bpl.n	8008d24 <_printf_i+0x14c>
 8008d12:	6923      	ldr	r3, [r4, #16]
 8008d14:	6861      	ldr	r1, [r4, #4]
 8008d16:	4299      	cmp	r1, r3
 8008d18:	bfde      	ittt	le
 8008d1a:	2330      	movle	r3, #48	; 0x30
 8008d1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d24:	1b52      	subs	r2, r2, r5
 8008d26:	6122      	str	r2, [r4, #16]
 8008d28:	f8cd a000 	str.w	sl, [sp]
 8008d2c:	464b      	mov	r3, r9
 8008d2e:	aa03      	add	r2, sp, #12
 8008d30:	4621      	mov	r1, r4
 8008d32:	4640      	mov	r0, r8
 8008d34:	f7ff fee2 	bl	8008afc <_printf_common>
 8008d38:	3001      	adds	r0, #1
 8008d3a:	d14c      	bne.n	8008dd6 <_printf_i+0x1fe>
 8008d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d40:	b004      	add	sp, #16
 8008d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d46:	4835      	ldr	r0, [pc, #212]	; (8008e1c <_printf_i+0x244>)
 8008d48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d4c:	6829      	ldr	r1, [r5, #0]
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d54:	6029      	str	r1, [r5, #0]
 8008d56:	061d      	lsls	r5, r3, #24
 8008d58:	d514      	bpl.n	8008d84 <_printf_i+0x1ac>
 8008d5a:	07df      	lsls	r7, r3, #31
 8008d5c:	bf44      	itt	mi
 8008d5e:	f043 0320 	orrmi.w	r3, r3, #32
 8008d62:	6023      	strmi	r3, [r4, #0]
 8008d64:	b91e      	cbnz	r6, 8008d6e <_printf_i+0x196>
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	f023 0320 	bic.w	r3, r3, #32
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	2310      	movs	r3, #16
 8008d70:	e7b0      	b.n	8008cd4 <_printf_i+0xfc>
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	f043 0320 	orr.w	r3, r3, #32
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	2378      	movs	r3, #120	; 0x78
 8008d7c:	4828      	ldr	r0, [pc, #160]	; (8008e20 <_printf_i+0x248>)
 8008d7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d82:	e7e3      	b.n	8008d4c <_printf_i+0x174>
 8008d84:	0659      	lsls	r1, r3, #25
 8008d86:	bf48      	it	mi
 8008d88:	b2b6      	uxthmi	r6, r6
 8008d8a:	e7e6      	b.n	8008d5a <_printf_i+0x182>
 8008d8c:	4615      	mov	r5, r2
 8008d8e:	e7bb      	b.n	8008d08 <_printf_i+0x130>
 8008d90:	682b      	ldr	r3, [r5, #0]
 8008d92:	6826      	ldr	r6, [r4, #0]
 8008d94:	6961      	ldr	r1, [r4, #20]
 8008d96:	1d18      	adds	r0, r3, #4
 8008d98:	6028      	str	r0, [r5, #0]
 8008d9a:	0635      	lsls	r5, r6, #24
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	d501      	bpl.n	8008da4 <_printf_i+0x1cc>
 8008da0:	6019      	str	r1, [r3, #0]
 8008da2:	e002      	b.n	8008daa <_printf_i+0x1d2>
 8008da4:	0670      	lsls	r0, r6, #25
 8008da6:	d5fb      	bpl.n	8008da0 <_printf_i+0x1c8>
 8008da8:	8019      	strh	r1, [r3, #0]
 8008daa:	2300      	movs	r3, #0
 8008dac:	6123      	str	r3, [r4, #16]
 8008dae:	4615      	mov	r5, r2
 8008db0:	e7ba      	b.n	8008d28 <_printf_i+0x150>
 8008db2:	682b      	ldr	r3, [r5, #0]
 8008db4:	1d1a      	adds	r2, r3, #4
 8008db6:	602a      	str	r2, [r5, #0]
 8008db8:	681d      	ldr	r5, [r3, #0]
 8008dba:	6862      	ldr	r2, [r4, #4]
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	f7f7 fa0e 	bl	80001e0 <memchr>
 8008dc4:	b108      	cbz	r0, 8008dca <_printf_i+0x1f2>
 8008dc6:	1b40      	subs	r0, r0, r5
 8008dc8:	6060      	str	r0, [r4, #4]
 8008dca:	6863      	ldr	r3, [r4, #4]
 8008dcc:	6123      	str	r3, [r4, #16]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dd4:	e7a8      	b.n	8008d28 <_printf_i+0x150>
 8008dd6:	6923      	ldr	r3, [r4, #16]
 8008dd8:	462a      	mov	r2, r5
 8008dda:	4649      	mov	r1, r9
 8008ddc:	4640      	mov	r0, r8
 8008dde:	47d0      	blx	sl
 8008de0:	3001      	adds	r0, #1
 8008de2:	d0ab      	beq.n	8008d3c <_printf_i+0x164>
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	079b      	lsls	r3, r3, #30
 8008de8:	d413      	bmi.n	8008e12 <_printf_i+0x23a>
 8008dea:	68e0      	ldr	r0, [r4, #12]
 8008dec:	9b03      	ldr	r3, [sp, #12]
 8008dee:	4298      	cmp	r0, r3
 8008df0:	bfb8      	it	lt
 8008df2:	4618      	movlt	r0, r3
 8008df4:	e7a4      	b.n	8008d40 <_printf_i+0x168>
 8008df6:	2301      	movs	r3, #1
 8008df8:	4632      	mov	r2, r6
 8008dfa:	4649      	mov	r1, r9
 8008dfc:	4640      	mov	r0, r8
 8008dfe:	47d0      	blx	sl
 8008e00:	3001      	adds	r0, #1
 8008e02:	d09b      	beq.n	8008d3c <_printf_i+0x164>
 8008e04:	3501      	adds	r5, #1
 8008e06:	68e3      	ldr	r3, [r4, #12]
 8008e08:	9903      	ldr	r1, [sp, #12]
 8008e0a:	1a5b      	subs	r3, r3, r1
 8008e0c:	42ab      	cmp	r3, r5
 8008e0e:	dcf2      	bgt.n	8008df6 <_printf_i+0x21e>
 8008e10:	e7eb      	b.n	8008dea <_printf_i+0x212>
 8008e12:	2500      	movs	r5, #0
 8008e14:	f104 0619 	add.w	r6, r4, #25
 8008e18:	e7f5      	b.n	8008e06 <_printf_i+0x22e>
 8008e1a:	bf00      	nop
 8008e1c:	0800cf1e 	.word	0x0800cf1e
 8008e20:	0800cf2f 	.word	0x0800cf2f

08008e24 <_scanf_float>:
 8008e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e28:	b087      	sub	sp, #28
 8008e2a:	4617      	mov	r7, r2
 8008e2c:	9303      	str	r3, [sp, #12]
 8008e2e:	688b      	ldr	r3, [r1, #8]
 8008e30:	1e5a      	subs	r2, r3, #1
 8008e32:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008e36:	bf83      	ittte	hi
 8008e38:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008e3c:	195b      	addhi	r3, r3, r5
 8008e3e:	9302      	strhi	r3, [sp, #8]
 8008e40:	2300      	movls	r3, #0
 8008e42:	bf86      	itte	hi
 8008e44:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008e48:	608b      	strhi	r3, [r1, #8]
 8008e4a:	9302      	strls	r3, [sp, #8]
 8008e4c:	680b      	ldr	r3, [r1, #0]
 8008e4e:	468b      	mov	fp, r1
 8008e50:	2500      	movs	r5, #0
 8008e52:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008e56:	f84b 3b1c 	str.w	r3, [fp], #28
 8008e5a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008e5e:	4680      	mov	r8, r0
 8008e60:	460c      	mov	r4, r1
 8008e62:	465e      	mov	r6, fp
 8008e64:	46aa      	mov	sl, r5
 8008e66:	46a9      	mov	r9, r5
 8008e68:	9501      	str	r5, [sp, #4]
 8008e6a:	68a2      	ldr	r2, [r4, #8]
 8008e6c:	b152      	cbz	r2, 8008e84 <_scanf_float+0x60>
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	2b4e      	cmp	r3, #78	; 0x4e
 8008e74:	d864      	bhi.n	8008f40 <_scanf_float+0x11c>
 8008e76:	2b40      	cmp	r3, #64	; 0x40
 8008e78:	d83c      	bhi.n	8008ef4 <_scanf_float+0xd0>
 8008e7a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008e7e:	b2c8      	uxtb	r0, r1
 8008e80:	280e      	cmp	r0, #14
 8008e82:	d93a      	bls.n	8008efa <_scanf_float+0xd6>
 8008e84:	f1b9 0f00 	cmp.w	r9, #0
 8008e88:	d003      	beq.n	8008e92 <_scanf_float+0x6e>
 8008e8a:	6823      	ldr	r3, [r4, #0]
 8008e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e96:	f1ba 0f01 	cmp.w	sl, #1
 8008e9a:	f200 8113 	bhi.w	80090c4 <_scanf_float+0x2a0>
 8008e9e:	455e      	cmp	r6, fp
 8008ea0:	f200 8105 	bhi.w	80090ae <_scanf_float+0x28a>
 8008ea4:	2501      	movs	r5, #1
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	b007      	add	sp, #28
 8008eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008eb2:	2a0d      	cmp	r2, #13
 8008eb4:	d8e6      	bhi.n	8008e84 <_scanf_float+0x60>
 8008eb6:	a101      	add	r1, pc, #4	; (adr r1, 8008ebc <_scanf_float+0x98>)
 8008eb8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008ebc:	08008ffb 	.word	0x08008ffb
 8008ec0:	08008e85 	.word	0x08008e85
 8008ec4:	08008e85 	.word	0x08008e85
 8008ec8:	08008e85 	.word	0x08008e85
 8008ecc:	0800905b 	.word	0x0800905b
 8008ed0:	08009033 	.word	0x08009033
 8008ed4:	08008e85 	.word	0x08008e85
 8008ed8:	08008e85 	.word	0x08008e85
 8008edc:	08009009 	.word	0x08009009
 8008ee0:	08008e85 	.word	0x08008e85
 8008ee4:	08008e85 	.word	0x08008e85
 8008ee8:	08008e85 	.word	0x08008e85
 8008eec:	08008e85 	.word	0x08008e85
 8008ef0:	08008fc1 	.word	0x08008fc1
 8008ef4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008ef8:	e7db      	b.n	8008eb2 <_scanf_float+0x8e>
 8008efa:	290e      	cmp	r1, #14
 8008efc:	d8c2      	bhi.n	8008e84 <_scanf_float+0x60>
 8008efe:	a001      	add	r0, pc, #4	; (adr r0, 8008f04 <_scanf_float+0xe0>)
 8008f00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008f04:	08008fb3 	.word	0x08008fb3
 8008f08:	08008e85 	.word	0x08008e85
 8008f0c:	08008fb3 	.word	0x08008fb3
 8008f10:	08009047 	.word	0x08009047
 8008f14:	08008e85 	.word	0x08008e85
 8008f18:	08008f61 	.word	0x08008f61
 8008f1c:	08008f9d 	.word	0x08008f9d
 8008f20:	08008f9d 	.word	0x08008f9d
 8008f24:	08008f9d 	.word	0x08008f9d
 8008f28:	08008f9d 	.word	0x08008f9d
 8008f2c:	08008f9d 	.word	0x08008f9d
 8008f30:	08008f9d 	.word	0x08008f9d
 8008f34:	08008f9d 	.word	0x08008f9d
 8008f38:	08008f9d 	.word	0x08008f9d
 8008f3c:	08008f9d 	.word	0x08008f9d
 8008f40:	2b6e      	cmp	r3, #110	; 0x6e
 8008f42:	d809      	bhi.n	8008f58 <_scanf_float+0x134>
 8008f44:	2b60      	cmp	r3, #96	; 0x60
 8008f46:	d8b2      	bhi.n	8008eae <_scanf_float+0x8a>
 8008f48:	2b54      	cmp	r3, #84	; 0x54
 8008f4a:	d077      	beq.n	800903c <_scanf_float+0x218>
 8008f4c:	2b59      	cmp	r3, #89	; 0x59
 8008f4e:	d199      	bne.n	8008e84 <_scanf_float+0x60>
 8008f50:	2d07      	cmp	r5, #7
 8008f52:	d197      	bne.n	8008e84 <_scanf_float+0x60>
 8008f54:	2508      	movs	r5, #8
 8008f56:	e029      	b.n	8008fac <_scanf_float+0x188>
 8008f58:	2b74      	cmp	r3, #116	; 0x74
 8008f5a:	d06f      	beq.n	800903c <_scanf_float+0x218>
 8008f5c:	2b79      	cmp	r3, #121	; 0x79
 8008f5e:	e7f6      	b.n	8008f4e <_scanf_float+0x12a>
 8008f60:	6821      	ldr	r1, [r4, #0]
 8008f62:	05c8      	lsls	r0, r1, #23
 8008f64:	d51a      	bpl.n	8008f9c <_scanf_float+0x178>
 8008f66:	9b02      	ldr	r3, [sp, #8]
 8008f68:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008f6c:	6021      	str	r1, [r4, #0]
 8008f6e:	f109 0901 	add.w	r9, r9, #1
 8008f72:	b11b      	cbz	r3, 8008f7c <_scanf_float+0x158>
 8008f74:	3b01      	subs	r3, #1
 8008f76:	3201      	adds	r2, #1
 8008f78:	9302      	str	r3, [sp, #8]
 8008f7a:	60a2      	str	r2, [r4, #8]
 8008f7c:	68a3      	ldr	r3, [r4, #8]
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	60a3      	str	r3, [r4, #8]
 8008f82:	6923      	ldr	r3, [r4, #16]
 8008f84:	3301      	adds	r3, #1
 8008f86:	6123      	str	r3, [r4, #16]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	607b      	str	r3, [r7, #4]
 8008f90:	f340 8084 	ble.w	800909c <_scanf_float+0x278>
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	3301      	adds	r3, #1
 8008f98:	603b      	str	r3, [r7, #0]
 8008f9a:	e766      	b.n	8008e6a <_scanf_float+0x46>
 8008f9c:	eb1a 0f05 	cmn.w	sl, r5
 8008fa0:	f47f af70 	bne.w	8008e84 <_scanf_float+0x60>
 8008fa4:	6822      	ldr	r2, [r4, #0]
 8008fa6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008faa:	6022      	str	r2, [r4, #0]
 8008fac:	f806 3b01 	strb.w	r3, [r6], #1
 8008fb0:	e7e4      	b.n	8008f7c <_scanf_float+0x158>
 8008fb2:	6822      	ldr	r2, [r4, #0]
 8008fb4:	0610      	lsls	r0, r2, #24
 8008fb6:	f57f af65 	bpl.w	8008e84 <_scanf_float+0x60>
 8008fba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fbe:	e7f4      	b.n	8008faa <_scanf_float+0x186>
 8008fc0:	f1ba 0f00 	cmp.w	sl, #0
 8008fc4:	d10e      	bne.n	8008fe4 <_scanf_float+0x1c0>
 8008fc6:	f1b9 0f00 	cmp.w	r9, #0
 8008fca:	d10e      	bne.n	8008fea <_scanf_float+0x1c6>
 8008fcc:	6822      	ldr	r2, [r4, #0]
 8008fce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008fd2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008fd6:	d108      	bne.n	8008fea <_scanf_float+0x1c6>
 8008fd8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008fdc:	6022      	str	r2, [r4, #0]
 8008fde:	f04f 0a01 	mov.w	sl, #1
 8008fe2:	e7e3      	b.n	8008fac <_scanf_float+0x188>
 8008fe4:	f1ba 0f02 	cmp.w	sl, #2
 8008fe8:	d055      	beq.n	8009096 <_scanf_float+0x272>
 8008fea:	2d01      	cmp	r5, #1
 8008fec:	d002      	beq.n	8008ff4 <_scanf_float+0x1d0>
 8008fee:	2d04      	cmp	r5, #4
 8008ff0:	f47f af48 	bne.w	8008e84 <_scanf_float+0x60>
 8008ff4:	3501      	adds	r5, #1
 8008ff6:	b2ed      	uxtb	r5, r5
 8008ff8:	e7d8      	b.n	8008fac <_scanf_float+0x188>
 8008ffa:	f1ba 0f01 	cmp.w	sl, #1
 8008ffe:	f47f af41 	bne.w	8008e84 <_scanf_float+0x60>
 8009002:	f04f 0a02 	mov.w	sl, #2
 8009006:	e7d1      	b.n	8008fac <_scanf_float+0x188>
 8009008:	b97d      	cbnz	r5, 800902a <_scanf_float+0x206>
 800900a:	f1b9 0f00 	cmp.w	r9, #0
 800900e:	f47f af3c 	bne.w	8008e8a <_scanf_float+0x66>
 8009012:	6822      	ldr	r2, [r4, #0]
 8009014:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009018:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800901c:	f47f af39 	bne.w	8008e92 <_scanf_float+0x6e>
 8009020:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009024:	6022      	str	r2, [r4, #0]
 8009026:	2501      	movs	r5, #1
 8009028:	e7c0      	b.n	8008fac <_scanf_float+0x188>
 800902a:	2d03      	cmp	r5, #3
 800902c:	d0e2      	beq.n	8008ff4 <_scanf_float+0x1d0>
 800902e:	2d05      	cmp	r5, #5
 8009030:	e7de      	b.n	8008ff0 <_scanf_float+0x1cc>
 8009032:	2d02      	cmp	r5, #2
 8009034:	f47f af26 	bne.w	8008e84 <_scanf_float+0x60>
 8009038:	2503      	movs	r5, #3
 800903a:	e7b7      	b.n	8008fac <_scanf_float+0x188>
 800903c:	2d06      	cmp	r5, #6
 800903e:	f47f af21 	bne.w	8008e84 <_scanf_float+0x60>
 8009042:	2507      	movs	r5, #7
 8009044:	e7b2      	b.n	8008fac <_scanf_float+0x188>
 8009046:	6822      	ldr	r2, [r4, #0]
 8009048:	0591      	lsls	r1, r2, #22
 800904a:	f57f af1b 	bpl.w	8008e84 <_scanf_float+0x60>
 800904e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009052:	6022      	str	r2, [r4, #0]
 8009054:	f8cd 9004 	str.w	r9, [sp, #4]
 8009058:	e7a8      	b.n	8008fac <_scanf_float+0x188>
 800905a:	6822      	ldr	r2, [r4, #0]
 800905c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009060:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009064:	d006      	beq.n	8009074 <_scanf_float+0x250>
 8009066:	0550      	lsls	r0, r2, #21
 8009068:	f57f af0c 	bpl.w	8008e84 <_scanf_float+0x60>
 800906c:	f1b9 0f00 	cmp.w	r9, #0
 8009070:	f43f af0f 	beq.w	8008e92 <_scanf_float+0x6e>
 8009074:	0591      	lsls	r1, r2, #22
 8009076:	bf58      	it	pl
 8009078:	9901      	ldrpl	r1, [sp, #4]
 800907a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800907e:	bf58      	it	pl
 8009080:	eba9 0101 	subpl.w	r1, r9, r1
 8009084:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009088:	bf58      	it	pl
 800908a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800908e:	6022      	str	r2, [r4, #0]
 8009090:	f04f 0900 	mov.w	r9, #0
 8009094:	e78a      	b.n	8008fac <_scanf_float+0x188>
 8009096:	f04f 0a03 	mov.w	sl, #3
 800909a:	e787      	b.n	8008fac <_scanf_float+0x188>
 800909c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80090a0:	4639      	mov	r1, r7
 80090a2:	4640      	mov	r0, r8
 80090a4:	4798      	blx	r3
 80090a6:	2800      	cmp	r0, #0
 80090a8:	f43f aedf 	beq.w	8008e6a <_scanf_float+0x46>
 80090ac:	e6ea      	b.n	8008e84 <_scanf_float+0x60>
 80090ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090b6:	463a      	mov	r2, r7
 80090b8:	4640      	mov	r0, r8
 80090ba:	4798      	blx	r3
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	3b01      	subs	r3, #1
 80090c0:	6123      	str	r3, [r4, #16]
 80090c2:	e6ec      	b.n	8008e9e <_scanf_float+0x7a>
 80090c4:	1e6b      	subs	r3, r5, #1
 80090c6:	2b06      	cmp	r3, #6
 80090c8:	d825      	bhi.n	8009116 <_scanf_float+0x2f2>
 80090ca:	2d02      	cmp	r5, #2
 80090cc:	d836      	bhi.n	800913c <_scanf_float+0x318>
 80090ce:	455e      	cmp	r6, fp
 80090d0:	f67f aee8 	bls.w	8008ea4 <_scanf_float+0x80>
 80090d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090dc:	463a      	mov	r2, r7
 80090de:	4640      	mov	r0, r8
 80090e0:	4798      	blx	r3
 80090e2:	6923      	ldr	r3, [r4, #16]
 80090e4:	3b01      	subs	r3, #1
 80090e6:	6123      	str	r3, [r4, #16]
 80090e8:	e7f1      	b.n	80090ce <_scanf_float+0x2aa>
 80090ea:	9802      	ldr	r0, [sp, #8]
 80090ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80090f4:	9002      	str	r0, [sp, #8]
 80090f6:	463a      	mov	r2, r7
 80090f8:	4640      	mov	r0, r8
 80090fa:	4798      	blx	r3
 80090fc:	6923      	ldr	r3, [r4, #16]
 80090fe:	3b01      	subs	r3, #1
 8009100:	6123      	str	r3, [r4, #16]
 8009102:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009106:	fa5f fa8a 	uxtb.w	sl, sl
 800910a:	f1ba 0f02 	cmp.w	sl, #2
 800910e:	d1ec      	bne.n	80090ea <_scanf_float+0x2c6>
 8009110:	3d03      	subs	r5, #3
 8009112:	b2ed      	uxtb	r5, r5
 8009114:	1b76      	subs	r6, r6, r5
 8009116:	6823      	ldr	r3, [r4, #0]
 8009118:	05da      	lsls	r2, r3, #23
 800911a:	d52f      	bpl.n	800917c <_scanf_float+0x358>
 800911c:	055b      	lsls	r3, r3, #21
 800911e:	d510      	bpl.n	8009142 <_scanf_float+0x31e>
 8009120:	455e      	cmp	r6, fp
 8009122:	f67f aebf 	bls.w	8008ea4 <_scanf_float+0x80>
 8009126:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800912a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800912e:	463a      	mov	r2, r7
 8009130:	4640      	mov	r0, r8
 8009132:	4798      	blx	r3
 8009134:	6923      	ldr	r3, [r4, #16]
 8009136:	3b01      	subs	r3, #1
 8009138:	6123      	str	r3, [r4, #16]
 800913a:	e7f1      	b.n	8009120 <_scanf_float+0x2fc>
 800913c:	46aa      	mov	sl, r5
 800913e:	9602      	str	r6, [sp, #8]
 8009140:	e7df      	b.n	8009102 <_scanf_float+0x2de>
 8009142:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009146:	6923      	ldr	r3, [r4, #16]
 8009148:	2965      	cmp	r1, #101	; 0x65
 800914a:	f103 33ff 	add.w	r3, r3, #4294967295
 800914e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009152:	6123      	str	r3, [r4, #16]
 8009154:	d00c      	beq.n	8009170 <_scanf_float+0x34c>
 8009156:	2945      	cmp	r1, #69	; 0x45
 8009158:	d00a      	beq.n	8009170 <_scanf_float+0x34c>
 800915a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800915e:	463a      	mov	r2, r7
 8009160:	4640      	mov	r0, r8
 8009162:	4798      	blx	r3
 8009164:	6923      	ldr	r3, [r4, #16]
 8009166:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800916a:	3b01      	subs	r3, #1
 800916c:	1eb5      	subs	r5, r6, #2
 800916e:	6123      	str	r3, [r4, #16]
 8009170:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009174:	463a      	mov	r2, r7
 8009176:	4640      	mov	r0, r8
 8009178:	4798      	blx	r3
 800917a:	462e      	mov	r6, r5
 800917c:	6825      	ldr	r5, [r4, #0]
 800917e:	f015 0510 	ands.w	r5, r5, #16
 8009182:	d159      	bne.n	8009238 <_scanf_float+0x414>
 8009184:	7035      	strb	r5, [r6, #0]
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800918c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009190:	d11b      	bne.n	80091ca <_scanf_float+0x3a6>
 8009192:	9b01      	ldr	r3, [sp, #4]
 8009194:	454b      	cmp	r3, r9
 8009196:	eba3 0209 	sub.w	r2, r3, r9
 800919a:	d123      	bne.n	80091e4 <_scanf_float+0x3c0>
 800919c:	2200      	movs	r2, #0
 800919e:	4659      	mov	r1, fp
 80091a0:	4640      	mov	r0, r8
 80091a2:	f000 fecb 	bl	8009f3c <_strtod_r>
 80091a6:	6822      	ldr	r2, [r4, #0]
 80091a8:	9b03      	ldr	r3, [sp, #12]
 80091aa:	f012 0f02 	tst.w	r2, #2
 80091ae:	ec57 6b10 	vmov	r6, r7, d0
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	d021      	beq.n	80091fa <_scanf_float+0x3d6>
 80091b6:	9903      	ldr	r1, [sp, #12]
 80091b8:	1d1a      	adds	r2, r3, #4
 80091ba:	600a      	str	r2, [r1, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	e9c3 6700 	strd	r6, r7, [r3]
 80091c2:	68e3      	ldr	r3, [r4, #12]
 80091c4:	3301      	adds	r3, #1
 80091c6:	60e3      	str	r3, [r4, #12]
 80091c8:	e66d      	b.n	8008ea6 <_scanf_float+0x82>
 80091ca:	9b04      	ldr	r3, [sp, #16]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d0e5      	beq.n	800919c <_scanf_float+0x378>
 80091d0:	9905      	ldr	r1, [sp, #20]
 80091d2:	230a      	movs	r3, #10
 80091d4:	462a      	mov	r2, r5
 80091d6:	3101      	adds	r1, #1
 80091d8:	4640      	mov	r0, r8
 80091da:	f000 ff37 	bl	800a04c <_strtol_r>
 80091de:	9b04      	ldr	r3, [sp, #16]
 80091e0:	9e05      	ldr	r6, [sp, #20]
 80091e2:	1ac2      	subs	r2, r0, r3
 80091e4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80091e8:	429e      	cmp	r6, r3
 80091ea:	bf28      	it	cs
 80091ec:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80091f0:	4912      	ldr	r1, [pc, #72]	; (800923c <_scanf_float+0x418>)
 80091f2:	4630      	mov	r0, r6
 80091f4:	f000 f860 	bl	80092b8 <siprintf>
 80091f8:	e7d0      	b.n	800919c <_scanf_float+0x378>
 80091fa:	9903      	ldr	r1, [sp, #12]
 80091fc:	f012 0f04 	tst.w	r2, #4
 8009200:	f103 0204 	add.w	r2, r3, #4
 8009204:	600a      	str	r2, [r1, #0]
 8009206:	d1d9      	bne.n	80091bc <_scanf_float+0x398>
 8009208:	f8d3 8000 	ldr.w	r8, [r3]
 800920c:	ee10 2a10 	vmov	r2, s0
 8009210:	ee10 0a10 	vmov	r0, s0
 8009214:	463b      	mov	r3, r7
 8009216:	4639      	mov	r1, r7
 8009218:	f7f7 fc88 	bl	8000b2c <__aeabi_dcmpun>
 800921c:	b128      	cbz	r0, 800922a <_scanf_float+0x406>
 800921e:	4808      	ldr	r0, [pc, #32]	; (8009240 <_scanf_float+0x41c>)
 8009220:	f000 f810 	bl	8009244 <nanf>
 8009224:	ed88 0a00 	vstr	s0, [r8]
 8009228:	e7cb      	b.n	80091c2 <_scanf_float+0x39e>
 800922a:	4630      	mov	r0, r6
 800922c:	4639      	mov	r1, r7
 800922e:	f7f7 fcdb 	bl	8000be8 <__aeabi_d2f>
 8009232:	f8c8 0000 	str.w	r0, [r8]
 8009236:	e7c4      	b.n	80091c2 <_scanf_float+0x39e>
 8009238:	2500      	movs	r5, #0
 800923a:	e634      	b.n	8008ea6 <_scanf_float+0x82>
 800923c:	0800cf40 	.word	0x0800cf40
 8009240:	0800d348 	.word	0x0800d348

08009244 <nanf>:
 8009244:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800924c <nanf+0x8>
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	7fc00000 	.word	0x7fc00000

08009250 <sniprintf>:
 8009250:	b40c      	push	{r2, r3}
 8009252:	b530      	push	{r4, r5, lr}
 8009254:	4b17      	ldr	r3, [pc, #92]	; (80092b4 <sniprintf+0x64>)
 8009256:	1e0c      	subs	r4, r1, #0
 8009258:	681d      	ldr	r5, [r3, #0]
 800925a:	b09d      	sub	sp, #116	; 0x74
 800925c:	da08      	bge.n	8009270 <sniprintf+0x20>
 800925e:	238b      	movs	r3, #139	; 0x8b
 8009260:	602b      	str	r3, [r5, #0]
 8009262:	f04f 30ff 	mov.w	r0, #4294967295
 8009266:	b01d      	add	sp, #116	; 0x74
 8009268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800926c:	b002      	add	sp, #8
 800926e:	4770      	bx	lr
 8009270:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009274:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009278:	bf14      	ite	ne
 800927a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800927e:	4623      	moveq	r3, r4
 8009280:	9304      	str	r3, [sp, #16]
 8009282:	9307      	str	r3, [sp, #28]
 8009284:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009288:	9002      	str	r0, [sp, #8]
 800928a:	9006      	str	r0, [sp, #24]
 800928c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009290:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009292:	ab21      	add	r3, sp, #132	; 0x84
 8009294:	a902      	add	r1, sp, #8
 8009296:	4628      	mov	r0, r5
 8009298:	9301      	str	r3, [sp, #4]
 800929a:	f002 fef5 	bl	800c088 <_svfiprintf_r>
 800929e:	1c43      	adds	r3, r0, #1
 80092a0:	bfbc      	itt	lt
 80092a2:	238b      	movlt	r3, #139	; 0x8b
 80092a4:	602b      	strlt	r3, [r5, #0]
 80092a6:	2c00      	cmp	r4, #0
 80092a8:	d0dd      	beq.n	8009266 <sniprintf+0x16>
 80092aa:	9b02      	ldr	r3, [sp, #8]
 80092ac:	2200      	movs	r2, #0
 80092ae:	701a      	strb	r2, [r3, #0]
 80092b0:	e7d9      	b.n	8009266 <sniprintf+0x16>
 80092b2:	bf00      	nop
 80092b4:	200000fc 	.word	0x200000fc

080092b8 <siprintf>:
 80092b8:	b40e      	push	{r1, r2, r3}
 80092ba:	b500      	push	{lr}
 80092bc:	b09c      	sub	sp, #112	; 0x70
 80092be:	ab1d      	add	r3, sp, #116	; 0x74
 80092c0:	9002      	str	r0, [sp, #8]
 80092c2:	9006      	str	r0, [sp, #24]
 80092c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092c8:	4809      	ldr	r0, [pc, #36]	; (80092f0 <siprintf+0x38>)
 80092ca:	9107      	str	r1, [sp, #28]
 80092cc:	9104      	str	r1, [sp, #16]
 80092ce:	4909      	ldr	r1, [pc, #36]	; (80092f4 <siprintf+0x3c>)
 80092d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80092d4:	9105      	str	r1, [sp, #20]
 80092d6:	6800      	ldr	r0, [r0, #0]
 80092d8:	9301      	str	r3, [sp, #4]
 80092da:	a902      	add	r1, sp, #8
 80092dc:	f002 fed4 	bl	800c088 <_svfiprintf_r>
 80092e0:	9b02      	ldr	r3, [sp, #8]
 80092e2:	2200      	movs	r2, #0
 80092e4:	701a      	strb	r2, [r3, #0]
 80092e6:	b01c      	add	sp, #112	; 0x70
 80092e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092ec:	b003      	add	sp, #12
 80092ee:	4770      	bx	lr
 80092f0:	200000fc 	.word	0x200000fc
 80092f4:	ffff0208 	.word	0xffff0208

080092f8 <sulp>:
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	4604      	mov	r4, r0
 80092fc:	460d      	mov	r5, r1
 80092fe:	ec45 4b10 	vmov	d0, r4, r5
 8009302:	4616      	mov	r6, r2
 8009304:	f002 fc1e 	bl	800bb44 <__ulp>
 8009308:	ec51 0b10 	vmov	r0, r1, d0
 800930c:	b17e      	cbz	r6, 800932e <sulp+0x36>
 800930e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009312:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009316:	2b00      	cmp	r3, #0
 8009318:	dd09      	ble.n	800932e <sulp+0x36>
 800931a:	051b      	lsls	r3, r3, #20
 800931c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009320:	2400      	movs	r4, #0
 8009322:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009326:	4622      	mov	r2, r4
 8009328:	462b      	mov	r3, r5
 800932a:	f7f7 f965 	bl	80005f8 <__aeabi_dmul>
 800932e:	bd70      	pop	{r4, r5, r6, pc}

08009330 <_strtod_l>:
 8009330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009334:	ed2d 8b02 	vpush	{d8}
 8009338:	b09d      	sub	sp, #116	; 0x74
 800933a:	461f      	mov	r7, r3
 800933c:	2300      	movs	r3, #0
 800933e:	9318      	str	r3, [sp, #96]	; 0x60
 8009340:	4ba2      	ldr	r3, [pc, #648]	; (80095cc <_strtod_l+0x29c>)
 8009342:	9213      	str	r2, [sp, #76]	; 0x4c
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	9305      	str	r3, [sp, #20]
 8009348:	4604      	mov	r4, r0
 800934a:	4618      	mov	r0, r3
 800934c:	4688      	mov	r8, r1
 800934e:	f7f6 ff3f 	bl	80001d0 <strlen>
 8009352:	f04f 0a00 	mov.w	sl, #0
 8009356:	4605      	mov	r5, r0
 8009358:	f04f 0b00 	mov.w	fp, #0
 800935c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009360:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009362:	781a      	ldrb	r2, [r3, #0]
 8009364:	2a2b      	cmp	r2, #43	; 0x2b
 8009366:	d04e      	beq.n	8009406 <_strtod_l+0xd6>
 8009368:	d83b      	bhi.n	80093e2 <_strtod_l+0xb2>
 800936a:	2a0d      	cmp	r2, #13
 800936c:	d834      	bhi.n	80093d8 <_strtod_l+0xa8>
 800936e:	2a08      	cmp	r2, #8
 8009370:	d834      	bhi.n	80093dc <_strtod_l+0xac>
 8009372:	2a00      	cmp	r2, #0
 8009374:	d03e      	beq.n	80093f4 <_strtod_l+0xc4>
 8009376:	2300      	movs	r3, #0
 8009378:	930a      	str	r3, [sp, #40]	; 0x28
 800937a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800937c:	7833      	ldrb	r3, [r6, #0]
 800937e:	2b30      	cmp	r3, #48	; 0x30
 8009380:	f040 80b0 	bne.w	80094e4 <_strtod_l+0x1b4>
 8009384:	7873      	ldrb	r3, [r6, #1]
 8009386:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800938a:	2b58      	cmp	r3, #88	; 0x58
 800938c:	d168      	bne.n	8009460 <_strtod_l+0x130>
 800938e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	ab18      	add	r3, sp, #96	; 0x60
 8009394:	9702      	str	r7, [sp, #8]
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	4a8d      	ldr	r2, [pc, #564]	; (80095d0 <_strtod_l+0x2a0>)
 800939a:	ab19      	add	r3, sp, #100	; 0x64
 800939c:	a917      	add	r1, sp, #92	; 0x5c
 800939e:	4620      	mov	r0, r4
 80093a0:	f001 fd38 	bl	800ae14 <__gethex>
 80093a4:	f010 0707 	ands.w	r7, r0, #7
 80093a8:	4605      	mov	r5, r0
 80093aa:	d005      	beq.n	80093b8 <_strtod_l+0x88>
 80093ac:	2f06      	cmp	r7, #6
 80093ae:	d12c      	bne.n	800940a <_strtod_l+0xda>
 80093b0:	3601      	adds	r6, #1
 80093b2:	2300      	movs	r3, #0
 80093b4:	9617      	str	r6, [sp, #92]	; 0x5c
 80093b6:	930a      	str	r3, [sp, #40]	; 0x28
 80093b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f040 8590 	bne.w	8009ee0 <_strtod_l+0xbb0>
 80093c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093c2:	b1eb      	cbz	r3, 8009400 <_strtod_l+0xd0>
 80093c4:	4652      	mov	r2, sl
 80093c6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80093ca:	ec43 2b10 	vmov	d0, r2, r3
 80093ce:	b01d      	add	sp, #116	; 0x74
 80093d0:	ecbd 8b02 	vpop	{d8}
 80093d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d8:	2a20      	cmp	r2, #32
 80093da:	d1cc      	bne.n	8009376 <_strtod_l+0x46>
 80093dc:	3301      	adds	r3, #1
 80093de:	9317      	str	r3, [sp, #92]	; 0x5c
 80093e0:	e7be      	b.n	8009360 <_strtod_l+0x30>
 80093e2:	2a2d      	cmp	r2, #45	; 0x2d
 80093e4:	d1c7      	bne.n	8009376 <_strtod_l+0x46>
 80093e6:	2201      	movs	r2, #1
 80093e8:	920a      	str	r2, [sp, #40]	; 0x28
 80093ea:	1c5a      	adds	r2, r3, #1
 80093ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80093ee:	785b      	ldrb	r3, [r3, #1]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1c2      	bne.n	800937a <_strtod_l+0x4a>
 80093f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093f6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f040 856e 	bne.w	8009edc <_strtod_l+0xbac>
 8009400:	4652      	mov	r2, sl
 8009402:	465b      	mov	r3, fp
 8009404:	e7e1      	b.n	80093ca <_strtod_l+0x9a>
 8009406:	2200      	movs	r2, #0
 8009408:	e7ee      	b.n	80093e8 <_strtod_l+0xb8>
 800940a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800940c:	b13a      	cbz	r2, 800941e <_strtod_l+0xee>
 800940e:	2135      	movs	r1, #53	; 0x35
 8009410:	a81a      	add	r0, sp, #104	; 0x68
 8009412:	f002 fca2 	bl	800bd5a <__copybits>
 8009416:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009418:	4620      	mov	r0, r4
 800941a:	f002 f861 	bl	800b4e0 <_Bfree>
 800941e:	3f01      	subs	r7, #1
 8009420:	2f04      	cmp	r7, #4
 8009422:	d806      	bhi.n	8009432 <_strtod_l+0x102>
 8009424:	e8df f007 	tbb	[pc, r7]
 8009428:	1714030a 	.word	0x1714030a
 800942c:	0a          	.byte	0x0a
 800942d:	00          	.byte	0x00
 800942e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009432:	0728      	lsls	r0, r5, #28
 8009434:	d5c0      	bpl.n	80093b8 <_strtod_l+0x88>
 8009436:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800943a:	e7bd      	b.n	80093b8 <_strtod_l+0x88>
 800943c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009440:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009442:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009446:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800944a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800944e:	e7f0      	b.n	8009432 <_strtod_l+0x102>
 8009450:	f8df b180 	ldr.w	fp, [pc, #384]	; 80095d4 <_strtod_l+0x2a4>
 8009454:	e7ed      	b.n	8009432 <_strtod_l+0x102>
 8009456:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800945a:	f04f 3aff 	mov.w	sl, #4294967295
 800945e:	e7e8      	b.n	8009432 <_strtod_l+0x102>
 8009460:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009462:	1c5a      	adds	r2, r3, #1
 8009464:	9217      	str	r2, [sp, #92]	; 0x5c
 8009466:	785b      	ldrb	r3, [r3, #1]
 8009468:	2b30      	cmp	r3, #48	; 0x30
 800946a:	d0f9      	beq.n	8009460 <_strtod_l+0x130>
 800946c:	2b00      	cmp	r3, #0
 800946e:	d0a3      	beq.n	80093b8 <_strtod_l+0x88>
 8009470:	2301      	movs	r3, #1
 8009472:	f04f 0900 	mov.w	r9, #0
 8009476:	9304      	str	r3, [sp, #16]
 8009478:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800947a:	9308      	str	r3, [sp, #32]
 800947c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009480:	464f      	mov	r7, r9
 8009482:	220a      	movs	r2, #10
 8009484:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009486:	7806      	ldrb	r6, [r0, #0]
 8009488:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800948c:	b2d9      	uxtb	r1, r3
 800948e:	2909      	cmp	r1, #9
 8009490:	d92a      	bls.n	80094e8 <_strtod_l+0x1b8>
 8009492:	9905      	ldr	r1, [sp, #20]
 8009494:	462a      	mov	r2, r5
 8009496:	f002 ff0f 	bl	800c2b8 <strncmp>
 800949a:	b398      	cbz	r0, 8009504 <_strtod_l+0x1d4>
 800949c:	2000      	movs	r0, #0
 800949e:	4632      	mov	r2, r6
 80094a0:	463d      	mov	r5, r7
 80094a2:	9005      	str	r0, [sp, #20]
 80094a4:	4603      	mov	r3, r0
 80094a6:	2a65      	cmp	r2, #101	; 0x65
 80094a8:	d001      	beq.n	80094ae <_strtod_l+0x17e>
 80094aa:	2a45      	cmp	r2, #69	; 0x45
 80094ac:	d118      	bne.n	80094e0 <_strtod_l+0x1b0>
 80094ae:	b91d      	cbnz	r5, 80094b8 <_strtod_l+0x188>
 80094b0:	9a04      	ldr	r2, [sp, #16]
 80094b2:	4302      	orrs	r2, r0
 80094b4:	d09e      	beq.n	80093f4 <_strtod_l+0xc4>
 80094b6:	2500      	movs	r5, #0
 80094b8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80094bc:	f108 0201 	add.w	r2, r8, #1
 80094c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80094c2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80094c6:	2a2b      	cmp	r2, #43	; 0x2b
 80094c8:	d075      	beq.n	80095b6 <_strtod_l+0x286>
 80094ca:	2a2d      	cmp	r2, #45	; 0x2d
 80094cc:	d07b      	beq.n	80095c6 <_strtod_l+0x296>
 80094ce:	f04f 0c00 	mov.w	ip, #0
 80094d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80094d6:	2909      	cmp	r1, #9
 80094d8:	f240 8082 	bls.w	80095e0 <_strtod_l+0x2b0>
 80094dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80094e0:	2600      	movs	r6, #0
 80094e2:	e09d      	b.n	8009620 <_strtod_l+0x2f0>
 80094e4:	2300      	movs	r3, #0
 80094e6:	e7c4      	b.n	8009472 <_strtod_l+0x142>
 80094e8:	2f08      	cmp	r7, #8
 80094ea:	bfd8      	it	le
 80094ec:	9907      	ldrle	r1, [sp, #28]
 80094ee:	f100 0001 	add.w	r0, r0, #1
 80094f2:	bfda      	itte	le
 80094f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80094f8:	9307      	strle	r3, [sp, #28]
 80094fa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80094fe:	3701      	adds	r7, #1
 8009500:	9017      	str	r0, [sp, #92]	; 0x5c
 8009502:	e7bf      	b.n	8009484 <_strtod_l+0x154>
 8009504:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009506:	195a      	adds	r2, r3, r5
 8009508:	9217      	str	r2, [sp, #92]	; 0x5c
 800950a:	5d5a      	ldrb	r2, [r3, r5]
 800950c:	2f00      	cmp	r7, #0
 800950e:	d037      	beq.n	8009580 <_strtod_l+0x250>
 8009510:	9005      	str	r0, [sp, #20]
 8009512:	463d      	mov	r5, r7
 8009514:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009518:	2b09      	cmp	r3, #9
 800951a:	d912      	bls.n	8009542 <_strtod_l+0x212>
 800951c:	2301      	movs	r3, #1
 800951e:	e7c2      	b.n	80094a6 <_strtod_l+0x176>
 8009520:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009522:	1c5a      	adds	r2, r3, #1
 8009524:	9217      	str	r2, [sp, #92]	; 0x5c
 8009526:	785a      	ldrb	r2, [r3, #1]
 8009528:	3001      	adds	r0, #1
 800952a:	2a30      	cmp	r2, #48	; 0x30
 800952c:	d0f8      	beq.n	8009520 <_strtod_l+0x1f0>
 800952e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009532:	2b08      	cmp	r3, #8
 8009534:	f200 84d9 	bhi.w	8009eea <_strtod_l+0xbba>
 8009538:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800953a:	9005      	str	r0, [sp, #20]
 800953c:	2000      	movs	r0, #0
 800953e:	9308      	str	r3, [sp, #32]
 8009540:	4605      	mov	r5, r0
 8009542:	3a30      	subs	r2, #48	; 0x30
 8009544:	f100 0301 	add.w	r3, r0, #1
 8009548:	d014      	beq.n	8009574 <_strtod_l+0x244>
 800954a:	9905      	ldr	r1, [sp, #20]
 800954c:	4419      	add	r1, r3
 800954e:	9105      	str	r1, [sp, #20]
 8009550:	462b      	mov	r3, r5
 8009552:	eb00 0e05 	add.w	lr, r0, r5
 8009556:	210a      	movs	r1, #10
 8009558:	4573      	cmp	r3, lr
 800955a:	d113      	bne.n	8009584 <_strtod_l+0x254>
 800955c:	182b      	adds	r3, r5, r0
 800955e:	2b08      	cmp	r3, #8
 8009560:	f105 0501 	add.w	r5, r5, #1
 8009564:	4405      	add	r5, r0
 8009566:	dc1c      	bgt.n	80095a2 <_strtod_l+0x272>
 8009568:	9907      	ldr	r1, [sp, #28]
 800956a:	230a      	movs	r3, #10
 800956c:	fb03 2301 	mla	r3, r3, r1, r2
 8009570:	9307      	str	r3, [sp, #28]
 8009572:	2300      	movs	r3, #0
 8009574:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009576:	1c51      	adds	r1, r2, #1
 8009578:	9117      	str	r1, [sp, #92]	; 0x5c
 800957a:	7852      	ldrb	r2, [r2, #1]
 800957c:	4618      	mov	r0, r3
 800957e:	e7c9      	b.n	8009514 <_strtod_l+0x1e4>
 8009580:	4638      	mov	r0, r7
 8009582:	e7d2      	b.n	800952a <_strtod_l+0x1fa>
 8009584:	2b08      	cmp	r3, #8
 8009586:	dc04      	bgt.n	8009592 <_strtod_l+0x262>
 8009588:	9e07      	ldr	r6, [sp, #28]
 800958a:	434e      	muls	r6, r1
 800958c:	9607      	str	r6, [sp, #28]
 800958e:	3301      	adds	r3, #1
 8009590:	e7e2      	b.n	8009558 <_strtod_l+0x228>
 8009592:	f103 0c01 	add.w	ip, r3, #1
 8009596:	f1bc 0f10 	cmp.w	ip, #16
 800959a:	bfd8      	it	le
 800959c:	fb01 f909 	mulle.w	r9, r1, r9
 80095a0:	e7f5      	b.n	800958e <_strtod_l+0x25e>
 80095a2:	2d10      	cmp	r5, #16
 80095a4:	bfdc      	itt	le
 80095a6:	230a      	movle	r3, #10
 80095a8:	fb03 2909 	mlale	r9, r3, r9, r2
 80095ac:	e7e1      	b.n	8009572 <_strtod_l+0x242>
 80095ae:	2300      	movs	r3, #0
 80095b0:	9305      	str	r3, [sp, #20]
 80095b2:	2301      	movs	r3, #1
 80095b4:	e77c      	b.n	80094b0 <_strtod_l+0x180>
 80095b6:	f04f 0c00 	mov.w	ip, #0
 80095ba:	f108 0202 	add.w	r2, r8, #2
 80095be:	9217      	str	r2, [sp, #92]	; 0x5c
 80095c0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80095c4:	e785      	b.n	80094d2 <_strtod_l+0x1a2>
 80095c6:	f04f 0c01 	mov.w	ip, #1
 80095ca:	e7f6      	b.n	80095ba <_strtod_l+0x28a>
 80095cc:	0800d190 	.word	0x0800d190
 80095d0:	0800cf48 	.word	0x0800cf48
 80095d4:	7ff00000 	.word	0x7ff00000
 80095d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80095da:	1c51      	adds	r1, r2, #1
 80095dc:	9117      	str	r1, [sp, #92]	; 0x5c
 80095de:	7852      	ldrb	r2, [r2, #1]
 80095e0:	2a30      	cmp	r2, #48	; 0x30
 80095e2:	d0f9      	beq.n	80095d8 <_strtod_l+0x2a8>
 80095e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80095e8:	2908      	cmp	r1, #8
 80095ea:	f63f af79 	bhi.w	80094e0 <_strtod_l+0x1b0>
 80095ee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80095f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80095f4:	9206      	str	r2, [sp, #24]
 80095f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80095f8:	1c51      	adds	r1, r2, #1
 80095fa:	9117      	str	r1, [sp, #92]	; 0x5c
 80095fc:	7852      	ldrb	r2, [r2, #1]
 80095fe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009602:	2e09      	cmp	r6, #9
 8009604:	d937      	bls.n	8009676 <_strtod_l+0x346>
 8009606:	9e06      	ldr	r6, [sp, #24]
 8009608:	1b89      	subs	r1, r1, r6
 800960a:	2908      	cmp	r1, #8
 800960c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009610:	dc02      	bgt.n	8009618 <_strtod_l+0x2e8>
 8009612:	4576      	cmp	r6, lr
 8009614:	bfa8      	it	ge
 8009616:	4676      	movge	r6, lr
 8009618:	f1bc 0f00 	cmp.w	ip, #0
 800961c:	d000      	beq.n	8009620 <_strtod_l+0x2f0>
 800961e:	4276      	negs	r6, r6
 8009620:	2d00      	cmp	r5, #0
 8009622:	d14d      	bne.n	80096c0 <_strtod_l+0x390>
 8009624:	9904      	ldr	r1, [sp, #16]
 8009626:	4301      	orrs	r1, r0
 8009628:	f47f aec6 	bne.w	80093b8 <_strtod_l+0x88>
 800962c:	2b00      	cmp	r3, #0
 800962e:	f47f aee1 	bne.w	80093f4 <_strtod_l+0xc4>
 8009632:	2a69      	cmp	r2, #105	; 0x69
 8009634:	d027      	beq.n	8009686 <_strtod_l+0x356>
 8009636:	dc24      	bgt.n	8009682 <_strtod_l+0x352>
 8009638:	2a49      	cmp	r2, #73	; 0x49
 800963a:	d024      	beq.n	8009686 <_strtod_l+0x356>
 800963c:	2a4e      	cmp	r2, #78	; 0x4e
 800963e:	f47f aed9 	bne.w	80093f4 <_strtod_l+0xc4>
 8009642:	499f      	ldr	r1, [pc, #636]	; (80098c0 <_strtod_l+0x590>)
 8009644:	a817      	add	r0, sp, #92	; 0x5c
 8009646:	f001 fe3d 	bl	800b2c4 <__match>
 800964a:	2800      	cmp	r0, #0
 800964c:	f43f aed2 	beq.w	80093f4 <_strtod_l+0xc4>
 8009650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	2b28      	cmp	r3, #40	; 0x28
 8009656:	d12d      	bne.n	80096b4 <_strtod_l+0x384>
 8009658:	499a      	ldr	r1, [pc, #616]	; (80098c4 <_strtod_l+0x594>)
 800965a:	aa1a      	add	r2, sp, #104	; 0x68
 800965c:	a817      	add	r0, sp, #92	; 0x5c
 800965e:	f001 fe45 	bl	800b2ec <__hexnan>
 8009662:	2805      	cmp	r0, #5
 8009664:	d126      	bne.n	80096b4 <_strtod_l+0x384>
 8009666:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009668:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800966c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009670:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009674:	e6a0      	b.n	80093b8 <_strtod_l+0x88>
 8009676:	210a      	movs	r1, #10
 8009678:	fb01 2e0e 	mla	lr, r1, lr, r2
 800967c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009680:	e7b9      	b.n	80095f6 <_strtod_l+0x2c6>
 8009682:	2a6e      	cmp	r2, #110	; 0x6e
 8009684:	e7db      	b.n	800963e <_strtod_l+0x30e>
 8009686:	4990      	ldr	r1, [pc, #576]	; (80098c8 <_strtod_l+0x598>)
 8009688:	a817      	add	r0, sp, #92	; 0x5c
 800968a:	f001 fe1b 	bl	800b2c4 <__match>
 800968e:	2800      	cmp	r0, #0
 8009690:	f43f aeb0 	beq.w	80093f4 <_strtod_l+0xc4>
 8009694:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009696:	498d      	ldr	r1, [pc, #564]	; (80098cc <_strtod_l+0x59c>)
 8009698:	3b01      	subs	r3, #1
 800969a:	a817      	add	r0, sp, #92	; 0x5c
 800969c:	9317      	str	r3, [sp, #92]	; 0x5c
 800969e:	f001 fe11 	bl	800b2c4 <__match>
 80096a2:	b910      	cbnz	r0, 80096aa <_strtod_l+0x37a>
 80096a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096a6:	3301      	adds	r3, #1
 80096a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80096aa:	f8df b230 	ldr.w	fp, [pc, #560]	; 80098dc <_strtod_l+0x5ac>
 80096ae:	f04f 0a00 	mov.w	sl, #0
 80096b2:	e681      	b.n	80093b8 <_strtod_l+0x88>
 80096b4:	4886      	ldr	r0, [pc, #536]	; (80098d0 <_strtod_l+0x5a0>)
 80096b6:	f002 fde7 	bl	800c288 <nan>
 80096ba:	ec5b ab10 	vmov	sl, fp, d0
 80096be:	e67b      	b.n	80093b8 <_strtod_l+0x88>
 80096c0:	9b05      	ldr	r3, [sp, #20]
 80096c2:	9807      	ldr	r0, [sp, #28]
 80096c4:	1af3      	subs	r3, r6, r3
 80096c6:	2f00      	cmp	r7, #0
 80096c8:	bf08      	it	eq
 80096ca:	462f      	moveq	r7, r5
 80096cc:	2d10      	cmp	r5, #16
 80096ce:	9306      	str	r3, [sp, #24]
 80096d0:	46a8      	mov	r8, r5
 80096d2:	bfa8      	it	ge
 80096d4:	f04f 0810 	movge.w	r8, #16
 80096d8:	f7f6 ff14 	bl	8000504 <__aeabi_ui2d>
 80096dc:	2d09      	cmp	r5, #9
 80096de:	4682      	mov	sl, r0
 80096e0:	468b      	mov	fp, r1
 80096e2:	dd13      	ble.n	800970c <_strtod_l+0x3dc>
 80096e4:	4b7b      	ldr	r3, [pc, #492]	; (80098d4 <_strtod_l+0x5a4>)
 80096e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80096ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80096ee:	f7f6 ff83 	bl	80005f8 <__aeabi_dmul>
 80096f2:	4682      	mov	sl, r0
 80096f4:	4648      	mov	r0, r9
 80096f6:	468b      	mov	fp, r1
 80096f8:	f7f6 ff04 	bl	8000504 <__aeabi_ui2d>
 80096fc:	4602      	mov	r2, r0
 80096fe:	460b      	mov	r3, r1
 8009700:	4650      	mov	r0, sl
 8009702:	4659      	mov	r1, fp
 8009704:	f7f6 fdc2 	bl	800028c <__adddf3>
 8009708:	4682      	mov	sl, r0
 800970a:	468b      	mov	fp, r1
 800970c:	2d0f      	cmp	r5, #15
 800970e:	dc38      	bgt.n	8009782 <_strtod_l+0x452>
 8009710:	9b06      	ldr	r3, [sp, #24]
 8009712:	2b00      	cmp	r3, #0
 8009714:	f43f ae50 	beq.w	80093b8 <_strtod_l+0x88>
 8009718:	dd24      	ble.n	8009764 <_strtod_l+0x434>
 800971a:	2b16      	cmp	r3, #22
 800971c:	dc0b      	bgt.n	8009736 <_strtod_l+0x406>
 800971e:	496d      	ldr	r1, [pc, #436]	; (80098d4 <_strtod_l+0x5a4>)
 8009720:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009724:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009728:	4652      	mov	r2, sl
 800972a:	465b      	mov	r3, fp
 800972c:	f7f6 ff64 	bl	80005f8 <__aeabi_dmul>
 8009730:	4682      	mov	sl, r0
 8009732:	468b      	mov	fp, r1
 8009734:	e640      	b.n	80093b8 <_strtod_l+0x88>
 8009736:	9a06      	ldr	r2, [sp, #24]
 8009738:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800973c:	4293      	cmp	r3, r2
 800973e:	db20      	blt.n	8009782 <_strtod_l+0x452>
 8009740:	4c64      	ldr	r4, [pc, #400]	; (80098d4 <_strtod_l+0x5a4>)
 8009742:	f1c5 050f 	rsb	r5, r5, #15
 8009746:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800974a:	4652      	mov	r2, sl
 800974c:	465b      	mov	r3, fp
 800974e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009752:	f7f6 ff51 	bl	80005f8 <__aeabi_dmul>
 8009756:	9b06      	ldr	r3, [sp, #24]
 8009758:	1b5d      	subs	r5, r3, r5
 800975a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800975e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009762:	e7e3      	b.n	800972c <_strtod_l+0x3fc>
 8009764:	9b06      	ldr	r3, [sp, #24]
 8009766:	3316      	adds	r3, #22
 8009768:	db0b      	blt.n	8009782 <_strtod_l+0x452>
 800976a:	9b05      	ldr	r3, [sp, #20]
 800976c:	1b9e      	subs	r6, r3, r6
 800976e:	4b59      	ldr	r3, [pc, #356]	; (80098d4 <_strtod_l+0x5a4>)
 8009770:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009774:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009778:	4650      	mov	r0, sl
 800977a:	4659      	mov	r1, fp
 800977c:	f7f7 f866 	bl	800084c <__aeabi_ddiv>
 8009780:	e7d6      	b.n	8009730 <_strtod_l+0x400>
 8009782:	9b06      	ldr	r3, [sp, #24]
 8009784:	eba5 0808 	sub.w	r8, r5, r8
 8009788:	4498      	add	r8, r3
 800978a:	f1b8 0f00 	cmp.w	r8, #0
 800978e:	dd74      	ble.n	800987a <_strtod_l+0x54a>
 8009790:	f018 030f 	ands.w	r3, r8, #15
 8009794:	d00a      	beq.n	80097ac <_strtod_l+0x47c>
 8009796:	494f      	ldr	r1, [pc, #316]	; (80098d4 <_strtod_l+0x5a4>)
 8009798:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800979c:	4652      	mov	r2, sl
 800979e:	465b      	mov	r3, fp
 80097a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097a4:	f7f6 ff28 	bl	80005f8 <__aeabi_dmul>
 80097a8:	4682      	mov	sl, r0
 80097aa:	468b      	mov	fp, r1
 80097ac:	f038 080f 	bics.w	r8, r8, #15
 80097b0:	d04f      	beq.n	8009852 <_strtod_l+0x522>
 80097b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80097b6:	dd22      	ble.n	80097fe <_strtod_l+0x4ce>
 80097b8:	2500      	movs	r5, #0
 80097ba:	462e      	mov	r6, r5
 80097bc:	9507      	str	r5, [sp, #28]
 80097be:	9505      	str	r5, [sp, #20]
 80097c0:	2322      	movs	r3, #34	; 0x22
 80097c2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80098dc <_strtod_l+0x5ac>
 80097c6:	6023      	str	r3, [r4, #0]
 80097c8:	f04f 0a00 	mov.w	sl, #0
 80097cc:	9b07      	ldr	r3, [sp, #28]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f43f adf2 	beq.w	80093b8 <_strtod_l+0x88>
 80097d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80097d6:	4620      	mov	r0, r4
 80097d8:	f001 fe82 	bl	800b4e0 <_Bfree>
 80097dc:	9905      	ldr	r1, [sp, #20]
 80097de:	4620      	mov	r0, r4
 80097e0:	f001 fe7e 	bl	800b4e0 <_Bfree>
 80097e4:	4631      	mov	r1, r6
 80097e6:	4620      	mov	r0, r4
 80097e8:	f001 fe7a 	bl	800b4e0 <_Bfree>
 80097ec:	9907      	ldr	r1, [sp, #28]
 80097ee:	4620      	mov	r0, r4
 80097f0:	f001 fe76 	bl	800b4e0 <_Bfree>
 80097f4:	4629      	mov	r1, r5
 80097f6:	4620      	mov	r0, r4
 80097f8:	f001 fe72 	bl	800b4e0 <_Bfree>
 80097fc:	e5dc      	b.n	80093b8 <_strtod_l+0x88>
 80097fe:	4b36      	ldr	r3, [pc, #216]	; (80098d8 <_strtod_l+0x5a8>)
 8009800:	9304      	str	r3, [sp, #16]
 8009802:	2300      	movs	r3, #0
 8009804:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009808:	4650      	mov	r0, sl
 800980a:	4659      	mov	r1, fp
 800980c:	4699      	mov	r9, r3
 800980e:	f1b8 0f01 	cmp.w	r8, #1
 8009812:	dc21      	bgt.n	8009858 <_strtod_l+0x528>
 8009814:	b10b      	cbz	r3, 800981a <_strtod_l+0x4ea>
 8009816:	4682      	mov	sl, r0
 8009818:	468b      	mov	fp, r1
 800981a:	4b2f      	ldr	r3, [pc, #188]	; (80098d8 <_strtod_l+0x5a8>)
 800981c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009820:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009824:	4652      	mov	r2, sl
 8009826:	465b      	mov	r3, fp
 8009828:	e9d9 0100 	ldrd	r0, r1, [r9]
 800982c:	f7f6 fee4 	bl	80005f8 <__aeabi_dmul>
 8009830:	4b2a      	ldr	r3, [pc, #168]	; (80098dc <_strtod_l+0x5ac>)
 8009832:	460a      	mov	r2, r1
 8009834:	400b      	ands	r3, r1
 8009836:	492a      	ldr	r1, [pc, #168]	; (80098e0 <_strtod_l+0x5b0>)
 8009838:	428b      	cmp	r3, r1
 800983a:	4682      	mov	sl, r0
 800983c:	d8bc      	bhi.n	80097b8 <_strtod_l+0x488>
 800983e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009842:	428b      	cmp	r3, r1
 8009844:	bf86      	itte	hi
 8009846:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80098e4 <_strtod_l+0x5b4>
 800984a:	f04f 3aff 	movhi.w	sl, #4294967295
 800984e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009852:	2300      	movs	r3, #0
 8009854:	9304      	str	r3, [sp, #16]
 8009856:	e084      	b.n	8009962 <_strtod_l+0x632>
 8009858:	f018 0f01 	tst.w	r8, #1
 800985c:	d005      	beq.n	800986a <_strtod_l+0x53a>
 800985e:	9b04      	ldr	r3, [sp, #16]
 8009860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009864:	f7f6 fec8 	bl	80005f8 <__aeabi_dmul>
 8009868:	2301      	movs	r3, #1
 800986a:	9a04      	ldr	r2, [sp, #16]
 800986c:	3208      	adds	r2, #8
 800986e:	f109 0901 	add.w	r9, r9, #1
 8009872:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009876:	9204      	str	r2, [sp, #16]
 8009878:	e7c9      	b.n	800980e <_strtod_l+0x4de>
 800987a:	d0ea      	beq.n	8009852 <_strtod_l+0x522>
 800987c:	f1c8 0800 	rsb	r8, r8, #0
 8009880:	f018 020f 	ands.w	r2, r8, #15
 8009884:	d00a      	beq.n	800989c <_strtod_l+0x56c>
 8009886:	4b13      	ldr	r3, [pc, #76]	; (80098d4 <_strtod_l+0x5a4>)
 8009888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800988c:	4650      	mov	r0, sl
 800988e:	4659      	mov	r1, fp
 8009890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009894:	f7f6 ffda 	bl	800084c <__aeabi_ddiv>
 8009898:	4682      	mov	sl, r0
 800989a:	468b      	mov	fp, r1
 800989c:	ea5f 1828 	movs.w	r8, r8, asr #4
 80098a0:	d0d7      	beq.n	8009852 <_strtod_l+0x522>
 80098a2:	f1b8 0f1f 	cmp.w	r8, #31
 80098a6:	dd1f      	ble.n	80098e8 <_strtod_l+0x5b8>
 80098a8:	2500      	movs	r5, #0
 80098aa:	462e      	mov	r6, r5
 80098ac:	9507      	str	r5, [sp, #28]
 80098ae:	9505      	str	r5, [sp, #20]
 80098b0:	2322      	movs	r3, #34	; 0x22
 80098b2:	f04f 0a00 	mov.w	sl, #0
 80098b6:	f04f 0b00 	mov.w	fp, #0
 80098ba:	6023      	str	r3, [r4, #0]
 80098bc:	e786      	b.n	80097cc <_strtod_l+0x49c>
 80098be:	bf00      	nop
 80098c0:	0800cf19 	.word	0x0800cf19
 80098c4:	0800cf5c 	.word	0x0800cf5c
 80098c8:	0800cf11 	.word	0x0800cf11
 80098cc:	0800d09c 	.word	0x0800d09c
 80098d0:	0800d348 	.word	0x0800d348
 80098d4:	0800d228 	.word	0x0800d228
 80098d8:	0800d200 	.word	0x0800d200
 80098dc:	7ff00000 	.word	0x7ff00000
 80098e0:	7ca00000 	.word	0x7ca00000
 80098e4:	7fefffff 	.word	0x7fefffff
 80098e8:	f018 0310 	ands.w	r3, r8, #16
 80098ec:	bf18      	it	ne
 80098ee:	236a      	movne	r3, #106	; 0x6a
 80098f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009ca0 <_strtod_l+0x970>
 80098f4:	9304      	str	r3, [sp, #16]
 80098f6:	4650      	mov	r0, sl
 80098f8:	4659      	mov	r1, fp
 80098fa:	2300      	movs	r3, #0
 80098fc:	f018 0f01 	tst.w	r8, #1
 8009900:	d004      	beq.n	800990c <_strtod_l+0x5dc>
 8009902:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009906:	f7f6 fe77 	bl	80005f8 <__aeabi_dmul>
 800990a:	2301      	movs	r3, #1
 800990c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009910:	f109 0908 	add.w	r9, r9, #8
 8009914:	d1f2      	bne.n	80098fc <_strtod_l+0x5cc>
 8009916:	b10b      	cbz	r3, 800991c <_strtod_l+0x5ec>
 8009918:	4682      	mov	sl, r0
 800991a:	468b      	mov	fp, r1
 800991c:	9b04      	ldr	r3, [sp, #16]
 800991e:	b1c3      	cbz	r3, 8009952 <_strtod_l+0x622>
 8009920:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009924:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009928:	2b00      	cmp	r3, #0
 800992a:	4659      	mov	r1, fp
 800992c:	dd11      	ble.n	8009952 <_strtod_l+0x622>
 800992e:	2b1f      	cmp	r3, #31
 8009930:	f340 8124 	ble.w	8009b7c <_strtod_l+0x84c>
 8009934:	2b34      	cmp	r3, #52	; 0x34
 8009936:	bfde      	ittt	le
 8009938:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800993c:	f04f 33ff 	movle.w	r3, #4294967295
 8009940:	fa03 f202 	lslle.w	r2, r3, r2
 8009944:	f04f 0a00 	mov.w	sl, #0
 8009948:	bfcc      	ite	gt
 800994a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800994e:	ea02 0b01 	andle.w	fp, r2, r1
 8009952:	2200      	movs	r2, #0
 8009954:	2300      	movs	r3, #0
 8009956:	4650      	mov	r0, sl
 8009958:	4659      	mov	r1, fp
 800995a:	f7f7 f8b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800995e:	2800      	cmp	r0, #0
 8009960:	d1a2      	bne.n	80098a8 <_strtod_l+0x578>
 8009962:	9b07      	ldr	r3, [sp, #28]
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	9908      	ldr	r1, [sp, #32]
 8009968:	462b      	mov	r3, r5
 800996a:	463a      	mov	r2, r7
 800996c:	4620      	mov	r0, r4
 800996e:	f001 fe1f 	bl	800b5b0 <__s2b>
 8009972:	9007      	str	r0, [sp, #28]
 8009974:	2800      	cmp	r0, #0
 8009976:	f43f af1f 	beq.w	80097b8 <_strtod_l+0x488>
 800997a:	9b05      	ldr	r3, [sp, #20]
 800997c:	1b9e      	subs	r6, r3, r6
 800997e:	9b06      	ldr	r3, [sp, #24]
 8009980:	2b00      	cmp	r3, #0
 8009982:	bfb4      	ite	lt
 8009984:	4633      	movlt	r3, r6
 8009986:	2300      	movge	r3, #0
 8009988:	930c      	str	r3, [sp, #48]	; 0x30
 800998a:	9b06      	ldr	r3, [sp, #24]
 800998c:	2500      	movs	r5, #0
 800998e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009992:	9312      	str	r3, [sp, #72]	; 0x48
 8009994:	462e      	mov	r6, r5
 8009996:	9b07      	ldr	r3, [sp, #28]
 8009998:	4620      	mov	r0, r4
 800999a:	6859      	ldr	r1, [r3, #4]
 800999c:	f001 fd60 	bl	800b460 <_Balloc>
 80099a0:	9005      	str	r0, [sp, #20]
 80099a2:	2800      	cmp	r0, #0
 80099a4:	f43f af0c 	beq.w	80097c0 <_strtod_l+0x490>
 80099a8:	9b07      	ldr	r3, [sp, #28]
 80099aa:	691a      	ldr	r2, [r3, #16]
 80099ac:	3202      	adds	r2, #2
 80099ae:	f103 010c 	add.w	r1, r3, #12
 80099b2:	0092      	lsls	r2, r2, #2
 80099b4:	300c      	adds	r0, #12
 80099b6:	f7fe fdb5 	bl	8008524 <memcpy>
 80099ba:	ec4b ab10 	vmov	d0, sl, fp
 80099be:	aa1a      	add	r2, sp, #104	; 0x68
 80099c0:	a919      	add	r1, sp, #100	; 0x64
 80099c2:	4620      	mov	r0, r4
 80099c4:	f002 f93a 	bl	800bc3c <__d2b>
 80099c8:	ec4b ab18 	vmov	d8, sl, fp
 80099cc:	9018      	str	r0, [sp, #96]	; 0x60
 80099ce:	2800      	cmp	r0, #0
 80099d0:	f43f aef6 	beq.w	80097c0 <_strtod_l+0x490>
 80099d4:	2101      	movs	r1, #1
 80099d6:	4620      	mov	r0, r4
 80099d8:	f001 fe84 	bl	800b6e4 <__i2b>
 80099dc:	4606      	mov	r6, r0
 80099de:	2800      	cmp	r0, #0
 80099e0:	f43f aeee 	beq.w	80097c0 <_strtod_l+0x490>
 80099e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099e6:	9904      	ldr	r1, [sp, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	bfab      	itete	ge
 80099ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80099ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80099f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80099f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80099f6:	bfac      	ite	ge
 80099f8:	eb03 0902 	addge.w	r9, r3, r2
 80099fc:	1ad7      	sublt	r7, r2, r3
 80099fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009a00:	eba3 0801 	sub.w	r8, r3, r1
 8009a04:	4490      	add	r8, r2
 8009a06:	4ba1      	ldr	r3, [pc, #644]	; (8009c8c <_strtod_l+0x95c>)
 8009a08:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a0c:	4598      	cmp	r8, r3
 8009a0e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009a12:	f280 80c7 	bge.w	8009ba4 <_strtod_l+0x874>
 8009a16:	eba3 0308 	sub.w	r3, r3, r8
 8009a1a:	2b1f      	cmp	r3, #31
 8009a1c:	eba2 0203 	sub.w	r2, r2, r3
 8009a20:	f04f 0101 	mov.w	r1, #1
 8009a24:	f300 80b1 	bgt.w	8009b8a <_strtod_l+0x85a>
 8009a28:	fa01 f303 	lsl.w	r3, r1, r3
 8009a2c:	930d      	str	r3, [sp, #52]	; 0x34
 8009a2e:	2300      	movs	r3, #0
 8009a30:	9308      	str	r3, [sp, #32]
 8009a32:	eb09 0802 	add.w	r8, r9, r2
 8009a36:	9b04      	ldr	r3, [sp, #16]
 8009a38:	45c1      	cmp	r9, r8
 8009a3a:	4417      	add	r7, r2
 8009a3c:	441f      	add	r7, r3
 8009a3e:	464b      	mov	r3, r9
 8009a40:	bfa8      	it	ge
 8009a42:	4643      	movge	r3, r8
 8009a44:	42bb      	cmp	r3, r7
 8009a46:	bfa8      	it	ge
 8009a48:	463b      	movge	r3, r7
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	bfc2      	ittt	gt
 8009a4e:	eba8 0803 	subgt.w	r8, r8, r3
 8009a52:	1aff      	subgt	r7, r7, r3
 8009a54:	eba9 0903 	subgt.w	r9, r9, r3
 8009a58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	dd17      	ble.n	8009a8e <_strtod_l+0x75e>
 8009a5e:	4631      	mov	r1, r6
 8009a60:	461a      	mov	r2, r3
 8009a62:	4620      	mov	r0, r4
 8009a64:	f001 fefe 	bl	800b864 <__pow5mult>
 8009a68:	4606      	mov	r6, r0
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	f43f aea8 	beq.w	80097c0 <_strtod_l+0x490>
 8009a70:	4601      	mov	r1, r0
 8009a72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009a74:	4620      	mov	r0, r4
 8009a76:	f001 fe4b 	bl	800b710 <__multiply>
 8009a7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	f43f ae9f 	beq.w	80097c0 <_strtod_l+0x490>
 8009a82:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a84:	4620      	mov	r0, r4
 8009a86:	f001 fd2b 	bl	800b4e0 <_Bfree>
 8009a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a8c:	9318      	str	r3, [sp, #96]	; 0x60
 8009a8e:	f1b8 0f00 	cmp.w	r8, #0
 8009a92:	f300 808c 	bgt.w	8009bae <_strtod_l+0x87e>
 8009a96:	9b06      	ldr	r3, [sp, #24]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	dd08      	ble.n	8009aae <_strtod_l+0x77e>
 8009a9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a9e:	9905      	ldr	r1, [sp, #20]
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f001 fedf 	bl	800b864 <__pow5mult>
 8009aa6:	9005      	str	r0, [sp, #20]
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	f43f ae89 	beq.w	80097c0 <_strtod_l+0x490>
 8009aae:	2f00      	cmp	r7, #0
 8009ab0:	dd08      	ble.n	8009ac4 <_strtod_l+0x794>
 8009ab2:	9905      	ldr	r1, [sp, #20]
 8009ab4:	463a      	mov	r2, r7
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f001 ff2e 	bl	800b918 <__lshift>
 8009abc:	9005      	str	r0, [sp, #20]
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	f43f ae7e 	beq.w	80097c0 <_strtod_l+0x490>
 8009ac4:	f1b9 0f00 	cmp.w	r9, #0
 8009ac8:	dd08      	ble.n	8009adc <_strtod_l+0x7ac>
 8009aca:	4631      	mov	r1, r6
 8009acc:	464a      	mov	r2, r9
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f001 ff22 	bl	800b918 <__lshift>
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	f43f ae72 	beq.w	80097c0 <_strtod_l+0x490>
 8009adc:	9a05      	ldr	r2, [sp, #20]
 8009ade:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f001 ffa5 	bl	800ba30 <__mdiff>
 8009ae6:	4605      	mov	r5, r0
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	f43f ae69 	beq.w	80097c0 <_strtod_l+0x490>
 8009aee:	68c3      	ldr	r3, [r0, #12]
 8009af0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009af2:	2300      	movs	r3, #0
 8009af4:	60c3      	str	r3, [r0, #12]
 8009af6:	4631      	mov	r1, r6
 8009af8:	f001 ff7e 	bl	800b9f8 <__mcmp>
 8009afc:	2800      	cmp	r0, #0
 8009afe:	da60      	bge.n	8009bc2 <_strtod_l+0x892>
 8009b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b02:	ea53 030a 	orrs.w	r3, r3, sl
 8009b06:	f040 8082 	bne.w	8009c0e <_strtod_l+0x8de>
 8009b0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d17d      	bne.n	8009c0e <_strtod_l+0x8de>
 8009b12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009b16:	0d1b      	lsrs	r3, r3, #20
 8009b18:	051b      	lsls	r3, r3, #20
 8009b1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009b1e:	d976      	bls.n	8009c0e <_strtod_l+0x8de>
 8009b20:	696b      	ldr	r3, [r5, #20]
 8009b22:	b913      	cbnz	r3, 8009b2a <_strtod_l+0x7fa>
 8009b24:	692b      	ldr	r3, [r5, #16]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	dd71      	ble.n	8009c0e <_strtod_l+0x8de>
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f001 fef2 	bl	800b918 <__lshift>
 8009b34:	4631      	mov	r1, r6
 8009b36:	4605      	mov	r5, r0
 8009b38:	f001 ff5e 	bl	800b9f8 <__mcmp>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	dd66      	ble.n	8009c0e <_strtod_l+0x8de>
 8009b40:	9904      	ldr	r1, [sp, #16]
 8009b42:	4a53      	ldr	r2, [pc, #332]	; (8009c90 <_strtod_l+0x960>)
 8009b44:	465b      	mov	r3, fp
 8009b46:	2900      	cmp	r1, #0
 8009b48:	f000 8081 	beq.w	8009c4e <_strtod_l+0x91e>
 8009b4c:	ea02 010b 	and.w	r1, r2, fp
 8009b50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009b54:	dc7b      	bgt.n	8009c4e <_strtod_l+0x91e>
 8009b56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009b5a:	f77f aea9 	ble.w	80098b0 <_strtod_l+0x580>
 8009b5e:	4b4d      	ldr	r3, [pc, #308]	; (8009c94 <_strtod_l+0x964>)
 8009b60:	4650      	mov	r0, sl
 8009b62:	4659      	mov	r1, fp
 8009b64:	2200      	movs	r2, #0
 8009b66:	f7f6 fd47 	bl	80005f8 <__aeabi_dmul>
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4303      	orrs	r3, r0
 8009b6e:	bf08      	it	eq
 8009b70:	2322      	moveq	r3, #34	; 0x22
 8009b72:	4682      	mov	sl, r0
 8009b74:	468b      	mov	fp, r1
 8009b76:	bf08      	it	eq
 8009b78:	6023      	streq	r3, [r4, #0]
 8009b7a:	e62b      	b.n	80097d4 <_strtod_l+0x4a4>
 8009b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b80:	fa02 f303 	lsl.w	r3, r2, r3
 8009b84:	ea03 0a0a 	and.w	sl, r3, sl
 8009b88:	e6e3      	b.n	8009952 <_strtod_l+0x622>
 8009b8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009b8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009b92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009b96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009b9a:	fa01 f308 	lsl.w	r3, r1, r8
 8009b9e:	9308      	str	r3, [sp, #32]
 8009ba0:	910d      	str	r1, [sp, #52]	; 0x34
 8009ba2:	e746      	b.n	8009a32 <_strtod_l+0x702>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	9308      	str	r3, [sp, #32]
 8009ba8:	2301      	movs	r3, #1
 8009baa:	930d      	str	r3, [sp, #52]	; 0x34
 8009bac:	e741      	b.n	8009a32 <_strtod_l+0x702>
 8009bae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009bb0:	4642      	mov	r2, r8
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f001 feb0 	bl	800b918 <__lshift>
 8009bb8:	9018      	str	r0, [sp, #96]	; 0x60
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	f47f af6b 	bne.w	8009a96 <_strtod_l+0x766>
 8009bc0:	e5fe      	b.n	80097c0 <_strtod_l+0x490>
 8009bc2:	465f      	mov	r7, fp
 8009bc4:	d16e      	bne.n	8009ca4 <_strtod_l+0x974>
 8009bc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009bc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bcc:	b342      	cbz	r2, 8009c20 <_strtod_l+0x8f0>
 8009bce:	4a32      	ldr	r2, [pc, #200]	; (8009c98 <_strtod_l+0x968>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d128      	bne.n	8009c26 <_strtod_l+0x8f6>
 8009bd4:	9b04      	ldr	r3, [sp, #16]
 8009bd6:	4651      	mov	r1, sl
 8009bd8:	b1eb      	cbz	r3, 8009c16 <_strtod_l+0x8e6>
 8009bda:	4b2d      	ldr	r3, [pc, #180]	; (8009c90 <_strtod_l+0x960>)
 8009bdc:	403b      	ands	r3, r7
 8009bde:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009be2:	f04f 32ff 	mov.w	r2, #4294967295
 8009be6:	d819      	bhi.n	8009c1c <_strtod_l+0x8ec>
 8009be8:	0d1b      	lsrs	r3, r3, #20
 8009bea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009bee:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf2:	4299      	cmp	r1, r3
 8009bf4:	d117      	bne.n	8009c26 <_strtod_l+0x8f6>
 8009bf6:	4b29      	ldr	r3, [pc, #164]	; (8009c9c <_strtod_l+0x96c>)
 8009bf8:	429f      	cmp	r7, r3
 8009bfa:	d102      	bne.n	8009c02 <_strtod_l+0x8d2>
 8009bfc:	3101      	adds	r1, #1
 8009bfe:	f43f addf 	beq.w	80097c0 <_strtod_l+0x490>
 8009c02:	4b23      	ldr	r3, [pc, #140]	; (8009c90 <_strtod_l+0x960>)
 8009c04:	403b      	ands	r3, r7
 8009c06:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009c0a:	f04f 0a00 	mov.w	sl, #0
 8009c0e:	9b04      	ldr	r3, [sp, #16]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1a4      	bne.n	8009b5e <_strtod_l+0x82e>
 8009c14:	e5de      	b.n	80097d4 <_strtod_l+0x4a4>
 8009c16:	f04f 33ff 	mov.w	r3, #4294967295
 8009c1a:	e7ea      	b.n	8009bf2 <_strtod_l+0x8c2>
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	e7e8      	b.n	8009bf2 <_strtod_l+0x8c2>
 8009c20:	ea53 030a 	orrs.w	r3, r3, sl
 8009c24:	d08c      	beq.n	8009b40 <_strtod_l+0x810>
 8009c26:	9b08      	ldr	r3, [sp, #32]
 8009c28:	b1db      	cbz	r3, 8009c62 <_strtod_l+0x932>
 8009c2a:	423b      	tst	r3, r7
 8009c2c:	d0ef      	beq.n	8009c0e <_strtod_l+0x8de>
 8009c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c30:	9a04      	ldr	r2, [sp, #16]
 8009c32:	4650      	mov	r0, sl
 8009c34:	4659      	mov	r1, fp
 8009c36:	b1c3      	cbz	r3, 8009c6a <_strtod_l+0x93a>
 8009c38:	f7ff fb5e 	bl	80092f8 <sulp>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	ec51 0b18 	vmov	r0, r1, d8
 8009c44:	f7f6 fb22 	bl	800028c <__adddf3>
 8009c48:	4682      	mov	sl, r0
 8009c4a:	468b      	mov	fp, r1
 8009c4c:	e7df      	b.n	8009c0e <_strtod_l+0x8de>
 8009c4e:	4013      	ands	r3, r2
 8009c50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009c54:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009c58:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009c5c:	f04f 3aff 	mov.w	sl, #4294967295
 8009c60:	e7d5      	b.n	8009c0e <_strtod_l+0x8de>
 8009c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c64:	ea13 0f0a 	tst.w	r3, sl
 8009c68:	e7e0      	b.n	8009c2c <_strtod_l+0x8fc>
 8009c6a:	f7ff fb45 	bl	80092f8 <sulp>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	460b      	mov	r3, r1
 8009c72:	ec51 0b18 	vmov	r0, r1, d8
 8009c76:	f7f6 fb07 	bl	8000288 <__aeabi_dsub>
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	4682      	mov	sl, r0
 8009c80:	468b      	mov	fp, r1
 8009c82:	f7f6 ff21 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d0c1      	beq.n	8009c0e <_strtod_l+0x8de>
 8009c8a:	e611      	b.n	80098b0 <_strtod_l+0x580>
 8009c8c:	fffffc02 	.word	0xfffffc02
 8009c90:	7ff00000 	.word	0x7ff00000
 8009c94:	39500000 	.word	0x39500000
 8009c98:	000fffff 	.word	0x000fffff
 8009c9c:	7fefffff 	.word	0x7fefffff
 8009ca0:	0800cf70 	.word	0x0800cf70
 8009ca4:	4631      	mov	r1, r6
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	f002 f824 	bl	800bcf4 <__ratio>
 8009cac:	ec59 8b10 	vmov	r8, r9, d0
 8009cb0:	ee10 0a10 	vmov	r0, s0
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009cba:	4649      	mov	r1, r9
 8009cbc:	f7f6 ff18 	bl	8000af0 <__aeabi_dcmple>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d07a      	beq.n	8009dba <_strtod_l+0xa8a>
 8009cc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d04a      	beq.n	8009d60 <_strtod_l+0xa30>
 8009cca:	4b95      	ldr	r3, [pc, #596]	; (8009f20 <_strtod_l+0xbf0>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009cd2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009f20 <_strtod_l+0xbf0>
 8009cd6:	f04f 0800 	mov.w	r8, #0
 8009cda:	4b92      	ldr	r3, [pc, #584]	; (8009f24 <_strtod_l+0xbf4>)
 8009cdc:	403b      	ands	r3, r7
 8009cde:	930d      	str	r3, [sp, #52]	; 0x34
 8009ce0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ce2:	4b91      	ldr	r3, [pc, #580]	; (8009f28 <_strtod_l+0xbf8>)
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	f040 80b0 	bne.w	8009e4a <_strtod_l+0xb1a>
 8009cea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009cee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009cf2:	ec4b ab10 	vmov	d0, sl, fp
 8009cf6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009cfa:	f001 ff23 	bl	800bb44 <__ulp>
 8009cfe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d02:	ec53 2b10 	vmov	r2, r3, d0
 8009d06:	f7f6 fc77 	bl	80005f8 <__aeabi_dmul>
 8009d0a:	4652      	mov	r2, sl
 8009d0c:	465b      	mov	r3, fp
 8009d0e:	f7f6 fabd 	bl	800028c <__adddf3>
 8009d12:	460b      	mov	r3, r1
 8009d14:	4983      	ldr	r1, [pc, #524]	; (8009f24 <_strtod_l+0xbf4>)
 8009d16:	4a85      	ldr	r2, [pc, #532]	; (8009f2c <_strtod_l+0xbfc>)
 8009d18:	4019      	ands	r1, r3
 8009d1a:	4291      	cmp	r1, r2
 8009d1c:	4682      	mov	sl, r0
 8009d1e:	d960      	bls.n	8009de2 <_strtod_l+0xab2>
 8009d20:	ee18 3a90 	vmov	r3, s17
 8009d24:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d104      	bne.n	8009d36 <_strtod_l+0xa06>
 8009d2c:	ee18 3a10 	vmov	r3, s16
 8009d30:	3301      	adds	r3, #1
 8009d32:	f43f ad45 	beq.w	80097c0 <_strtod_l+0x490>
 8009d36:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009f38 <_strtod_l+0xc08>
 8009d3a:	f04f 3aff 	mov.w	sl, #4294967295
 8009d3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d40:	4620      	mov	r0, r4
 8009d42:	f001 fbcd 	bl	800b4e0 <_Bfree>
 8009d46:	9905      	ldr	r1, [sp, #20]
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f001 fbc9 	bl	800b4e0 <_Bfree>
 8009d4e:	4631      	mov	r1, r6
 8009d50:	4620      	mov	r0, r4
 8009d52:	f001 fbc5 	bl	800b4e0 <_Bfree>
 8009d56:	4629      	mov	r1, r5
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f001 fbc1 	bl	800b4e0 <_Bfree>
 8009d5e:	e61a      	b.n	8009996 <_strtod_l+0x666>
 8009d60:	f1ba 0f00 	cmp.w	sl, #0
 8009d64:	d11b      	bne.n	8009d9e <_strtod_l+0xa6e>
 8009d66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d6a:	b9f3      	cbnz	r3, 8009daa <_strtod_l+0xa7a>
 8009d6c:	4b6c      	ldr	r3, [pc, #432]	; (8009f20 <_strtod_l+0xbf0>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	4640      	mov	r0, r8
 8009d72:	4649      	mov	r1, r9
 8009d74:	f7f6 feb2 	bl	8000adc <__aeabi_dcmplt>
 8009d78:	b9d0      	cbnz	r0, 8009db0 <_strtod_l+0xa80>
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	4649      	mov	r1, r9
 8009d7e:	4b6c      	ldr	r3, [pc, #432]	; (8009f30 <_strtod_l+0xc00>)
 8009d80:	2200      	movs	r2, #0
 8009d82:	f7f6 fc39 	bl	80005f8 <__aeabi_dmul>
 8009d86:	4680      	mov	r8, r0
 8009d88:	4689      	mov	r9, r1
 8009d8a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009d8e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009d92:	9315      	str	r3, [sp, #84]	; 0x54
 8009d94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009d98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009d9c:	e79d      	b.n	8009cda <_strtod_l+0x9aa>
 8009d9e:	f1ba 0f01 	cmp.w	sl, #1
 8009da2:	d102      	bne.n	8009daa <_strtod_l+0xa7a>
 8009da4:	2f00      	cmp	r7, #0
 8009da6:	f43f ad83 	beq.w	80098b0 <_strtod_l+0x580>
 8009daa:	4b62      	ldr	r3, [pc, #392]	; (8009f34 <_strtod_l+0xc04>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	e78e      	b.n	8009cce <_strtod_l+0x99e>
 8009db0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009f30 <_strtod_l+0xc00>
 8009db4:	f04f 0800 	mov.w	r8, #0
 8009db8:	e7e7      	b.n	8009d8a <_strtod_l+0xa5a>
 8009dba:	4b5d      	ldr	r3, [pc, #372]	; (8009f30 <_strtod_l+0xc00>)
 8009dbc:	4640      	mov	r0, r8
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f7f6 fc19 	bl	80005f8 <__aeabi_dmul>
 8009dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dc8:	4680      	mov	r8, r0
 8009dca:	4689      	mov	r9, r1
 8009dcc:	b933      	cbnz	r3, 8009ddc <_strtod_l+0xaac>
 8009dce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dd2:	900e      	str	r0, [sp, #56]	; 0x38
 8009dd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009dda:	e7dd      	b.n	8009d98 <_strtod_l+0xa68>
 8009ddc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009de0:	e7f9      	b.n	8009dd6 <_strtod_l+0xaa6>
 8009de2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009de6:	9b04      	ldr	r3, [sp, #16]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1a8      	bne.n	8009d3e <_strtod_l+0xa0e>
 8009dec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009df0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009df2:	0d1b      	lsrs	r3, r3, #20
 8009df4:	051b      	lsls	r3, r3, #20
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d1a1      	bne.n	8009d3e <_strtod_l+0xa0e>
 8009dfa:	4640      	mov	r0, r8
 8009dfc:	4649      	mov	r1, r9
 8009dfe:	f7f6 ff5b 	bl	8000cb8 <__aeabi_d2lz>
 8009e02:	f7f6 fbcb 	bl	800059c <__aeabi_l2d>
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	4640      	mov	r0, r8
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	f7f6 fa3b 	bl	8000288 <__aeabi_dsub>
 8009e12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e18:	ea43 030a 	orr.w	r3, r3, sl
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	4680      	mov	r8, r0
 8009e20:	4689      	mov	r9, r1
 8009e22:	d055      	beq.n	8009ed0 <_strtod_l+0xba0>
 8009e24:	a336      	add	r3, pc, #216	; (adr r3, 8009f00 <_strtod_l+0xbd0>)
 8009e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2a:	f7f6 fe57 	bl	8000adc <__aeabi_dcmplt>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	f47f acd0 	bne.w	80097d4 <_strtod_l+0x4a4>
 8009e34:	a334      	add	r3, pc, #208	; (adr r3, 8009f08 <_strtod_l+0xbd8>)
 8009e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3a:	4640      	mov	r0, r8
 8009e3c:	4649      	mov	r1, r9
 8009e3e:	f7f6 fe6b 	bl	8000b18 <__aeabi_dcmpgt>
 8009e42:	2800      	cmp	r0, #0
 8009e44:	f43f af7b 	beq.w	8009d3e <_strtod_l+0xa0e>
 8009e48:	e4c4      	b.n	80097d4 <_strtod_l+0x4a4>
 8009e4a:	9b04      	ldr	r3, [sp, #16]
 8009e4c:	b333      	cbz	r3, 8009e9c <_strtod_l+0xb6c>
 8009e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e50:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e54:	d822      	bhi.n	8009e9c <_strtod_l+0xb6c>
 8009e56:	a32e      	add	r3, pc, #184	; (adr r3, 8009f10 <_strtod_l+0xbe0>)
 8009e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5c:	4640      	mov	r0, r8
 8009e5e:	4649      	mov	r1, r9
 8009e60:	f7f6 fe46 	bl	8000af0 <__aeabi_dcmple>
 8009e64:	b1a0      	cbz	r0, 8009e90 <_strtod_l+0xb60>
 8009e66:	4649      	mov	r1, r9
 8009e68:	4640      	mov	r0, r8
 8009e6a:	f7f6 fe9d 	bl	8000ba8 <__aeabi_d2uiz>
 8009e6e:	2801      	cmp	r0, #1
 8009e70:	bf38      	it	cc
 8009e72:	2001      	movcc	r0, #1
 8009e74:	f7f6 fb46 	bl	8000504 <__aeabi_ui2d>
 8009e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e7a:	4680      	mov	r8, r0
 8009e7c:	4689      	mov	r9, r1
 8009e7e:	bb23      	cbnz	r3, 8009eca <_strtod_l+0xb9a>
 8009e80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e84:	9010      	str	r0, [sp, #64]	; 0x40
 8009e86:	9311      	str	r3, [sp, #68]	; 0x44
 8009e88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e94:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009e98:	1a9b      	subs	r3, r3, r2
 8009e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ea0:	eeb0 0a48 	vmov.f32	s0, s16
 8009ea4:	eef0 0a68 	vmov.f32	s1, s17
 8009ea8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009eac:	f001 fe4a 	bl	800bb44 <__ulp>
 8009eb0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009eb4:	ec53 2b10 	vmov	r2, r3, d0
 8009eb8:	f7f6 fb9e 	bl	80005f8 <__aeabi_dmul>
 8009ebc:	ec53 2b18 	vmov	r2, r3, d8
 8009ec0:	f7f6 f9e4 	bl	800028c <__adddf3>
 8009ec4:	4682      	mov	sl, r0
 8009ec6:	468b      	mov	fp, r1
 8009ec8:	e78d      	b.n	8009de6 <_strtod_l+0xab6>
 8009eca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009ece:	e7db      	b.n	8009e88 <_strtod_l+0xb58>
 8009ed0:	a311      	add	r3, pc, #68	; (adr r3, 8009f18 <_strtod_l+0xbe8>)
 8009ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed6:	f7f6 fe01 	bl	8000adc <__aeabi_dcmplt>
 8009eda:	e7b2      	b.n	8009e42 <_strtod_l+0xb12>
 8009edc:	2300      	movs	r3, #0
 8009ede:	930a      	str	r3, [sp, #40]	; 0x28
 8009ee0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ee2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ee4:	6013      	str	r3, [r2, #0]
 8009ee6:	f7ff ba6b 	b.w	80093c0 <_strtod_l+0x90>
 8009eea:	2a65      	cmp	r2, #101	; 0x65
 8009eec:	f43f ab5f 	beq.w	80095ae <_strtod_l+0x27e>
 8009ef0:	2a45      	cmp	r2, #69	; 0x45
 8009ef2:	f43f ab5c 	beq.w	80095ae <_strtod_l+0x27e>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	f7ff bb94 	b.w	8009624 <_strtod_l+0x2f4>
 8009efc:	f3af 8000 	nop.w
 8009f00:	94a03595 	.word	0x94a03595
 8009f04:	3fdfffff 	.word	0x3fdfffff
 8009f08:	35afe535 	.word	0x35afe535
 8009f0c:	3fe00000 	.word	0x3fe00000
 8009f10:	ffc00000 	.word	0xffc00000
 8009f14:	41dfffff 	.word	0x41dfffff
 8009f18:	94a03595 	.word	0x94a03595
 8009f1c:	3fcfffff 	.word	0x3fcfffff
 8009f20:	3ff00000 	.word	0x3ff00000
 8009f24:	7ff00000 	.word	0x7ff00000
 8009f28:	7fe00000 	.word	0x7fe00000
 8009f2c:	7c9fffff 	.word	0x7c9fffff
 8009f30:	3fe00000 	.word	0x3fe00000
 8009f34:	bff00000 	.word	0xbff00000
 8009f38:	7fefffff 	.word	0x7fefffff

08009f3c <_strtod_r>:
 8009f3c:	4b01      	ldr	r3, [pc, #4]	; (8009f44 <_strtod_r+0x8>)
 8009f3e:	f7ff b9f7 	b.w	8009330 <_strtod_l>
 8009f42:	bf00      	nop
 8009f44:	20000164 	.word	0x20000164

08009f48 <_strtol_l.constprop.0>:
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f4e:	d001      	beq.n	8009f54 <_strtol_l.constprop.0+0xc>
 8009f50:	2b24      	cmp	r3, #36	; 0x24
 8009f52:	d906      	bls.n	8009f62 <_strtol_l.constprop.0+0x1a>
 8009f54:	f7fe fabc 	bl	80084d0 <__errno>
 8009f58:	2316      	movs	r3, #22
 8009f5a:	6003      	str	r3, [r0, #0]
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a048 <_strtol_l.constprop.0+0x100>
 8009f66:	460d      	mov	r5, r1
 8009f68:	462e      	mov	r6, r5
 8009f6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f6e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009f72:	f017 0708 	ands.w	r7, r7, #8
 8009f76:	d1f7      	bne.n	8009f68 <_strtol_l.constprop.0+0x20>
 8009f78:	2c2d      	cmp	r4, #45	; 0x2d
 8009f7a:	d132      	bne.n	8009fe2 <_strtol_l.constprop.0+0x9a>
 8009f7c:	782c      	ldrb	r4, [r5, #0]
 8009f7e:	2701      	movs	r7, #1
 8009f80:	1cb5      	adds	r5, r6, #2
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d05b      	beq.n	800a03e <_strtol_l.constprop.0+0xf6>
 8009f86:	2b10      	cmp	r3, #16
 8009f88:	d109      	bne.n	8009f9e <_strtol_l.constprop.0+0x56>
 8009f8a:	2c30      	cmp	r4, #48	; 0x30
 8009f8c:	d107      	bne.n	8009f9e <_strtol_l.constprop.0+0x56>
 8009f8e:	782c      	ldrb	r4, [r5, #0]
 8009f90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009f94:	2c58      	cmp	r4, #88	; 0x58
 8009f96:	d14d      	bne.n	800a034 <_strtol_l.constprop.0+0xec>
 8009f98:	786c      	ldrb	r4, [r5, #1]
 8009f9a:	2310      	movs	r3, #16
 8009f9c:	3502      	adds	r5, #2
 8009f9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009fa2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009fa6:	f04f 0c00 	mov.w	ip, #0
 8009faa:	fbb8 f9f3 	udiv	r9, r8, r3
 8009fae:	4666      	mov	r6, ip
 8009fb0:	fb03 8a19 	mls	sl, r3, r9, r8
 8009fb4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009fb8:	f1be 0f09 	cmp.w	lr, #9
 8009fbc:	d816      	bhi.n	8009fec <_strtol_l.constprop.0+0xa4>
 8009fbe:	4674      	mov	r4, lr
 8009fc0:	42a3      	cmp	r3, r4
 8009fc2:	dd24      	ble.n	800a00e <_strtol_l.constprop.0+0xc6>
 8009fc4:	f1bc 0f00 	cmp.w	ip, #0
 8009fc8:	db1e      	blt.n	800a008 <_strtol_l.constprop.0+0xc0>
 8009fca:	45b1      	cmp	r9, r6
 8009fcc:	d31c      	bcc.n	800a008 <_strtol_l.constprop.0+0xc0>
 8009fce:	d101      	bne.n	8009fd4 <_strtol_l.constprop.0+0x8c>
 8009fd0:	45a2      	cmp	sl, r4
 8009fd2:	db19      	blt.n	800a008 <_strtol_l.constprop.0+0xc0>
 8009fd4:	fb06 4603 	mla	r6, r6, r3, r4
 8009fd8:	f04f 0c01 	mov.w	ip, #1
 8009fdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fe0:	e7e8      	b.n	8009fb4 <_strtol_l.constprop.0+0x6c>
 8009fe2:	2c2b      	cmp	r4, #43	; 0x2b
 8009fe4:	bf04      	itt	eq
 8009fe6:	782c      	ldrbeq	r4, [r5, #0]
 8009fe8:	1cb5      	addeq	r5, r6, #2
 8009fea:	e7ca      	b.n	8009f82 <_strtol_l.constprop.0+0x3a>
 8009fec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009ff0:	f1be 0f19 	cmp.w	lr, #25
 8009ff4:	d801      	bhi.n	8009ffa <_strtol_l.constprop.0+0xb2>
 8009ff6:	3c37      	subs	r4, #55	; 0x37
 8009ff8:	e7e2      	b.n	8009fc0 <_strtol_l.constprop.0+0x78>
 8009ffa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009ffe:	f1be 0f19 	cmp.w	lr, #25
 800a002:	d804      	bhi.n	800a00e <_strtol_l.constprop.0+0xc6>
 800a004:	3c57      	subs	r4, #87	; 0x57
 800a006:	e7db      	b.n	8009fc0 <_strtol_l.constprop.0+0x78>
 800a008:	f04f 3cff 	mov.w	ip, #4294967295
 800a00c:	e7e6      	b.n	8009fdc <_strtol_l.constprop.0+0x94>
 800a00e:	f1bc 0f00 	cmp.w	ip, #0
 800a012:	da05      	bge.n	800a020 <_strtol_l.constprop.0+0xd8>
 800a014:	2322      	movs	r3, #34	; 0x22
 800a016:	6003      	str	r3, [r0, #0]
 800a018:	4646      	mov	r6, r8
 800a01a:	b942      	cbnz	r2, 800a02e <_strtol_l.constprop.0+0xe6>
 800a01c:	4630      	mov	r0, r6
 800a01e:	e79e      	b.n	8009f5e <_strtol_l.constprop.0+0x16>
 800a020:	b107      	cbz	r7, 800a024 <_strtol_l.constprop.0+0xdc>
 800a022:	4276      	negs	r6, r6
 800a024:	2a00      	cmp	r2, #0
 800a026:	d0f9      	beq.n	800a01c <_strtol_l.constprop.0+0xd4>
 800a028:	f1bc 0f00 	cmp.w	ip, #0
 800a02c:	d000      	beq.n	800a030 <_strtol_l.constprop.0+0xe8>
 800a02e:	1e69      	subs	r1, r5, #1
 800a030:	6011      	str	r1, [r2, #0]
 800a032:	e7f3      	b.n	800a01c <_strtol_l.constprop.0+0xd4>
 800a034:	2430      	movs	r4, #48	; 0x30
 800a036:	2b00      	cmp	r3, #0
 800a038:	d1b1      	bne.n	8009f9e <_strtol_l.constprop.0+0x56>
 800a03a:	2308      	movs	r3, #8
 800a03c:	e7af      	b.n	8009f9e <_strtol_l.constprop.0+0x56>
 800a03e:	2c30      	cmp	r4, #48	; 0x30
 800a040:	d0a5      	beq.n	8009f8e <_strtol_l.constprop.0+0x46>
 800a042:	230a      	movs	r3, #10
 800a044:	e7ab      	b.n	8009f9e <_strtol_l.constprop.0+0x56>
 800a046:	bf00      	nop
 800a048:	0800cf99 	.word	0x0800cf99

0800a04c <_strtol_r>:
 800a04c:	f7ff bf7c 	b.w	8009f48 <_strtol_l.constprop.0>

0800a050 <quorem>:
 800a050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a054:	6903      	ldr	r3, [r0, #16]
 800a056:	690c      	ldr	r4, [r1, #16]
 800a058:	42a3      	cmp	r3, r4
 800a05a:	4607      	mov	r7, r0
 800a05c:	f2c0 8081 	blt.w	800a162 <quorem+0x112>
 800a060:	3c01      	subs	r4, #1
 800a062:	f101 0814 	add.w	r8, r1, #20
 800a066:	f100 0514 	add.w	r5, r0, #20
 800a06a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a06e:	9301      	str	r3, [sp, #4]
 800a070:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a074:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a078:	3301      	adds	r3, #1
 800a07a:	429a      	cmp	r2, r3
 800a07c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a080:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a084:	fbb2 f6f3 	udiv	r6, r2, r3
 800a088:	d331      	bcc.n	800a0ee <quorem+0x9e>
 800a08a:	f04f 0e00 	mov.w	lr, #0
 800a08e:	4640      	mov	r0, r8
 800a090:	46ac      	mov	ip, r5
 800a092:	46f2      	mov	sl, lr
 800a094:	f850 2b04 	ldr.w	r2, [r0], #4
 800a098:	b293      	uxth	r3, r2
 800a09a:	fb06 e303 	mla	r3, r6, r3, lr
 800a09e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	ebaa 0303 	sub.w	r3, sl, r3
 800a0a8:	f8dc a000 	ldr.w	sl, [ip]
 800a0ac:	0c12      	lsrs	r2, r2, #16
 800a0ae:	fa13 f38a 	uxtah	r3, r3, sl
 800a0b2:	fb06 e202 	mla	r2, r6, r2, lr
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	9b00      	ldr	r3, [sp, #0]
 800a0ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a0be:	b292      	uxth	r2, r2
 800a0c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a0c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0c8:	f8bd 3000 	ldrh.w	r3, [sp]
 800a0cc:	4581      	cmp	r9, r0
 800a0ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0d2:	f84c 3b04 	str.w	r3, [ip], #4
 800a0d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a0da:	d2db      	bcs.n	800a094 <quorem+0x44>
 800a0dc:	f855 300b 	ldr.w	r3, [r5, fp]
 800a0e0:	b92b      	cbnz	r3, 800a0ee <quorem+0x9e>
 800a0e2:	9b01      	ldr	r3, [sp, #4]
 800a0e4:	3b04      	subs	r3, #4
 800a0e6:	429d      	cmp	r5, r3
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	d32e      	bcc.n	800a14a <quorem+0xfa>
 800a0ec:	613c      	str	r4, [r7, #16]
 800a0ee:	4638      	mov	r0, r7
 800a0f0:	f001 fc82 	bl	800b9f8 <__mcmp>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	db24      	blt.n	800a142 <quorem+0xf2>
 800a0f8:	3601      	adds	r6, #1
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	f04f 0c00 	mov.w	ip, #0
 800a100:	f858 2b04 	ldr.w	r2, [r8], #4
 800a104:	f8d0 e000 	ldr.w	lr, [r0]
 800a108:	b293      	uxth	r3, r2
 800a10a:	ebac 0303 	sub.w	r3, ip, r3
 800a10e:	0c12      	lsrs	r2, r2, #16
 800a110:	fa13 f38e 	uxtah	r3, r3, lr
 800a114:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a118:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a122:	45c1      	cmp	r9, r8
 800a124:	f840 3b04 	str.w	r3, [r0], #4
 800a128:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a12c:	d2e8      	bcs.n	800a100 <quorem+0xb0>
 800a12e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a132:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a136:	b922      	cbnz	r2, 800a142 <quorem+0xf2>
 800a138:	3b04      	subs	r3, #4
 800a13a:	429d      	cmp	r5, r3
 800a13c:	461a      	mov	r2, r3
 800a13e:	d30a      	bcc.n	800a156 <quorem+0x106>
 800a140:	613c      	str	r4, [r7, #16]
 800a142:	4630      	mov	r0, r6
 800a144:	b003      	add	sp, #12
 800a146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a14a:	6812      	ldr	r2, [r2, #0]
 800a14c:	3b04      	subs	r3, #4
 800a14e:	2a00      	cmp	r2, #0
 800a150:	d1cc      	bne.n	800a0ec <quorem+0x9c>
 800a152:	3c01      	subs	r4, #1
 800a154:	e7c7      	b.n	800a0e6 <quorem+0x96>
 800a156:	6812      	ldr	r2, [r2, #0]
 800a158:	3b04      	subs	r3, #4
 800a15a:	2a00      	cmp	r2, #0
 800a15c:	d1f0      	bne.n	800a140 <quorem+0xf0>
 800a15e:	3c01      	subs	r4, #1
 800a160:	e7eb      	b.n	800a13a <quorem+0xea>
 800a162:	2000      	movs	r0, #0
 800a164:	e7ee      	b.n	800a144 <quorem+0xf4>
	...

0800a168 <_dtoa_r>:
 800a168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a16c:	ed2d 8b04 	vpush	{d8-d9}
 800a170:	ec57 6b10 	vmov	r6, r7, d0
 800a174:	b093      	sub	sp, #76	; 0x4c
 800a176:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a178:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a17c:	9106      	str	r1, [sp, #24]
 800a17e:	ee10 aa10 	vmov	sl, s0
 800a182:	4604      	mov	r4, r0
 800a184:	9209      	str	r2, [sp, #36]	; 0x24
 800a186:	930c      	str	r3, [sp, #48]	; 0x30
 800a188:	46bb      	mov	fp, r7
 800a18a:	b975      	cbnz	r5, 800a1aa <_dtoa_r+0x42>
 800a18c:	2010      	movs	r0, #16
 800a18e:	f001 f94d 	bl	800b42c <malloc>
 800a192:	4602      	mov	r2, r0
 800a194:	6260      	str	r0, [r4, #36]	; 0x24
 800a196:	b920      	cbnz	r0, 800a1a2 <_dtoa_r+0x3a>
 800a198:	4ba7      	ldr	r3, [pc, #668]	; (800a438 <_dtoa_r+0x2d0>)
 800a19a:	21ea      	movs	r1, #234	; 0xea
 800a19c:	48a7      	ldr	r0, [pc, #668]	; (800a43c <_dtoa_r+0x2d4>)
 800a19e:	f002 f8ad 	bl	800c2fc <__assert_func>
 800a1a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a1a6:	6005      	str	r5, [r0, #0]
 800a1a8:	60c5      	str	r5, [r0, #12]
 800a1aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1ac:	6819      	ldr	r1, [r3, #0]
 800a1ae:	b151      	cbz	r1, 800a1c6 <_dtoa_r+0x5e>
 800a1b0:	685a      	ldr	r2, [r3, #4]
 800a1b2:	604a      	str	r2, [r1, #4]
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	4093      	lsls	r3, r2
 800a1b8:	608b      	str	r3, [r1, #8]
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f001 f990 	bl	800b4e0 <_Bfree>
 800a1c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]
 800a1c6:	1e3b      	subs	r3, r7, #0
 800a1c8:	bfaa      	itet	ge
 800a1ca:	2300      	movge	r3, #0
 800a1cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a1d0:	f8c8 3000 	strge.w	r3, [r8]
 800a1d4:	4b9a      	ldr	r3, [pc, #616]	; (800a440 <_dtoa_r+0x2d8>)
 800a1d6:	bfbc      	itt	lt
 800a1d8:	2201      	movlt	r2, #1
 800a1da:	f8c8 2000 	strlt.w	r2, [r8]
 800a1de:	ea33 030b 	bics.w	r3, r3, fp
 800a1e2:	d11b      	bne.n	800a21c <_dtoa_r+0xb4>
 800a1e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1e6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a1ea:	6013      	str	r3, [r2, #0]
 800a1ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1f0:	4333      	orrs	r3, r6
 800a1f2:	f000 8592 	beq.w	800ad1a <_dtoa_r+0xbb2>
 800a1f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1f8:	b963      	cbnz	r3, 800a214 <_dtoa_r+0xac>
 800a1fa:	4b92      	ldr	r3, [pc, #584]	; (800a444 <_dtoa_r+0x2dc>)
 800a1fc:	e022      	b.n	800a244 <_dtoa_r+0xdc>
 800a1fe:	4b92      	ldr	r3, [pc, #584]	; (800a448 <_dtoa_r+0x2e0>)
 800a200:	9301      	str	r3, [sp, #4]
 800a202:	3308      	adds	r3, #8
 800a204:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a206:	6013      	str	r3, [r2, #0]
 800a208:	9801      	ldr	r0, [sp, #4]
 800a20a:	b013      	add	sp, #76	; 0x4c
 800a20c:	ecbd 8b04 	vpop	{d8-d9}
 800a210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a214:	4b8b      	ldr	r3, [pc, #556]	; (800a444 <_dtoa_r+0x2dc>)
 800a216:	9301      	str	r3, [sp, #4]
 800a218:	3303      	adds	r3, #3
 800a21a:	e7f3      	b.n	800a204 <_dtoa_r+0x9c>
 800a21c:	2200      	movs	r2, #0
 800a21e:	2300      	movs	r3, #0
 800a220:	4650      	mov	r0, sl
 800a222:	4659      	mov	r1, fp
 800a224:	f7f6 fc50 	bl	8000ac8 <__aeabi_dcmpeq>
 800a228:	ec4b ab19 	vmov	d9, sl, fp
 800a22c:	4680      	mov	r8, r0
 800a22e:	b158      	cbz	r0, 800a248 <_dtoa_r+0xe0>
 800a230:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a232:	2301      	movs	r3, #1
 800a234:	6013      	str	r3, [r2, #0]
 800a236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f000 856b 	beq.w	800ad14 <_dtoa_r+0xbac>
 800a23e:	4883      	ldr	r0, [pc, #524]	; (800a44c <_dtoa_r+0x2e4>)
 800a240:	6018      	str	r0, [r3, #0]
 800a242:	1e43      	subs	r3, r0, #1
 800a244:	9301      	str	r3, [sp, #4]
 800a246:	e7df      	b.n	800a208 <_dtoa_r+0xa0>
 800a248:	ec4b ab10 	vmov	d0, sl, fp
 800a24c:	aa10      	add	r2, sp, #64	; 0x40
 800a24e:	a911      	add	r1, sp, #68	; 0x44
 800a250:	4620      	mov	r0, r4
 800a252:	f001 fcf3 	bl	800bc3c <__d2b>
 800a256:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a25a:	ee08 0a10 	vmov	s16, r0
 800a25e:	2d00      	cmp	r5, #0
 800a260:	f000 8084 	beq.w	800a36c <_dtoa_r+0x204>
 800a264:	ee19 3a90 	vmov	r3, s19
 800a268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a26c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a270:	4656      	mov	r6, sl
 800a272:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a276:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a27a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a27e:	4b74      	ldr	r3, [pc, #464]	; (800a450 <_dtoa_r+0x2e8>)
 800a280:	2200      	movs	r2, #0
 800a282:	4630      	mov	r0, r6
 800a284:	4639      	mov	r1, r7
 800a286:	f7f5 ffff 	bl	8000288 <__aeabi_dsub>
 800a28a:	a365      	add	r3, pc, #404	; (adr r3, 800a420 <_dtoa_r+0x2b8>)
 800a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a290:	f7f6 f9b2 	bl	80005f8 <__aeabi_dmul>
 800a294:	a364      	add	r3, pc, #400	; (adr r3, 800a428 <_dtoa_r+0x2c0>)
 800a296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29a:	f7f5 fff7 	bl	800028c <__adddf3>
 800a29e:	4606      	mov	r6, r0
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	460f      	mov	r7, r1
 800a2a4:	f7f6 f93e 	bl	8000524 <__aeabi_i2d>
 800a2a8:	a361      	add	r3, pc, #388	; (adr r3, 800a430 <_dtoa_r+0x2c8>)
 800a2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ae:	f7f6 f9a3 	bl	80005f8 <__aeabi_dmul>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	4639      	mov	r1, r7
 800a2ba:	f7f5 ffe7 	bl	800028c <__adddf3>
 800a2be:	4606      	mov	r6, r0
 800a2c0:	460f      	mov	r7, r1
 800a2c2:	f7f6 fc49 	bl	8000b58 <__aeabi_d2iz>
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	9000      	str	r0, [sp, #0]
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	4639      	mov	r1, r7
 800a2d0:	f7f6 fc04 	bl	8000adc <__aeabi_dcmplt>
 800a2d4:	b150      	cbz	r0, 800a2ec <_dtoa_r+0x184>
 800a2d6:	9800      	ldr	r0, [sp, #0]
 800a2d8:	f7f6 f924 	bl	8000524 <__aeabi_i2d>
 800a2dc:	4632      	mov	r2, r6
 800a2de:	463b      	mov	r3, r7
 800a2e0:	f7f6 fbf2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2e4:	b910      	cbnz	r0, 800a2ec <_dtoa_r+0x184>
 800a2e6:	9b00      	ldr	r3, [sp, #0]
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	9b00      	ldr	r3, [sp, #0]
 800a2ee:	2b16      	cmp	r3, #22
 800a2f0:	d85a      	bhi.n	800a3a8 <_dtoa_r+0x240>
 800a2f2:	9a00      	ldr	r2, [sp, #0]
 800a2f4:	4b57      	ldr	r3, [pc, #348]	; (800a454 <_dtoa_r+0x2ec>)
 800a2f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fe:	ec51 0b19 	vmov	r0, r1, d9
 800a302:	f7f6 fbeb 	bl	8000adc <__aeabi_dcmplt>
 800a306:	2800      	cmp	r0, #0
 800a308:	d050      	beq.n	800a3ac <_dtoa_r+0x244>
 800a30a:	9b00      	ldr	r3, [sp, #0]
 800a30c:	3b01      	subs	r3, #1
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	2300      	movs	r3, #0
 800a312:	930b      	str	r3, [sp, #44]	; 0x2c
 800a314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a316:	1b5d      	subs	r5, r3, r5
 800a318:	1e6b      	subs	r3, r5, #1
 800a31a:	9305      	str	r3, [sp, #20]
 800a31c:	bf45      	ittet	mi
 800a31e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a322:	9304      	strmi	r3, [sp, #16]
 800a324:	2300      	movpl	r3, #0
 800a326:	2300      	movmi	r3, #0
 800a328:	bf4c      	ite	mi
 800a32a:	9305      	strmi	r3, [sp, #20]
 800a32c:	9304      	strpl	r3, [sp, #16]
 800a32e:	9b00      	ldr	r3, [sp, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	db3d      	blt.n	800a3b0 <_dtoa_r+0x248>
 800a334:	9b05      	ldr	r3, [sp, #20]
 800a336:	9a00      	ldr	r2, [sp, #0]
 800a338:	920a      	str	r2, [sp, #40]	; 0x28
 800a33a:	4413      	add	r3, r2
 800a33c:	9305      	str	r3, [sp, #20]
 800a33e:	2300      	movs	r3, #0
 800a340:	9307      	str	r3, [sp, #28]
 800a342:	9b06      	ldr	r3, [sp, #24]
 800a344:	2b09      	cmp	r3, #9
 800a346:	f200 8089 	bhi.w	800a45c <_dtoa_r+0x2f4>
 800a34a:	2b05      	cmp	r3, #5
 800a34c:	bfc4      	itt	gt
 800a34e:	3b04      	subgt	r3, #4
 800a350:	9306      	strgt	r3, [sp, #24]
 800a352:	9b06      	ldr	r3, [sp, #24]
 800a354:	f1a3 0302 	sub.w	r3, r3, #2
 800a358:	bfcc      	ite	gt
 800a35a:	2500      	movgt	r5, #0
 800a35c:	2501      	movle	r5, #1
 800a35e:	2b03      	cmp	r3, #3
 800a360:	f200 8087 	bhi.w	800a472 <_dtoa_r+0x30a>
 800a364:	e8df f003 	tbb	[pc, r3]
 800a368:	59383a2d 	.word	0x59383a2d
 800a36c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a370:	441d      	add	r5, r3
 800a372:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a376:	2b20      	cmp	r3, #32
 800a378:	bfc1      	itttt	gt
 800a37a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a37e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a382:	fa0b f303 	lslgt.w	r3, fp, r3
 800a386:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a38a:	bfda      	itte	le
 800a38c:	f1c3 0320 	rsble	r3, r3, #32
 800a390:	fa06 f003 	lslle.w	r0, r6, r3
 800a394:	4318      	orrgt	r0, r3
 800a396:	f7f6 f8b5 	bl	8000504 <__aeabi_ui2d>
 800a39a:	2301      	movs	r3, #1
 800a39c:	4606      	mov	r6, r0
 800a39e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a3a2:	3d01      	subs	r5, #1
 800a3a4:	930e      	str	r3, [sp, #56]	; 0x38
 800a3a6:	e76a      	b.n	800a27e <_dtoa_r+0x116>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e7b2      	b.n	800a312 <_dtoa_r+0x1aa>
 800a3ac:	900b      	str	r0, [sp, #44]	; 0x2c
 800a3ae:	e7b1      	b.n	800a314 <_dtoa_r+0x1ac>
 800a3b0:	9b04      	ldr	r3, [sp, #16]
 800a3b2:	9a00      	ldr	r2, [sp, #0]
 800a3b4:	1a9b      	subs	r3, r3, r2
 800a3b6:	9304      	str	r3, [sp, #16]
 800a3b8:	4253      	negs	r3, r2
 800a3ba:	9307      	str	r3, [sp, #28]
 800a3bc:	2300      	movs	r3, #0
 800a3be:	930a      	str	r3, [sp, #40]	; 0x28
 800a3c0:	e7bf      	b.n	800a342 <_dtoa_r+0x1da>
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	9308      	str	r3, [sp, #32]
 800a3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	dc55      	bgt.n	800a478 <_dtoa_r+0x310>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a3d6:	e00c      	b.n	800a3f2 <_dtoa_r+0x28a>
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e7f3      	b.n	800a3c4 <_dtoa_r+0x25c>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3e0:	9308      	str	r3, [sp, #32]
 800a3e2:	9b00      	ldr	r3, [sp, #0]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	9302      	str	r3, [sp, #8]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	9303      	str	r3, [sp, #12]
 800a3ee:	bfb8      	it	lt
 800a3f0:	2301      	movlt	r3, #1
 800a3f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	6042      	str	r2, [r0, #4]
 800a3f8:	2204      	movs	r2, #4
 800a3fa:	f102 0614 	add.w	r6, r2, #20
 800a3fe:	429e      	cmp	r6, r3
 800a400:	6841      	ldr	r1, [r0, #4]
 800a402:	d93d      	bls.n	800a480 <_dtoa_r+0x318>
 800a404:	4620      	mov	r0, r4
 800a406:	f001 f82b 	bl	800b460 <_Balloc>
 800a40a:	9001      	str	r0, [sp, #4]
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d13b      	bne.n	800a488 <_dtoa_r+0x320>
 800a410:	4b11      	ldr	r3, [pc, #68]	; (800a458 <_dtoa_r+0x2f0>)
 800a412:	4602      	mov	r2, r0
 800a414:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a418:	e6c0      	b.n	800a19c <_dtoa_r+0x34>
 800a41a:	2301      	movs	r3, #1
 800a41c:	e7df      	b.n	800a3de <_dtoa_r+0x276>
 800a41e:	bf00      	nop
 800a420:	636f4361 	.word	0x636f4361
 800a424:	3fd287a7 	.word	0x3fd287a7
 800a428:	8b60c8b3 	.word	0x8b60c8b3
 800a42c:	3fc68a28 	.word	0x3fc68a28
 800a430:	509f79fb 	.word	0x509f79fb
 800a434:	3fd34413 	.word	0x3fd34413
 800a438:	0800d0a6 	.word	0x0800d0a6
 800a43c:	0800d0bd 	.word	0x0800d0bd
 800a440:	7ff00000 	.word	0x7ff00000
 800a444:	0800d0a2 	.word	0x0800d0a2
 800a448:	0800d099 	.word	0x0800d099
 800a44c:	0800cf1d 	.word	0x0800cf1d
 800a450:	3ff80000 	.word	0x3ff80000
 800a454:	0800d228 	.word	0x0800d228
 800a458:	0800d118 	.word	0x0800d118
 800a45c:	2501      	movs	r5, #1
 800a45e:	2300      	movs	r3, #0
 800a460:	9306      	str	r3, [sp, #24]
 800a462:	9508      	str	r5, [sp, #32]
 800a464:	f04f 33ff 	mov.w	r3, #4294967295
 800a468:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a46c:	2200      	movs	r2, #0
 800a46e:	2312      	movs	r3, #18
 800a470:	e7b0      	b.n	800a3d4 <_dtoa_r+0x26c>
 800a472:	2301      	movs	r3, #1
 800a474:	9308      	str	r3, [sp, #32]
 800a476:	e7f5      	b.n	800a464 <_dtoa_r+0x2fc>
 800a478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a47a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a47e:	e7b8      	b.n	800a3f2 <_dtoa_r+0x28a>
 800a480:	3101      	adds	r1, #1
 800a482:	6041      	str	r1, [r0, #4]
 800a484:	0052      	lsls	r2, r2, #1
 800a486:	e7b8      	b.n	800a3fa <_dtoa_r+0x292>
 800a488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a48a:	9a01      	ldr	r2, [sp, #4]
 800a48c:	601a      	str	r2, [r3, #0]
 800a48e:	9b03      	ldr	r3, [sp, #12]
 800a490:	2b0e      	cmp	r3, #14
 800a492:	f200 809d 	bhi.w	800a5d0 <_dtoa_r+0x468>
 800a496:	2d00      	cmp	r5, #0
 800a498:	f000 809a 	beq.w	800a5d0 <_dtoa_r+0x468>
 800a49c:	9b00      	ldr	r3, [sp, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	dd32      	ble.n	800a508 <_dtoa_r+0x3a0>
 800a4a2:	4ab7      	ldr	r2, [pc, #732]	; (800a780 <_dtoa_r+0x618>)
 800a4a4:	f003 030f 	and.w	r3, r3, #15
 800a4a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a4ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4b0:	9b00      	ldr	r3, [sp, #0]
 800a4b2:	05d8      	lsls	r0, r3, #23
 800a4b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a4b8:	d516      	bpl.n	800a4e8 <_dtoa_r+0x380>
 800a4ba:	4bb2      	ldr	r3, [pc, #712]	; (800a784 <_dtoa_r+0x61c>)
 800a4bc:	ec51 0b19 	vmov	r0, r1, d9
 800a4c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4c4:	f7f6 f9c2 	bl	800084c <__aeabi_ddiv>
 800a4c8:	f007 070f 	and.w	r7, r7, #15
 800a4cc:	4682      	mov	sl, r0
 800a4ce:	468b      	mov	fp, r1
 800a4d0:	2503      	movs	r5, #3
 800a4d2:	4eac      	ldr	r6, [pc, #688]	; (800a784 <_dtoa_r+0x61c>)
 800a4d4:	b957      	cbnz	r7, 800a4ec <_dtoa_r+0x384>
 800a4d6:	4642      	mov	r2, r8
 800a4d8:	464b      	mov	r3, r9
 800a4da:	4650      	mov	r0, sl
 800a4dc:	4659      	mov	r1, fp
 800a4de:	f7f6 f9b5 	bl	800084c <__aeabi_ddiv>
 800a4e2:	4682      	mov	sl, r0
 800a4e4:	468b      	mov	fp, r1
 800a4e6:	e028      	b.n	800a53a <_dtoa_r+0x3d2>
 800a4e8:	2502      	movs	r5, #2
 800a4ea:	e7f2      	b.n	800a4d2 <_dtoa_r+0x36a>
 800a4ec:	07f9      	lsls	r1, r7, #31
 800a4ee:	d508      	bpl.n	800a502 <_dtoa_r+0x39a>
 800a4f0:	4640      	mov	r0, r8
 800a4f2:	4649      	mov	r1, r9
 800a4f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4f8:	f7f6 f87e 	bl	80005f8 <__aeabi_dmul>
 800a4fc:	3501      	adds	r5, #1
 800a4fe:	4680      	mov	r8, r0
 800a500:	4689      	mov	r9, r1
 800a502:	107f      	asrs	r7, r7, #1
 800a504:	3608      	adds	r6, #8
 800a506:	e7e5      	b.n	800a4d4 <_dtoa_r+0x36c>
 800a508:	f000 809b 	beq.w	800a642 <_dtoa_r+0x4da>
 800a50c:	9b00      	ldr	r3, [sp, #0]
 800a50e:	4f9d      	ldr	r7, [pc, #628]	; (800a784 <_dtoa_r+0x61c>)
 800a510:	425e      	negs	r6, r3
 800a512:	4b9b      	ldr	r3, [pc, #620]	; (800a780 <_dtoa_r+0x618>)
 800a514:	f006 020f 	and.w	r2, r6, #15
 800a518:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a520:	ec51 0b19 	vmov	r0, r1, d9
 800a524:	f7f6 f868 	bl	80005f8 <__aeabi_dmul>
 800a528:	1136      	asrs	r6, r6, #4
 800a52a:	4682      	mov	sl, r0
 800a52c:	468b      	mov	fp, r1
 800a52e:	2300      	movs	r3, #0
 800a530:	2502      	movs	r5, #2
 800a532:	2e00      	cmp	r6, #0
 800a534:	d17a      	bne.n	800a62c <_dtoa_r+0x4c4>
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1d3      	bne.n	800a4e2 <_dtoa_r+0x37a>
 800a53a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 8082 	beq.w	800a646 <_dtoa_r+0x4de>
 800a542:	4b91      	ldr	r3, [pc, #580]	; (800a788 <_dtoa_r+0x620>)
 800a544:	2200      	movs	r2, #0
 800a546:	4650      	mov	r0, sl
 800a548:	4659      	mov	r1, fp
 800a54a:	f7f6 fac7 	bl	8000adc <__aeabi_dcmplt>
 800a54e:	2800      	cmp	r0, #0
 800a550:	d079      	beq.n	800a646 <_dtoa_r+0x4de>
 800a552:	9b03      	ldr	r3, [sp, #12]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d076      	beq.n	800a646 <_dtoa_r+0x4de>
 800a558:	9b02      	ldr	r3, [sp, #8]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	dd36      	ble.n	800a5cc <_dtoa_r+0x464>
 800a55e:	9b00      	ldr	r3, [sp, #0]
 800a560:	4650      	mov	r0, sl
 800a562:	4659      	mov	r1, fp
 800a564:	1e5f      	subs	r7, r3, #1
 800a566:	2200      	movs	r2, #0
 800a568:	4b88      	ldr	r3, [pc, #544]	; (800a78c <_dtoa_r+0x624>)
 800a56a:	f7f6 f845 	bl	80005f8 <__aeabi_dmul>
 800a56e:	9e02      	ldr	r6, [sp, #8]
 800a570:	4682      	mov	sl, r0
 800a572:	468b      	mov	fp, r1
 800a574:	3501      	adds	r5, #1
 800a576:	4628      	mov	r0, r5
 800a578:	f7f5 ffd4 	bl	8000524 <__aeabi_i2d>
 800a57c:	4652      	mov	r2, sl
 800a57e:	465b      	mov	r3, fp
 800a580:	f7f6 f83a 	bl	80005f8 <__aeabi_dmul>
 800a584:	4b82      	ldr	r3, [pc, #520]	; (800a790 <_dtoa_r+0x628>)
 800a586:	2200      	movs	r2, #0
 800a588:	f7f5 fe80 	bl	800028c <__adddf3>
 800a58c:	46d0      	mov	r8, sl
 800a58e:	46d9      	mov	r9, fp
 800a590:	4682      	mov	sl, r0
 800a592:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a596:	2e00      	cmp	r6, #0
 800a598:	d158      	bne.n	800a64c <_dtoa_r+0x4e4>
 800a59a:	4b7e      	ldr	r3, [pc, #504]	; (800a794 <_dtoa_r+0x62c>)
 800a59c:	2200      	movs	r2, #0
 800a59e:	4640      	mov	r0, r8
 800a5a0:	4649      	mov	r1, r9
 800a5a2:	f7f5 fe71 	bl	8000288 <__aeabi_dsub>
 800a5a6:	4652      	mov	r2, sl
 800a5a8:	465b      	mov	r3, fp
 800a5aa:	4680      	mov	r8, r0
 800a5ac:	4689      	mov	r9, r1
 800a5ae:	f7f6 fab3 	bl	8000b18 <__aeabi_dcmpgt>
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	f040 8295 	bne.w	800aae2 <_dtoa_r+0x97a>
 800a5b8:	4652      	mov	r2, sl
 800a5ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a5be:	4640      	mov	r0, r8
 800a5c0:	4649      	mov	r1, r9
 800a5c2:	f7f6 fa8b 	bl	8000adc <__aeabi_dcmplt>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	f040 8289 	bne.w	800aade <_dtoa_r+0x976>
 800a5cc:	ec5b ab19 	vmov	sl, fp, d9
 800a5d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f2c0 8148 	blt.w	800a868 <_dtoa_r+0x700>
 800a5d8:	9a00      	ldr	r2, [sp, #0]
 800a5da:	2a0e      	cmp	r2, #14
 800a5dc:	f300 8144 	bgt.w	800a868 <_dtoa_r+0x700>
 800a5e0:	4b67      	ldr	r3, [pc, #412]	; (800a780 <_dtoa_r+0x618>)
 800a5e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f280 80d5 	bge.w	800a79c <_dtoa_r+0x634>
 800a5f2:	9b03      	ldr	r3, [sp, #12]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f300 80d1 	bgt.w	800a79c <_dtoa_r+0x634>
 800a5fa:	f040 826f 	bne.w	800aadc <_dtoa_r+0x974>
 800a5fe:	4b65      	ldr	r3, [pc, #404]	; (800a794 <_dtoa_r+0x62c>)
 800a600:	2200      	movs	r2, #0
 800a602:	4640      	mov	r0, r8
 800a604:	4649      	mov	r1, r9
 800a606:	f7f5 fff7 	bl	80005f8 <__aeabi_dmul>
 800a60a:	4652      	mov	r2, sl
 800a60c:	465b      	mov	r3, fp
 800a60e:	f7f6 fa79 	bl	8000b04 <__aeabi_dcmpge>
 800a612:	9e03      	ldr	r6, [sp, #12]
 800a614:	4637      	mov	r7, r6
 800a616:	2800      	cmp	r0, #0
 800a618:	f040 8245 	bne.w	800aaa6 <_dtoa_r+0x93e>
 800a61c:	9d01      	ldr	r5, [sp, #4]
 800a61e:	2331      	movs	r3, #49	; 0x31
 800a620:	f805 3b01 	strb.w	r3, [r5], #1
 800a624:	9b00      	ldr	r3, [sp, #0]
 800a626:	3301      	adds	r3, #1
 800a628:	9300      	str	r3, [sp, #0]
 800a62a:	e240      	b.n	800aaae <_dtoa_r+0x946>
 800a62c:	07f2      	lsls	r2, r6, #31
 800a62e:	d505      	bpl.n	800a63c <_dtoa_r+0x4d4>
 800a630:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a634:	f7f5 ffe0 	bl	80005f8 <__aeabi_dmul>
 800a638:	3501      	adds	r5, #1
 800a63a:	2301      	movs	r3, #1
 800a63c:	1076      	asrs	r6, r6, #1
 800a63e:	3708      	adds	r7, #8
 800a640:	e777      	b.n	800a532 <_dtoa_r+0x3ca>
 800a642:	2502      	movs	r5, #2
 800a644:	e779      	b.n	800a53a <_dtoa_r+0x3d2>
 800a646:	9f00      	ldr	r7, [sp, #0]
 800a648:	9e03      	ldr	r6, [sp, #12]
 800a64a:	e794      	b.n	800a576 <_dtoa_r+0x40e>
 800a64c:	9901      	ldr	r1, [sp, #4]
 800a64e:	4b4c      	ldr	r3, [pc, #304]	; (800a780 <_dtoa_r+0x618>)
 800a650:	4431      	add	r1, r6
 800a652:	910d      	str	r1, [sp, #52]	; 0x34
 800a654:	9908      	ldr	r1, [sp, #32]
 800a656:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a65a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a65e:	2900      	cmp	r1, #0
 800a660:	d043      	beq.n	800a6ea <_dtoa_r+0x582>
 800a662:	494d      	ldr	r1, [pc, #308]	; (800a798 <_dtoa_r+0x630>)
 800a664:	2000      	movs	r0, #0
 800a666:	f7f6 f8f1 	bl	800084c <__aeabi_ddiv>
 800a66a:	4652      	mov	r2, sl
 800a66c:	465b      	mov	r3, fp
 800a66e:	f7f5 fe0b 	bl	8000288 <__aeabi_dsub>
 800a672:	9d01      	ldr	r5, [sp, #4]
 800a674:	4682      	mov	sl, r0
 800a676:	468b      	mov	fp, r1
 800a678:	4649      	mov	r1, r9
 800a67a:	4640      	mov	r0, r8
 800a67c:	f7f6 fa6c 	bl	8000b58 <__aeabi_d2iz>
 800a680:	4606      	mov	r6, r0
 800a682:	f7f5 ff4f 	bl	8000524 <__aeabi_i2d>
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	4640      	mov	r0, r8
 800a68c:	4649      	mov	r1, r9
 800a68e:	f7f5 fdfb 	bl	8000288 <__aeabi_dsub>
 800a692:	3630      	adds	r6, #48	; 0x30
 800a694:	f805 6b01 	strb.w	r6, [r5], #1
 800a698:	4652      	mov	r2, sl
 800a69a:	465b      	mov	r3, fp
 800a69c:	4680      	mov	r8, r0
 800a69e:	4689      	mov	r9, r1
 800a6a0:	f7f6 fa1c 	bl	8000adc <__aeabi_dcmplt>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d163      	bne.n	800a770 <_dtoa_r+0x608>
 800a6a8:	4642      	mov	r2, r8
 800a6aa:	464b      	mov	r3, r9
 800a6ac:	4936      	ldr	r1, [pc, #216]	; (800a788 <_dtoa_r+0x620>)
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	f7f5 fdea 	bl	8000288 <__aeabi_dsub>
 800a6b4:	4652      	mov	r2, sl
 800a6b6:	465b      	mov	r3, fp
 800a6b8:	f7f6 fa10 	bl	8000adc <__aeabi_dcmplt>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	f040 80b5 	bne.w	800a82c <_dtoa_r+0x6c4>
 800a6c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6c4:	429d      	cmp	r5, r3
 800a6c6:	d081      	beq.n	800a5cc <_dtoa_r+0x464>
 800a6c8:	4b30      	ldr	r3, [pc, #192]	; (800a78c <_dtoa_r+0x624>)
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	4650      	mov	r0, sl
 800a6ce:	4659      	mov	r1, fp
 800a6d0:	f7f5 ff92 	bl	80005f8 <__aeabi_dmul>
 800a6d4:	4b2d      	ldr	r3, [pc, #180]	; (800a78c <_dtoa_r+0x624>)
 800a6d6:	4682      	mov	sl, r0
 800a6d8:	468b      	mov	fp, r1
 800a6da:	4640      	mov	r0, r8
 800a6dc:	4649      	mov	r1, r9
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f7f5 ff8a 	bl	80005f8 <__aeabi_dmul>
 800a6e4:	4680      	mov	r8, r0
 800a6e6:	4689      	mov	r9, r1
 800a6e8:	e7c6      	b.n	800a678 <_dtoa_r+0x510>
 800a6ea:	4650      	mov	r0, sl
 800a6ec:	4659      	mov	r1, fp
 800a6ee:	f7f5 ff83 	bl	80005f8 <__aeabi_dmul>
 800a6f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6f4:	9d01      	ldr	r5, [sp, #4]
 800a6f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6f8:	4682      	mov	sl, r0
 800a6fa:	468b      	mov	fp, r1
 800a6fc:	4649      	mov	r1, r9
 800a6fe:	4640      	mov	r0, r8
 800a700:	f7f6 fa2a 	bl	8000b58 <__aeabi_d2iz>
 800a704:	4606      	mov	r6, r0
 800a706:	f7f5 ff0d 	bl	8000524 <__aeabi_i2d>
 800a70a:	3630      	adds	r6, #48	; 0x30
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	4640      	mov	r0, r8
 800a712:	4649      	mov	r1, r9
 800a714:	f7f5 fdb8 	bl	8000288 <__aeabi_dsub>
 800a718:	f805 6b01 	strb.w	r6, [r5], #1
 800a71c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a71e:	429d      	cmp	r5, r3
 800a720:	4680      	mov	r8, r0
 800a722:	4689      	mov	r9, r1
 800a724:	f04f 0200 	mov.w	r2, #0
 800a728:	d124      	bne.n	800a774 <_dtoa_r+0x60c>
 800a72a:	4b1b      	ldr	r3, [pc, #108]	; (800a798 <_dtoa_r+0x630>)
 800a72c:	4650      	mov	r0, sl
 800a72e:	4659      	mov	r1, fp
 800a730:	f7f5 fdac 	bl	800028c <__adddf3>
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	4640      	mov	r0, r8
 800a73a:	4649      	mov	r1, r9
 800a73c:	f7f6 f9ec 	bl	8000b18 <__aeabi_dcmpgt>
 800a740:	2800      	cmp	r0, #0
 800a742:	d173      	bne.n	800a82c <_dtoa_r+0x6c4>
 800a744:	4652      	mov	r2, sl
 800a746:	465b      	mov	r3, fp
 800a748:	4913      	ldr	r1, [pc, #76]	; (800a798 <_dtoa_r+0x630>)
 800a74a:	2000      	movs	r0, #0
 800a74c:	f7f5 fd9c 	bl	8000288 <__aeabi_dsub>
 800a750:	4602      	mov	r2, r0
 800a752:	460b      	mov	r3, r1
 800a754:	4640      	mov	r0, r8
 800a756:	4649      	mov	r1, r9
 800a758:	f7f6 f9c0 	bl	8000adc <__aeabi_dcmplt>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	f43f af35 	beq.w	800a5cc <_dtoa_r+0x464>
 800a762:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a764:	1e6b      	subs	r3, r5, #1
 800a766:	930f      	str	r3, [sp, #60]	; 0x3c
 800a768:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a76c:	2b30      	cmp	r3, #48	; 0x30
 800a76e:	d0f8      	beq.n	800a762 <_dtoa_r+0x5fa>
 800a770:	9700      	str	r7, [sp, #0]
 800a772:	e049      	b.n	800a808 <_dtoa_r+0x6a0>
 800a774:	4b05      	ldr	r3, [pc, #20]	; (800a78c <_dtoa_r+0x624>)
 800a776:	f7f5 ff3f 	bl	80005f8 <__aeabi_dmul>
 800a77a:	4680      	mov	r8, r0
 800a77c:	4689      	mov	r9, r1
 800a77e:	e7bd      	b.n	800a6fc <_dtoa_r+0x594>
 800a780:	0800d228 	.word	0x0800d228
 800a784:	0800d200 	.word	0x0800d200
 800a788:	3ff00000 	.word	0x3ff00000
 800a78c:	40240000 	.word	0x40240000
 800a790:	401c0000 	.word	0x401c0000
 800a794:	40140000 	.word	0x40140000
 800a798:	3fe00000 	.word	0x3fe00000
 800a79c:	9d01      	ldr	r5, [sp, #4]
 800a79e:	4656      	mov	r6, sl
 800a7a0:	465f      	mov	r7, fp
 800a7a2:	4642      	mov	r2, r8
 800a7a4:	464b      	mov	r3, r9
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	4639      	mov	r1, r7
 800a7aa:	f7f6 f84f 	bl	800084c <__aeabi_ddiv>
 800a7ae:	f7f6 f9d3 	bl	8000b58 <__aeabi_d2iz>
 800a7b2:	4682      	mov	sl, r0
 800a7b4:	f7f5 feb6 	bl	8000524 <__aeabi_i2d>
 800a7b8:	4642      	mov	r2, r8
 800a7ba:	464b      	mov	r3, r9
 800a7bc:	f7f5 ff1c 	bl	80005f8 <__aeabi_dmul>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	4639      	mov	r1, r7
 800a7c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a7cc:	f7f5 fd5c 	bl	8000288 <__aeabi_dsub>
 800a7d0:	f805 6b01 	strb.w	r6, [r5], #1
 800a7d4:	9e01      	ldr	r6, [sp, #4]
 800a7d6:	9f03      	ldr	r7, [sp, #12]
 800a7d8:	1bae      	subs	r6, r5, r6
 800a7da:	42b7      	cmp	r7, r6
 800a7dc:	4602      	mov	r2, r0
 800a7de:	460b      	mov	r3, r1
 800a7e0:	d135      	bne.n	800a84e <_dtoa_r+0x6e6>
 800a7e2:	f7f5 fd53 	bl	800028c <__adddf3>
 800a7e6:	4642      	mov	r2, r8
 800a7e8:	464b      	mov	r3, r9
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	460f      	mov	r7, r1
 800a7ee:	f7f6 f993 	bl	8000b18 <__aeabi_dcmpgt>
 800a7f2:	b9d0      	cbnz	r0, 800a82a <_dtoa_r+0x6c2>
 800a7f4:	4642      	mov	r2, r8
 800a7f6:	464b      	mov	r3, r9
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	4639      	mov	r1, r7
 800a7fc:	f7f6 f964 	bl	8000ac8 <__aeabi_dcmpeq>
 800a800:	b110      	cbz	r0, 800a808 <_dtoa_r+0x6a0>
 800a802:	f01a 0f01 	tst.w	sl, #1
 800a806:	d110      	bne.n	800a82a <_dtoa_r+0x6c2>
 800a808:	4620      	mov	r0, r4
 800a80a:	ee18 1a10 	vmov	r1, s16
 800a80e:	f000 fe67 	bl	800b4e0 <_Bfree>
 800a812:	2300      	movs	r3, #0
 800a814:	9800      	ldr	r0, [sp, #0]
 800a816:	702b      	strb	r3, [r5, #0]
 800a818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a81a:	3001      	adds	r0, #1
 800a81c:	6018      	str	r0, [r3, #0]
 800a81e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a820:	2b00      	cmp	r3, #0
 800a822:	f43f acf1 	beq.w	800a208 <_dtoa_r+0xa0>
 800a826:	601d      	str	r5, [r3, #0]
 800a828:	e4ee      	b.n	800a208 <_dtoa_r+0xa0>
 800a82a:	9f00      	ldr	r7, [sp, #0]
 800a82c:	462b      	mov	r3, r5
 800a82e:	461d      	mov	r5, r3
 800a830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a834:	2a39      	cmp	r2, #57	; 0x39
 800a836:	d106      	bne.n	800a846 <_dtoa_r+0x6de>
 800a838:	9a01      	ldr	r2, [sp, #4]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d1f7      	bne.n	800a82e <_dtoa_r+0x6c6>
 800a83e:	9901      	ldr	r1, [sp, #4]
 800a840:	2230      	movs	r2, #48	; 0x30
 800a842:	3701      	adds	r7, #1
 800a844:	700a      	strb	r2, [r1, #0]
 800a846:	781a      	ldrb	r2, [r3, #0]
 800a848:	3201      	adds	r2, #1
 800a84a:	701a      	strb	r2, [r3, #0]
 800a84c:	e790      	b.n	800a770 <_dtoa_r+0x608>
 800a84e:	4ba6      	ldr	r3, [pc, #664]	; (800aae8 <_dtoa_r+0x980>)
 800a850:	2200      	movs	r2, #0
 800a852:	f7f5 fed1 	bl	80005f8 <__aeabi_dmul>
 800a856:	2200      	movs	r2, #0
 800a858:	2300      	movs	r3, #0
 800a85a:	4606      	mov	r6, r0
 800a85c:	460f      	mov	r7, r1
 800a85e:	f7f6 f933 	bl	8000ac8 <__aeabi_dcmpeq>
 800a862:	2800      	cmp	r0, #0
 800a864:	d09d      	beq.n	800a7a2 <_dtoa_r+0x63a>
 800a866:	e7cf      	b.n	800a808 <_dtoa_r+0x6a0>
 800a868:	9a08      	ldr	r2, [sp, #32]
 800a86a:	2a00      	cmp	r2, #0
 800a86c:	f000 80d7 	beq.w	800aa1e <_dtoa_r+0x8b6>
 800a870:	9a06      	ldr	r2, [sp, #24]
 800a872:	2a01      	cmp	r2, #1
 800a874:	f300 80ba 	bgt.w	800a9ec <_dtoa_r+0x884>
 800a878:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a87a:	2a00      	cmp	r2, #0
 800a87c:	f000 80b2 	beq.w	800a9e4 <_dtoa_r+0x87c>
 800a880:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a884:	9e07      	ldr	r6, [sp, #28]
 800a886:	9d04      	ldr	r5, [sp, #16]
 800a888:	9a04      	ldr	r2, [sp, #16]
 800a88a:	441a      	add	r2, r3
 800a88c:	9204      	str	r2, [sp, #16]
 800a88e:	9a05      	ldr	r2, [sp, #20]
 800a890:	2101      	movs	r1, #1
 800a892:	441a      	add	r2, r3
 800a894:	4620      	mov	r0, r4
 800a896:	9205      	str	r2, [sp, #20]
 800a898:	f000 ff24 	bl	800b6e4 <__i2b>
 800a89c:	4607      	mov	r7, r0
 800a89e:	2d00      	cmp	r5, #0
 800a8a0:	dd0c      	ble.n	800a8bc <_dtoa_r+0x754>
 800a8a2:	9b05      	ldr	r3, [sp, #20]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	dd09      	ble.n	800a8bc <_dtoa_r+0x754>
 800a8a8:	42ab      	cmp	r3, r5
 800a8aa:	9a04      	ldr	r2, [sp, #16]
 800a8ac:	bfa8      	it	ge
 800a8ae:	462b      	movge	r3, r5
 800a8b0:	1ad2      	subs	r2, r2, r3
 800a8b2:	9204      	str	r2, [sp, #16]
 800a8b4:	9a05      	ldr	r2, [sp, #20]
 800a8b6:	1aed      	subs	r5, r5, r3
 800a8b8:	1ad3      	subs	r3, r2, r3
 800a8ba:	9305      	str	r3, [sp, #20]
 800a8bc:	9b07      	ldr	r3, [sp, #28]
 800a8be:	b31b      	cbz	r3, 800a908 <_dtoa_r+0x7a0>
 800a8c0:	9b08      	ldr	r3, [sp, #32]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f000 80af 	beq.w	800aa26 <_dtoa_r+0x8be>
 800a8c8:	2e00      	cmp	r6, #0
 800a8ca:	dd13      	ble.n	800a8f4 <_dtoa_r+0x78c>
 800a8cc:	4639      	mov	r1, r7
 800a8ce:	4632      	mov	r2, r6
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f000 ffc7 	bl	800b864 <__pow5mult>
 800a8d6:	ee18 2a10 	vmov	r2, s16
 800a8da:	4601      	mov	r1, r0
 800a8dc:	4607      	mov	r7, r0
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f000 ff16 	bl	800b710 <__multiply>
 800a8e4:	ee18 1a10 	vmov	r1, s16
 800a8e8:	4680      	mov	r8, r0
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f000 fdf8 	bl	800b4e0 <_Bfree>
 800a8f0:	ee08 8a10 	vmov	s16, r8
 800a8f4:	9b07      	ldr	r3, [sp, #28]
 800a8f6:	1b9a      	subs	r2, r3, r6
 800a8f8:	d006      	beq.n	800a908 <_dtoa_r+0x7a0>
 800a8fa:	ee18 1a10 	vmov	r1, s16
 800a8fe:	4620      	mov	r0, r4
 800a900:	f000 ffb0 	bl	800b864 <__pow5mult>
 800a904:	ee08 0a10 	vmov	s16, r0
 800a908:	2101      	movs	r1, #1
 800a90a:	4620      	mov	r0, r4
 800a90c:	f000 feea 	bl	800b6e4 <__i2b>
 800a910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a912:	2b00      	cmp	r3, #0
 800a914:	4606      	mov	r6, r0
 800a916:	f340 8088 	ble.w	800aa2a <_dtoa_r+0x8c2>
 800a91a:	461a      	mov	r2, r3
 800a91c:	4601      	mov	r1, r0
 800a91e:	4620      	mov	r0, r4
 800a920:	f000 ffa0 	bl	800b864 <__pow5mult>
 800a924:	9b06      	ldr	r3, [sp, #24]
 800a926:	2b01      	cmp	r3, #1
 800a928:	4606      	mov	r6, r0
 800a92a:	f340 8081 	ble.w	800aa30 <_dtoa_r+0x8c8>
 800a92e:	f04f 0800 	mov.w	r8, #0
 800a932:	6933      	ldr	r3, [r6, #16]
 800a934:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a938:	6918      	ldr	r0, [r3, #16]
 800a93a:	f000 fe83 	bl	800b644 <__hi0bits>
 800a93e:	f1c0 0020 	rsb	r0, r0, #32
 800a942:	9b05      	ldr	r3, [sp, #20]
 800a944:	4418      	add	r0, r3
 800a946:	f010 001f 	ands.w	r0, r0, #31
 800a94a:	f000 8092 	beq.w	800aa72 <_dtoa_r+0x90a>
 800a94e:	f1c0 0320 	rsb	r3, r0, #32
 800a952:	2b04      	cmp	r3, #4
 800a954:	f340 808a 	ble.w	800aa6c <_dtoa_r+0x904>
 800a958:	f1c0 001c 	rsb	r0, r0, #28
 800a95c:	9b04      	ldr	r3, [sp, #16]
 800a95e:	4403      	add	r3, r0
 800a960:	9304      	str	r3, [sp, #16]
 800a962:	9b05      	ldr	r3, [sp, #20]
 800a964:	4403      	add	r3, r0
 800a966:	4405      	add	r5, r0
 800a968:	9305      	str	r3, [sp, #20]
 800a96a:	9b04      	ldr	r3, [sp, #16]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	dd07      	ble.n	800a980 <_dtoa_r+0x818>
 800a970:	ee18 1a10 	vmov	r1, s16
 800a974:	461a      	mov	r2, r3
 800a976:	4620      	mov	r0, r4
 800a978:	f000 ffce 	bl	800b918 <__lshift>
 800a97c:	ee08 0a10 	vmov	s16, r0
 800a980:	9b05      	ldr	r3, [sp, #20]
 800a982:	2b00      	cmp	r3, #0
 800a984:	dd05      	ble.n	800a992 <_dtoa_r+0x82a>
 800a986:	4631      	mov	r1, r6
 800a988:	461a      	mov	r2, r3
 800a98a:	4620      	mov	r0, r4
 800a98c:	f000 ffc4 	bl	800b918 <__lshift>
 800a990:	4606      	mov	r6, r0
 800a992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a994:	2b00      	cmp	r3, #0
 800a996:	d06e      	beq.n	800aa76 <_dtoa_r+0x90e>
 800a998:	ee18 0a10 	vmov	r0, s16
 800a99c:	4631      	mov	r1, r6
 800a99e:	f001 f82b 	bl	800b9f8 <__mcmp>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	da67      	bge.n	800aa76 <_dtoa_r+0x90e>
 800a9a6:	9b00      	ldr	r3, [sp, #0]
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	ee18 1a10 	vmov	r1, s16
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	220a      	movs	r2, #10
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f000 fdb5 	bl	800b524 <__multadd>
 800a9ba:	9b08      	ldr	r3, [sp, #32]
 800a9bc:	ee08 0a10 	vmov	s16, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f000 81b1 	beq.w	800ad28 <_dtoa_r+0xbc0>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	4639      	mov	r1, r7
 800a9ca:	220a      	movs	r2, #10
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f000 fda9 	bl	800b524 <__multadd>
 800a9d2:	9b02      	ldr	r3, [sp, #8]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	4607      	mov	r7, r0
 800a9d8:	f300 808e 	bgt.w	800aaf8 <_dtoa_r+0x990>
 800a9dc:	9b06      	ldr	r3, [sp, #24]
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	dc51      	bgt.n	800aa86 <_dtoa_r+0x91e>
 800a9e2:	e089      	b.n	800aaf8 <_dtoa_r+0x990>
 800a9e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a9ea:	e74b      	b.n	800a884 <_dtoa_r+0x71c>
 800a9ec:	9b03      	ldr	r3, [sp, #12]
 800a9ee:	1e5e      	subs	r6, r3, #1
 800a9f0:	9b07      	ldr	r3, [sp, #28]
 800a9f2:	42b3      	cmp	r3, r6
 800a9f4:	bfbf      	itttt	lt
 800a9f6:	9b07      	ldrlt	r3, [sp, #28]
 800a9f8:	9607      	strlt	r6, [sp, #28]
 800a9fa:	1af2      	sublt	r2, r6, r3
 800a9fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a9fe:	bfb6      	itet	lt
 800aa00:	189b      	addlt	r3, r3, r2
 800aa02:	1b9e      	subge	r6, r3, r6
 800aa04:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aa06:	9b03      	ldr	r3, [sp, #12]
 800aa08:	bfb8      	it	lt
 800aa0a:	2600      	movlt	r6, #0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	bfb7      	itett	lt
 800aa10:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aa14:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aa18:	1a9d      	sublt	r5, r3, r2
 800aa1a:	2300      	movlt	r3, #0
 800aa1c:	e734      	b.n	800a888 <_dtoa_r+0x720>
 800aa1e:	9e07      	ldr	r6, [sp, #28]
 800aa20:	9d04      	ldr	r5, [sp, #16]
 800aa22:	9f08      	ldr	r7, [sp, #32]
 800aa24:	e73b      	b.n	800a89e <_dtoa_r+0x736>
 800aa26:	9a07      	ldr	r2, [sp, #28]
 800aa28:	e767      	b.n	800a8fa <_dtoa_r+0x792>
 800aa2a:	9b06      	ldr	r3, [sp, #24]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	dc18      	bgt.n	800aa62 <_dtoa_r+0x8fa>
 800aa30:	f1ba 0f00 	cmp.w	sl, #0
 800aa34:	d115      	bne.n	800aa62 <_dtoa_r+0x8fa>
 800aa36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa3a:	b993      	cbnz	r3, 800aa62 <_dtoa_r+0x8fa>
 800aa3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa40:	0d1b      	lsrs	r3, r3, #20
 800aa42:	051b      	lsls	r3, r3, #20
 800aa44:	b183      	cbz	r3, 800aa68 <_dtoa_r+0x900>
 800aa46:	9b04      	ldr	r3, [sp, #16]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	9304      	str	r3, [sp, #16]
 800aa4c:	9b05      	ldr	r3, [sp, #20]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	9305      	str	r3, [sp, #20]
 800aa52:	f04f 0801 	mov.w	r8, #1
 800aa56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f47f af6a 	bne.w	800a932 <_dtoa_r+0x7ca>
 800aa5e:	2001      	movs	r0, #1
 800aa60:	e76f      	b.n	800a942 <_dtoa_r+0x7da>
 800aa62:	f04f 0800 	mov.w	r8, #0
 800aa66:	e7f6      	b.n	800aa56 <_dtoa_r+0x8ee>
 800aa68:	4698      	mov	r8, r3
 800aa6a:	e7f4      	b.n	800aa56 <_dtoa_r+0x8ee>
 800aa6c:	f43f af7d 	beq.w	800a96a <_dtoa_r+0x802>
 800aa70:	4618      	mov	r0, r3
 800aa72:	301c      	adds	r0, #28
 800aa74:	e772      	b.n	800a95c <_dtoa_r+0x7f4>
 800aa76:	9b03      	ldr	r3, [sp, #12]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	dc37      	bgt.n	800aaec <_dtoa_r+0x984>
 800aa7c:	9b06      	ldr	r3, [sp, #24]
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	dd34      	ble.n	800aaec <_dtoa_r+0x984>
 800aa82:	9b03      	ldr	r3, [sp, #12]
 800aa84:	9302      	str	r3, [sp, #8]
 800aa86:	9b02      	ldr	r3, [sp, #8]
 800aa88:	b96b      	cbnz	r3, 800aaa6 <_dtoa_r+0x93e>
 800aa8a:	4631      	mov	r1, r6
 800aa8c:	2205      	movs	r2, #5
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f000 fd48 	bl	800b524 <__multadd>
 800aa94:	4601      	mov	r1, r0
 800aa96:	4606      	mov	r6, r0
 800aa98:	ee18 0a10 	vmov	r0, s16
 800aa9c:	f000 ffac 	bl	800b9f8 <__mcmp>
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	f73f adbb 	bgt.w	800a61c <_dtoa_r+0x4b4>
 800aaa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaa8:	9d01      	ldr	r5, [sp, #4]
 800aaaa:	43db      	mvns	r3, r3
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	f04f 0800 	mov.w	r8, #0
 800aab2:	4631      	mov	r1, r6
 800aab4:	4620      	mov	r0, r4
 800aab6:	f000 fd13 	bl	800b4e0 <_Bfree>
 800aaba:	2f00      	cmp	r7, #0
 800aabc:	f43f aea4 	beq.w	800a808 <_dtoa_r+0x6a0>
 800aac0:	f1b8 0f00 	cmp.w	r8, #0
 800aac4:	d005      	beq.n	800aad2 <_dtoa_r+0x96a>
 800aac6:	45b8      	cmp	r8, r7
 800aac8:	d003      	beq.n	800aad2 <_dtoa_r+0x96a>
 800aaca:	4641      	mov	r1, r8
 800aacc:	4620      	mov	r0, r4
 800aace:	f000 fd07 	bl	800b4e0 <_Bfree>
 800aad2:	4639      	mov	r1, r7
 800aad4:	4620      	mov	r0, r4
 800aad6:	f000 fd03 	bl	800b4e0 <_Bfree>
 800aada:	e695      	b.n	800a808 <_dtoa_r+0x6a0>
 800aadc:	2600      	movs	r6, #0
 800aade:	4637      	mov	r7, r6
 800aae0:	e7e1      	b.n	800aaa6 <_dtoa_r+0x93e>
 800aae2:	9700      	str	r7, [sp, #0]
 800aae4:	4637      	mov	r7, r6
 800aae6:	e599      	b.n	800a61c <_dtoa_r+0x4b4>
 800aae8:	40240000 	.word	0x40240000
 800aaec:	9b08      	ldr	r3, [sp, #32]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f000 80ca 	beq.w	800ac88 <_dtoa_r+0xb20>
 800aaf4:	9b03      	ldr	r3, [sp, #12]
 800aaf6:	9302      	str	r3, [sp, #8]
 800aaf8:	2d00      	cmp	r5, #0
 800aafa:	dd05      	ble.n	800ab08 <_dtoa_r+0x9a0>
 800aafc:	4639      	mov	r1, r7
 800aafe:	462a      	mov	r2, r5
 800ab00:	4620      	mov	r0, r4
 800ab02:	f000 ff09 	bl	800b918 <__lshift>
 800ab06:	4607      	mov	r7, r0
 800ab08:	f1b8 0f00 	cmp.w	r8, #0
 800ab0c:	d05b      	beq.n	800abc6 <_dtoa_r+0xa5e>
 800ab0e:	6879      	ldr	r1, [r7, #4]
 800ab10:	4620      	mov	r0, r4
 800ab12:	f000 fca5 	bl	800b460 <_Balloc>
 800ab16:	4605      	mov	r5, r0
 800ab18:	b928      	cbnz	r0, 800ab26 <_dtoa_r+0x9be>
 800ab1a:	4b87      	ldr	r3, [pc, #540]	; (800ad38 <_dtoa_r+0xbd0>)
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ab22:	f7ff bb3b 	b.w	800a19c <_dtoa_r+0x34>
 800ab26:	693a      	ldr	r2, [r7, #16]
 800ab28:	3202      	adds	r2, #2
 800ab2a:	0092      	lsls	r2, r2, #2
 800ab2c:	f107 010c 	add.w	r1, r7, #12
 800ab30:	300c      	adds	r0, #12
 800ab32:	f7fd fcf7 	bl	8008524 <memcpy>
 800ab36:	2201      	movs	r2, #1
 800ab38:	4629      	mov	r1, r5
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f000 feec 	bl	800b918 <__lshift>
 800ab40:	9b01      	ldr	r3, [sp, #4]
 800ab42:	f103 0901 	add.w	r9, r3, #1
 800ab46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	9305      	str	r3, [sp, #20]
 800ab4e:	f00a 0301 	and.w	r3, sl, #1
 800ab52:	46b8      	mov	r8, r7
 800ab54:	9304      	str	r3, [sp, #16]
 800ab56:	4607      	mov	r7, r0
 800ab58:	4631      	mov	r1, r6
 800ab5a:	ee18 0a10 	vmov	r0, s16
 800ab5e:	f7ff fa77 	bl	800a050 <quorem>
 800ab62:	4641      	mov	r1, r8
 800ab64:	9002      	str	r0, [sp, #8]
 800ab66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ab6a:	ee18 0a10 	vmov	r0, s16
 800ab6e:	f000 ff43 	bl	800b9f8 <__mcmp>
 800ab72:	463a      	mov	r2, r7
 800ab74:	9003      	str	r0, [sp, #12]
 800ab76:	4631      	mov	r1, r6
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f000 ff59 	bl	800ba30 <__mdiff>
 800ab7e:	68c2      	ldr	r2, [r0, #12]
 800ab80:	f109 3bff 	add.w	fp, r9, #4294967295
 800ab84:	4605      	mov	r5, r0
 800ab86:	bb02      	cbnz	r2, 800abca <_dtoa_r+0xa62>
 800ab88:	4601      	mov	r1, r0
 800ab8a:	ee18 0a10 	vmov	r0, s16
 800ab8e:	f000 ff33 	bl	800b9f8 <__mcmp>
 800ab92:	4602      	mov	r2, r0
 800ab94:	4629      	mov	r1, r5
 800ab96:	4620      	mov	r0, r4
 800ab98:	9207      	str	r2, [sp, #28]
 800ab9a:	f000 fca1 	bl	800b4e0 <_Bfree>
 800ab9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800aba2:	ea43 0102 	orr.w	r1, r3, r2
 800aba6:	9b04      	ldr	r3, [sp, #16]
 800aba8:	430b      	orrs	r3, r1
 800abaa:	464d      	mov	r5, r9
 800abac:	d10f      	bne.n	800abce <_dtoa_r+0xa66>
 800abae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800abb2:	d02a      	beq.n	800ac0a <_dtoa_r+0xaa2>
 800abb4:	9b03      	ldr	r3, [sp, #12]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	dd02      	ble.n	800abc0 <_dtoa_r+0xa58>
 800abba:	9b02      	ldr	r3, [sp, #8]
 800abbc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800abc0:	f88b a000 	strb.w	sl, [fp]
 800abc4:	e775      	b.n	800aab2 <_dtoa_r+0x94a>
 800abc6:	4638      	mov	r0, r7
 800abc8:	e7ba      	b.n	800ab40 <_dtoa_r+0x9d8>
 800abca:	2201      	movs	r2, #1
 800abcc:	e7e2      	b.n	800ab94 <_dtoa_r+0xa2c>
 800abce:	9b03      	ldr	r3, [sp, #12]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	db04      	blt.n	800abde <_dtoa_r+0xa76>
 800abd4:	9906      	ldr	r1, [sp, #24]
 800abd6:	430b      	orrs	r3, r1
 800abd8:	9904      	ldr	r1, [sp, #16]
 800abda:	430b      	orrs	r3, r1
 800abdc:	d122      	bne.n	800ac24 <_dtoa_r+0xabc>
 800abde:	2a00      	cmp	r2, #0
 800abe0:	ddee      	ble.n	800abc0 <_dtoa_r+0xa58>
 800abe2:	ee18 1a10 	vmov	r1, s16
 800abe6:	2201      	movs	r2, #1
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 fe95 	bl	800b918 <__lshift>
 800abee:	4631      	mov	r1, r6
 800abf0:	ee08 0a10 	vmov	s16, r0
 800abf4:	f000 ff00 	bl	800b9f8 <__mcmp>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	dc03      	bgt.n	800ac04 <_dtoa_r+0xa9c>
 800abfc:	d1e0      	bne.n	800abc0 <_dtoa_r+0xa58>
 800abfe:	f01a 0f01 	tst.w	sl, #1
 800ac02:	d0dd      	beq.n	800abc0 <_dtoa_r+0xa58>
 800ac04:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac08:	d1d7      	bne.n	800abba <_dtoa_r+0xa52>
 800ac0a:	2339      	movs	r3, #57	; 0x39
 800ac0c:	f88b 3000 	strb.w	r3, [fp]
 800ac10:	462b      	mov	r3, r5
 800ac12:	461d      	mov	r5, r3
 800ac14:	3b01      	subs	r3, #1
 800ac16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac1a:	2a39      	cmp	r2, #57	; 0x39
 800ac1c:	d071      	beq.n	800ad02 <_dtoa_r+0xb9a>
 800ac1e:	3201      	adds	r2, #1
 800ac20:	701a      	strb	r2, [r3, #0]
 800ac22:	e746      	b.n	800aab2 <_dtoa_r+0x94a>
 800ac24:	2a00      	cmp	r2, #0
 800ac26:	dd07      	ble.n	800ac38 <_dtoa_r+0xad0>
 800ac28:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac2c:	d0ed      	beq.n	800ac0a <_dtoa_r+0xaa2>
 800ac2e:	f10a 0301 	add.w	r3, sl, #1
 800ac32:	f88b 3000 	strb.w	r3, [fp]
 800ac36:	e73c      	b.n	800aab2 <_dtoa_r+0x94a>
 800ac38:	9b05      	ldr	r3, [sp, #20]
 800ac3a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ac3e:	4599      	cmp	r9, r3
 800ac40:	d047      	beq.n	800acd2 <_dtoa_r+0xb6a>
 800ac42:	ee18 1a10 	vmov	r1, s16
 800ac46:	2300      	movs	r3, #0
 800ac48:	220a      	movs	r2, #10
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f000 fc6a 	bl	800b524 <__multadd>
 800ac50:	45b8      	cmp	r8, r7
 800ac52:	ee08 0a10 	vmov	s16, r0
 800ac56:	f04f 0300 	mov.w	r3, #0
 800ac5a:	f04f 020a 	mov.w	r2, #10
 800ac5e:	4641      	mov	r1, r8
 800ac60:	4620      	mov	r0, r4
 800ac62:	d106      	bne.n	800ac72 <_dtoa_r+0xb0a>
 800ac64:	f000 fc5e 	bl	800b524 <__multadd>
 800ac68:	4680      	mov	r8, r0
 800ac6a:	4607      	mov	r7, r0
 800ac6c:	f109 0901 	add.w	r9, r9, #1
 800ac70:	e772      	b.n	800ab58 <_dtoa_r+0x9f0>
 800ac72:	f000 fc57 	bl	800b524 <__multadd>
 800ac76:	4639      	mov	r1, r7
 800ac78:	4680      	mov	r8, r0
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	220a      	movs	r2, #10
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f000 fc50 	bl	800b524 <__multadd>
 800ac84:	4607      	mov	r7, r0
 800ac86:	e7f1      	b.n	800ac6c <_dtoa_r+0xb04>
 800ac88:	9b03      	ldr	r3, [sp, #12]
 800ac8a:	9302      	str	r3, [sp, #8]
 800ac8c:	9d01      	ldr	r5, [sp, #4]
 800ac8e:	ee18 0a10 	vmov	r0, s16
 800ac92:	4631      	mov	r1, r6
 800ac94:	f7ff f9dc 	bl	800a050 <quorem>
 800ac98:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac9c:	9b01      	ldr	r3, [sp, #4]
 800ac9e:	f805 ab01 	strb.w	sl, [r5], #1
 800aca2:	1aea      	subs	r2, r5, r3
 800aca4:	9b02      	ldr	r3, [sp, #8]
 800aca6:	4293      	cmp	r3, r2
 800aca8:	dd09      	ble.n	800acbe <_dtoa_r+0xb56>
 800acaa:	ee18 1a10 	vmov	r1, s16
 800acae:	2300      	movs	r3, #0
 800acb0:	220a      	movs	r2, #10
 800acb2:	4620      	mov	r0, r4
 800acb4:	f000 fc36 	bl	800b524 <__multadd>
 800acb8:	ee08 0a10 	vmov	s16, r0
 800acbc:	e7e7      	b.n	800ac8e <_dtoa_r+0xb26>
 800acbe:	9b02      	ldr	r3, [sp, #8]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	bfc8      	it	gt
 800acc4:	461d      	movgt	r5, r3
 800acc6:	9b01      	ldr	r3, [sp, #4]
 800acc8:	bfd8      	it	le
 800acca:	2501      	movle	r5, #1
 800accc:	441d      	add	r5, r3
 800acce:	f04f 0800 	mov.w	r8, #0
 800acd2:	ee18 1a10 	vmov	r1, s16
 800acd6:	2201      	movs	r2, #1
 800acd8:	4620      	mov	r0, r4
 800acda:	f000 fe1d 	bl	800b918 <__lshift>
 800acde:	4631      	mov	r1, r6
 800ace0:	ee08 0a10 	vmov	s16, r0
 800ace4:	f000 fe88 	bl	800b9f8 <__mcmp>
 800ace8:	2800      	cmp	r0, #0
 800acea:	dc91      	bgt.n	800ac10 <_dtoa_r+0xaa8>
 800acec:	d102      	bne.n	800acf4 <_dtoa_r+0xb8c>
 800acee:	f01a 0f01 	tst.w	sl, #1
 800acf2:	d18d      	bne.n	800ac10 <_dtoa_r+0xaa8>
 800acf4:	462b      	mov	r3, r5
 800acf6:	461d      	mov	r5, r3
 800acf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acfc:	2a30      	cmp	r2, #48	; 0x30
 800acfe:	d0fa      	beq.n	800acf6 <_dtoa_r+0xb8e>
 800ad00:	e6d7      	b.n	800aab2 <_dtoa_r+0x94a>
 800ad02:	9a01      	ldr	r2, [sp, #4]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d184      	bne.n	800ac12 <_dtoa_r+0xaaa>
 800ad08:	9b00      	ldr	r3, [sp, #0]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	2331      	movs	r3, #49	; 0x31
 800ad10:	7013      	strb	r3, [r2, #0]
 800ad12:	e6ce      	b.n	800aab2 <_dtoa_r+0x94a>
 800ad14:	4b09      	ldr	r3, [pc, #36]	; (800ad3c <_dtoa_r+0xbd4>)
 800ad16:	f7ff ba95 	b.w	800a244 <_dtoa_r+0xdc>
 800ad1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f47f aa6e 	bne.w	800a1fe <_dtoa_r+0x96>
 800ad22:	4b07      	ldr	r3, [pc, #28]	; (800ad40 <_dtoa_r+0xbd8>)
 800ad24:	f7ff ba8e 	b.w	800a244 <_dtoa_r+0xdc>
 800ad28:	9b02      	ldr	r3, [sp, #8]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	dcae      	bgt.n	800ac8c <_dtoa_r+0xb24>
 800ad2e:	9b06      	ldr	r3, [sp, #24]
 800ad30:	2b02      	cmp	r3, #2
 800ad32:	f73f aea8 	bgt.w	800aa86 <_dtoa_r+0x91e>
 800ad36:	e7a9      	b.n	800ac8c <_dtoa_r+0xb24>
 800ad38:	0800d118 	.word	0x0800d118
 800ad3c:	0800cf1c 	.word	0x0800cf1c
 800ad40:	0800d099 	.word	0x0800d099

0800ad44 <rshift>:
 800ad44:	6903      	ldr	r3, [r0, #16]
 800ad46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ad4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad4e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ad52:	f100 0414 	add.w	r4, r0, #20
 800ad56:	dd45      	ble.n	800ade4 <rshift+0xa0>
 800ad58:	f011 011f 	ands.w	r1, r1, #31
 800ad5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ad60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ad64:	d10c      	bne.n	800ad80 <rshift+0x3c>
 800ad66:	f100 0710 	add.w	r7, r0, #16
 800ad6a:	4629      	mov	r1, r5
 800ad6c:	42b1      	cmp	r1, r6
 800ad6e:	d334      	bcc.n	800adda <rshift+0x96>
 800ad70:	1a9b      	subs	r3, r3, r2
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	1eea      	subs	r2, r5, #3
 800ad76:	4296      	cmp	r6, r2
 800ad78:	bf38      	it	cc
 800ad7a:	2300      	movcc	r3, #0
 800ad7c:	4423      	add	r3, r4
 800ad7e:	e015      	b.n	800adac <rshift+0x68>
 800ad80:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ad84:	f1c1 0820 	rsb	r8, r1, #32
 800ad88:	40cf      	lsrs	r7, r1
 800ad8a:	f105 0e04 	add.w	lr, r5, #4
 800ad8e:	46a1      	mov	r9, r4
 800ad90:	4576      	cmp	r6, lr
 800ad92:	46f4      	mov	ip, lr
 800ad94:	d815      	bhi.n	800adc2 <rshift+0x7e>
 800ad96:	1a9a      	subs	r2, r3, r2
 800ad98:	0092      	lsls	r2, r2, #2
 800ad9a:	3a04      	subs	r2, #4
 800ad9c:	3501      	adds	r5, #1
 800ad9e:	42ae      	cmp	r6, r5
 800ada0:	bf38      	it	cc
 800ada2:	2200      	movcc	r2, #0
 800ada4:	18a3      	adds	r3, r4, r2
 800ada6:	50a7      	str	r7, [r4, r2]
 800ada8:	b107      	cbz	r7, 800adac <rshift+0x68>
 800adaa:	3304      	adds	r3, #4
 800adac:	1b1a      	subs	r2, r3, r4
 800adae:	42a3      	cmp	r3, r4
 800adb0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800adb4:	bf08      	it	eq
 800adb6:	2300      	moveq	r3, #0
 800adb8:	6102      	str	r2, [r0, #16]
 800adba:	bf08      	it	eq
 800adbc:	6143      	streq	r3, [r0, #20]
 800adbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adc2:	f8dc c000 	ldr.w	ip, [ip]
 800adc6:	fa0c fc08 	lsl.w	ip, ip, r8
 800adca:	ea4c 0707 	orr.w	r7, ip, r7
 800adce:	f849 7b04 	str.w	r7, [r9], #4
 800add2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800add6:	40cf      	lsrs	r7, r1
 800add8:	e7da      	b.n	800ad90 <rshift+0x4c>
 800adda:	f851 cb04 	ldr.w	ip, [r1], #4
 800adde:	f847 cf04 	str.w	ip, [r7, #4]!
 800ade2:	e7c3      	b.n	800ad6c <rshift+0x28>
 800ade4:	4623      	mov	r3, r4
 800ade6:	e7e1      	b.n	800adac <rshift+0x68>

0800ade8 <__hexdig_fun>:
 800ade8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800adec:	2b09      	cmp	r3, #9
 800adee:	d802      	bhi.n	800adf6 <__hexdig_fun+0xe>
 800adf0:	3820      	subs	r0, #32
 800adf2:	b2c0      	uxtb	r0, r0
 800adf4:	4770      	bx	lr
 800adf6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800adfa:	2b05      	cmp	r3, #5
 800adfc:	d801      	bhi.n	800ae02 <__hexdig_fun+0x1a>
 800adfe:	3847      	subs	r0, #71	; 0x47
 800ae00:	e7f7      	b.n	800adf2 <__hexdig_fun+0xa>
 800ae02:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ae06:	2b05      	cmp	r3, #5
 800ae08:	d801      	bhi.n	800ae0e <__hexdig_fun+0x26>
 800ae0a:	3827      	subs	r0, #39	; 0x27
 800ae0c:	e7f1      	b.n	800adf2 <__hexdig_fun+0xa>
 800ae0e:	2000      	movs	r0, #0
 800ae10:	4770      	bx	lr
	...

0800ae14 <__gethex>:
 800ae14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae18:	ed2d 8b02 	vpush	{d8}
 800ae1c:	b089      	sub	sp, #36	; 0x24
 800ae1e:	ee08 0a10 	vmov	s16, r0
 800ae22:	9304      	str	r3, [sp, #16]
 800ae24:	4bb4      	ldr	r3, [pc, #720]	; (800b0f8 <__gethex+0x2e4>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	9301      	str	r3, [sp, #4]
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	468b      	mov	fp, r1
 800ae2e:	4690      	mov	r8, r2
 800ae30:	f7f5 f9ce 	bl	80001d0 <strlen>
 800ae34:	9b01      	ldr	r3, [sp, #4]
 800ae36:	f8db 2000 	ldr.w	r2, [fp]
 800ae3a:	4403      	add	r3, r0
 800ae3c:	4682      	mov	sl, r0
 800ae3e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ae42:	9305      	str	r3, [sp, #20]
 800ae44:	1c93      	adds	r3, r2, #2
 800ae46:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ae4a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ae4e:	32fe      	adds	r2, #254	; 0xfe
 800ae50:	18d1      	adds	r1, r2, r3
 800ae52:	461f      	mov	r7, r3
 800ae54:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ae58:	9100      	str	r1, [sp, #0]
 800ae5a:	2830      	cmp	r0, #48	; 0x30
 800ae5c:	d0f8      	beq.n	800ae50 <__gethex+0x3c>
 800ae5e:	f7ff ffc3 	bl	800ade8 <__hexdig_fun>
 800ae62:	4604      	mov	r4, r0
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d13a      	bne.n	800aede <__gethex+0xca>
 800ae68:	9901      	ldr	r1, [sp, #4]
 800ae6a:	4652      	mov	r2, sl
 800ae6c:	4638      	mov	r0, r7
 800ae6e:	f001 fa23 	bl	800c2b8 <strncmp>
 800ae72:	4605      	mov	r5, r0
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d168      	bne.n	800af4a <__gethex+0x136>
 800ae78:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ae7c:	eb07 060a 	add.w	r6, r7, sl
 800ae80:	f7ff ffb2 	bl	800ade8 <__hexdig_fun>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d062      	beq.n	800af4e <__gethex+0x13a>
 800ae88:	4633      	mov	r3, r6
 800ae8a:	7818      	ldrb	r0, [r3, #0]
 800ae8c:	2830      	cmp	r0, #48	; 0x30
 800ae8e:	461f      	mov	r7, r3
 800ae90:	f103 0301 	add.w	r3, r3, #1
 800ae94:	d0f9      	beq.n	800ae8a <__gethex+0x76>
 800ae96:	f7ff ffa7 	bl	800ade8 <__hexdig_fun>
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	fab0 f480 	clz	r4, r0
 800aea0:	0964      	lsrs	r4, r4, #5
 800aea2:	4635      	mov	r5, r6
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	463a      	mov	r2, r7
 800aea8:	4616      	mov	r6, r2
 800aeaa:	3201      	adds	r2, #1
 800aeac:	7830      	ldrb	r0, [r6, #0]
 800aeae:	f7ff ff9b 	bl	800ade8 <__hexdig_fun>
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	d1f8      	bne.n	800aea8 <__gethex+0x94>
 800aeb6:	9901      	ldr	r1, [sp, #4]
 800aeb8:	4652      	mov	r2, sl
 800aeba:	4630      	mov	r0, r6
 800aebc:	f001 f9fc 	bl	800c2b8 <strncmp>
 800aec0:	b980      	cbnz	r0, 800aee4 <__gethex+0xd0>
 800aec2:	b94d      	cbnz	r5, 800aed8 <__gethex+0xc4>
 800aec4:	eb06 050a 	add.w	r5, r6, sl
 800aec8:	462a      	mov	r2, r5
 800aeca:	4616      	mov	r6, r2
 800aecc:	3201      	adds	r2, #1
 800aece:	7830      	ldrb	r0, [r6, #0]
 800aed0:	f7ff ff8a 	bl	800ade8 <__hexdig_fun>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	d1f8      	bne.n	800aeca <__gethex+0xb6>
 800aed8:	1bad      	subs	r5, r5, r6
 800aeda:	00ad      	lsls	r5, r5, #2
 800aedc:	e004      	b.n	800aee8 <__gethex+0xd4>
 800aede:	2400      	movs	r4, #0
 800aee0:	4625      	mov	r5, r4
 800aee2:	e7e0      	b.n	800aea6 <__gethex+0x92>
 800aee4:	2d00      	cmp	r5, #0
 800aee6:	d1f7      	bne.n	800aed8 <__gethex+0xc4>
 800aee8:	7833      	ldrb	r3, [r6, #0]
 800aeea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aeee:	2b50      	cmp	r3, #80	; 0x50
 800aef0:	d13b      	bne.n	800af6a <__gethex+0x156>
 800aef2:	7873      	ldrb	r3, [r6, #1]
 800aef4:	2b2b      	cmp	r3, #43	; 0x2b
 800aef6:	d02c      	beq.n	800af52 <__gethex+0x13e>
 800aef8:	2b2d      	cmp	r3, #45	; 0x2d
 800aefa:	d02e      	beq.n	800af5a <__gethex+0x146>
 800aefc:	1c71      	adds	r1, r6, #1
 800aefe:	f04f 0900 	mov.w	r9, #0
 800af02:	7808      	ldrb	r0, [r1, #0]
 800af04:	f7ff ff70 	bl	800ade8 <__hexdig_fun>
 800af08:	1e43      	subs	r3, r0, #1
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	2b18      	cmp	r3, #24
 800af0e:	d82c      	bhi.n	800af6a <__gethex+0x156>
 800af10:	f1a0 0210 	sub.w	r2, r0, #16
 800af14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800af18:	f7ff ff66 	bl	800ade8 <__hexdig_fun>
 800af1c:	1e43      	subs	r3, r0, #1
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	2b18      	cmp	r3, #24
 800af22:	d91d      	bls.n	800af60 <__gethex+0x14c>
 800af24:	f1b9 0f00 	cmp.w	r9, #0
 800af28:	d000      	beq.n	800af2c <__gethex+0x118>
 800af2a:	4252      	negs	r2, r2
 800af2c:	4415      	add	r5, r2
 800af2e:	f8cb 1000 	str.w	r1, [fp]
 800af32:	b1e4      	cbz	r4, 800af6e <__gethex+0x15a>
 800af34:	9b00      	ldr	r3, [sp, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	bf14      	ite	ne
 800af3a:	2700      	movne	r7, #0
 800af3c:	2706      	moveq	r7, #6
 800af3e:	4638      	mov	r0, r7
 800af40:	b009      	add	sp, #36	; 0x24
 800af42:	ecbd 8b02 	vpop	{d8}
 800af46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af4a:	463e      	mov	r6, r7
 800af4c:	4625      	mov	r5, r4
 800af4e:	2401      	movs	r4, #1
 800af50:	e7ca      	b.n	800aee8 <__gethex+0xd4>
 800af52:	f04f 0900 	mov.w	r9, #0
 800af56:	1cb1      	adds	r1, r6, #2
 800af58:	e7d3      	b.n	800af02 <__gethex+0xee>
 800af5a:	f04f 0901 	mov.w	r9, #1
 800af5e:	e7fa      	b.n	800af56 <__gethex+0x142>
 800af60:	230a      	movs	r3, #10
 800af62:	fb03 0202 	mla	r2, r3, r2, r0
 800af66:	3a10      	subs	r2, #16
 800af68:	e7d4      	b.n	800af14 <__gethex+0x100>
 800af6a:	4631      	mov	r1, r6
 800af6c:	e7df      	b.n	800af2e <__gethex+0x11a>
 800af6e:	1bf3      	subs	r3, r6, r7
 800af70:	3b01      	subs	r3, #1
 800af72:	4621      	mov	r1, r4
 800af74:	2b07      	cmp	r3, #7
 800af76:	dc0b      	bgt.n	800af90 <__gethex+0x17c>
 800af78:	ee18 0a10 	vmov	r0, s16
 800af7c:	f000 fa70 	bl	800b460 <_Balloc>
 800af80:	4604      	mov	r4, r0
 800af82:	b940      	cbnz	r0, 800af96 <__gethex+0x182>
 800af84:	4b5d      	ldr	r3, [pc, #372]	; (800b0fc <__gethex+0x2e8>)
 800af86:	4602      	mov	r2, r0
 800af88:	21de      	movs	r1, #222	; 0xde
 800af8a:	485d      	ldr	r0, [pc, #372]	; (800b100 <__gethex+0x2ec>)
 800af8c:	f001 f9b6 	bl	800c2fc <__assert_func>
 800af90:	3101      	adds	r1, #1
 800af92:	105b      	asrs	r3, r3, #1
 800af94:	e7ee      	b.n	800af74 <__gethex+0x160>
 800af96:	f100 0914 	add.w	r9, r0, #20
 800af9a:	f04f 0b00 	mov.w	fp, #0
 800af9e:	f1ca 0301 	rsb	r3, sl, #1
 800afa2:	f8cd 9008 	str.w	r9, [sp, #8]
 800afa6:	f8cd b000 	str.w	fp, [sp]
 800afaa:	9306      	str	r3, [sp, #24]
 800afac:	42b7      	cmp	r7, r6
 800afae:	d340      	bcc.n	800b032 <__gethex+0x21e>
 800afb0:	9802      	ldr	r0, [sp, #8]
 800afb2:	9b00      	ldr	r3, [sp, #0]
 800afb4:	f840 3b04 	str.w	r3, [r0], #4
 800afb8:	eba0 0009 	sub.w	r0, r0, r9
 800afbc:	1080      	asrs	r0, r0, #2
 800afbe:	0146      	lsls	r6, r0, #5
 800afc0:	6120      	str	r0, [r4, #16]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f000 fb3e 	bl	800b644 <__hi0bits>
 800afc8:	1a30      	subs	r0, r6, r0
 800afca:	f8d8 6000 	ldr.w	r6, [r8]
 800afce:	42b0      	cmp	r0, r6
 800afd0:	dd63      	ble.n	800b09a <__gethex+0x286>
 800afd2:	1b87      	subs	r7, r0, r6
 800afd4:	4639      	mov	r1, r7
 800afd6:	4620      	mov	r0, r4
 800afd8:	f000 fee2 	bl	800bda0 <__any_on>
 800afdc:	4682      	mov	sl, r0
 800afde:	b1a8      	cbz	r0, 800b00c <__gethex+0x1f8>
 800afe0:	1e7b      	subs	r3, r7, #1
 800afe2:	1159      	asrs	r1, r3, #5
 800afe4:	f003 021f 	and.w	r2, r3, #31
 800afe8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800afec:	f04f 0a01 	mov.w	sl, #1
 800aff0:	fa0a f202 	lsl.w	r2, sl, r2
 800aff4:	420a      	tst	r2, r1
 800aff6:	d009      	beq.n	800b00c <__gethex+0x1f8>
 800aff8:	4553      	cmp	r3, sl
 800affa:	dd05      	ble.n	800b008 <__gethex+0x1f4>
 800affc:	1eb9      	subs	r1, r7, #2
 800affe:	4620      	mov	r0, r4
 800b000:	f000 fece 	bl	800bda0 <__any_on>
 800b004:	2800      	cmp	r0, #0
 800b006:	d145      	bne.n	800b094 <__gethex+0x280>
 800b008:	f04f 0a02 	mov.w	sl, #2
 800b00c:	4639      	mov	r1, r7
 800b00e:	4620      	mov	r0, r4
 800b010:	f7ff fe98 	bl	800ad44 <rshift>
 800b014:	443d      	add	r5, r7
 800b016:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b01a:	42ab      	cmp	r3, r5
 800b01c:	da4c      	bge.n	800b0b8 <__gethex+0x2a4>
 800b01e:	ee18 0a10 	vmov	r0, s16
 800b022:	4621      	mov	r1, r4
 800b024:	f000 fa5c 	bl	800b4e0 <_Bfree>
 800b028:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b02a:	2300      	movs	r3, #0
 800b02c:	6013      	str	r3, [r2, #0]
 800b02e:	27a3      	movs	r7, #163	; 0xa3
 800b030:	e785      	b.n	800af3e <__gethex+0x12a>
 800b032:	1e73      	subs	r3, r6, #1
 800b034:	9a05      	ldr	r2, [sp, #20]
 800b036:	9303      	str	r3, [sp, #12]
 800b038:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d019      	beq.n	800b074 <__gethex+0x260>
 800b040:	f1bb 0f20 	cmp.w	fp, #32
 800b044:	d107      	bne.n	800b056 <__gethex+0x242>
 800b046:	9b02      	ldr	r3, [sp, #8]
 800b048:	9a00      	ldr	r2, [sp, #0]
 800b04a:	f843 2b04 	str.w	r2, [r3], #4
 800b04e:	9302      	str	r3, [sp, #8]
 800b050:	2300      	movs	r3, #0
 800b052:	9300      	str	r3, [sp, #0]
 800b054:	469b      	mov	fp, r3
 800b056:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b05a:	f7ff fec5 	bl	800ade8 <__hexdig_fun>
 800b05e:	9b00      	ldr	r3, [sp, #0]
 800b060:	f000 000f 	and.w	r0, r0, #15
 800b064:	fa00 f00b 	lsl.w	r0, r0, fp
 800b068:	4303      	orrs	r3, r0
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	f10b 0b04 	add.w	fp, fp, #4
 800b070:	9b03      	ldr	r3, [sp, #12]
 800b072:	e00d      	b.n	800b090 <__gethex+0x27c>
 800b074:	9b03      	ldr	r3, [sp, #12]
 800b076:	9a06      	ldr	r2, [sp, #24]
 800b078:	4413      	add	r3, r2
 800b07a:	42bb      	cmp	r3, r7
 800b07c:	d3e0      	bcc.n	800b040 <__gethex+0x22c>
 800b07e:	4618      	mov	r0, r3
 800b080:	9901      	ldr	r1, [sp, #4]
 800b082:	9307      	str	r3, [sp, #28]
 800b084:	4652      	mov	r2, sl
 800b086:	f001 f917 	bl	800c2b8 <strncmp>
 800b08a:	9b07      	ldr	r3, [sp, #28]
 800b08c:	2800      	cmp	r0, #0
 800b08e:	d1d7      	bne.n	800b040 <__gethex+0x22c>
 800b090:	461e      	mov	r6, r3
 800b092:	e78b      	b.n	800afac <__gethex+0x198>
 800b094:	f04f 0a03 	mov.w	sl, #3
 800b098:	e7b8      	b.n	800b00c <__gethex+0x1f8>
 800b09a:	da0a      	bge.n	800b0b2 <__gethex+0x29e>
 800b09c:	1a37      	subs	r7, r6, r0
 800b09e:	4621      	mov	r1, r4
 800b0a0:	ee18 0a10 	vmov	r0, s16
 800b0a4:	463a      	mov	r2, r7
 800b0a6:	f000 fc37 	bl	800b918 <__lshift>
 800b0aa:	1bed      	subs	r5, r5, r7
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	f100 0914 	add.w	r9, r0, #20
 800b0b2:	f04f 0a00 	mov.w	sl, #0
 800b0b6:	e7ae      	b.n	800b016 <__gethex+0x202>
 800b0b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b0bc:	42a8      	cmp	r0, r5
 800b0be:	dd72      	ble.n	800b1a6 <__gethex+0x392>
 800b0c0:	1b45      	subs	r5, r0, r5
 800b0c2:	42ae      	cmp	r6, r5
 800b0c4:	dc36      	bgt.n	800b134 <__gethex+0x320>
 800b0c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	d02a      	beq.n	800b124 <__gethex+0x310>
 800b0ce:	2b03      	cmp	r3, #3
 800b0d0:	d02c      	beq.n	800b12c <__gethex+0x318>
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d11c      	bne.n	800b110 <__gethex+0x2fc>
 800b0d6:	42ae      	cmp	r6, r5
 800b0d8:	d11a      	bne.n	800b110 <__gethex+0x2fc>
 800b0da:	2e01      	cmp	r6, #1
 800b0dc:	d112      	bne.n	800b104 <__gethex+0x2f0>
 800b0de:	9a04      	ldr	r2, [sp, #16]
 800b0e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b0e4:	6013      	str	r3, [r2, #0]
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	6123      	str	r3, [r4, #16]
 800b0ea:	f8c9 3000 	str.w	r3, [r9]
 800b0ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0f0:	2762      	movs	r7, #98	; 0x62
 800b0f2:	601c      	str	r4, [r3, #0]
 800b0f4:	e723      	b.n	800af3e <__gethex+0x12a>
 800b0f6:	bf00      	nop
 800b0f8:	0800d190 	.word	0x0800d190
 800b0fc:	0800d118 	.word	0x0800d118
 800b100:	0800d129 	.word	0x0800d129
 800b104:	1e71      	subs	r1, r6, #1
 800b106:	4620      	mov	r0, r4
 800b108:	f000 fe4a 	bl	800bda0 <__any_on>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	d1e6      	bne.n	800b0de <__gethex+0x2ca>
 800b110:	ee18 0a10 	vmov	r0, s16
 800b114:	4621      	mov	r1, r4
 800b116:	f000 f9e3 	bl	800b4e0 <_Bfree>
 800b11a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b11c:	2300      	movs	r3, #0
 800b11e:	6013      	str	r3, [r2, #0]
 800b120:	2750      	movs	r7, #80	; 0x50
 800b122:	e70c      	b.n	800af3e <__gethex+0x12a>
 800b124:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1f2      	bne.n	800b110 <__gethex+0x2fc>
 800b12a:	e7d8      	b.n	800b0de <__gethex+0x2ca>
 800b12c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1d5      	bne.n	800b0de <__gethex+0x2ca>
 800b132:	e7ed      	b.n	800b110 <__gethex+0x2fc>
 800b134:	1e6f      	subs	r7, r5, #1
 800b136:	f1ba 0f00 	cmp.w	sl, #0
 800b13a:	d131      	bne.n	800b1a0 <__gethex+0x38c>
 800b13c:	b127      	cbz	r7, 800b148 <__gethex+0x334>
 800b13e:	4639      	mov	r1, r7
 800b140:	4620      	mov	r0, r4
 800b142:	f000 fe2d 	bl	800bda0 <__any_on>
 800b146:	4682      	mov	sl, r0
 800b148:	117b      	asrs	r3, r7, #5
 800b14a:	2101      	movs	r1, #1
 800b14c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b150:	f007 071f 	and.w	r7, r7, #31
 800b154:	fa01 f707 	lsl.w	r7, r1, r7
 800b158:	421f      	tst	r7, r3
 800b15a:	4629      	mov	r1, r5
 800b15c:	4620      	mov	r0, r4
 800b15e:	bf18      	it	ne
 800b160:	f04a 0a02 	orrne.w	sl, sl, #2
 800b164:	1b76      	subs	r6, r6, r5
 800b166:	f7ff fded 	bl	800ad44 <rshift>
 800b16a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b16e:	2702      	movs	r7, #2
 800b170:	f1ba 0f00 	cmp.w	sl, #0
 800b174:	d048      	beq.n	800b208 <__gethex+0x3f4>
 800b176:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	d015      	beq.n	800b1aa <__gethex+0x396>
 800b17e:	2b03      	cmp	r3, #3
 800b180:	d017      	beq.n	800b1b2 <__gethex+0x39e>
 800b182:	2b01      	cmp	r3, #1
 800b184:	d109      	bne.n	800b19a <__gethex+0x386>
 800b186:	f01a 0f02 	tst.w	sl, #2
 800b18a:	d006      	beq.n	800b19a <__gethex+0x386>
 800b18c:	f8d9 0000 	ldr.w	r0, [r9]
 800b190:	ea4a 0a00 	orr.w	sl, sl, r0
 800b194:	f01a 0f01 	tst.w	sl, #1
 800b198:	d10e      	bne.n	800b1b8 <__gethex+0x3a4>
 800b19a:	f047 0710 	orr.w	r7, r7, #16
 800b19e:	e033      	b.n	800b208 <__gethex+0x3f4>
 800b1a0:	f04f 0a01 	mov.w	sl, #1
 800b1a4:	e7d0      	b.n	800b148 <__gethex+0x334>
 800b1a6:	2701      	movs	r7, #1
 800b1a8:	e7e2      	b.n	800b170 <__gethex+0x35c>
 800b1aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1ac:	f1c3 0301 	rsb	r3, r3, #1
 800b1b0:	9315      	str	r3, [sp, #84]	; 0x54
 800b1b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d0f0      	beq.n	800b19a <__gethex+0x386>
 800b1b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b1bc:	f104 0314 	add.w	r3, r4, #20
 800b1c0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b1c4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b1c8:	f04f 0c00 	mov.w	ip, #0
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b1d6:	d01c      	beq.n	800b212 <__gethex+0x3fe>
 800b1d8:	3201      	adds	r2, #1
 800b1da:	6002      	str	r2, [r0, #0]
 800b1dc:	2f02      	cmp	r7, #2
 800b1de:	f104 0314 	add.w	r3, r4, #20
 800b1e2:	d13f      	bne.n	800b264 <__gethex+0x450>
 800b1e4:	f8d8 2000 	ldr.w	r2, [r8]
 800b1e8:	3a01      	subs	r2, #1
 800b1ea:	42b2      	cmp	r2, r6
 800b1ec:	d10a      	bne.n	800b204 <__gethex+0x3f0>
 800b1ee:	1171      	asrs	r1, r6, #5
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b1f6:	f006 061f 	and.w	r6, r6, #31
 800b1fa:	fa02 f606 	lsl.w	r6, r2, r6
 800b1fe:	421e      	tst	r6, r3
 800b200:	bf18      	it	ne
 800b202:	4617      	movne	r7, r2
 800b204:	f047 0720 	orr.w	r7, r7, #32
 800b208:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b20a:	601c      	str	r4, [r3, #0]
 800b20c:	9b04      	ldr	r3, [sp, #16]
 800b20e:	601d      	str	r5, [r3, #0]
 800b210:	e695      	b.n	800af3e <__gethex+0x12a>
 800b212:	4299      	cmp	r1, r3
 800b214:	f843 cc04 	str.w	ip, [r3, #-4]
 800b218:	d8d8      	bhi.n	800b1cc <__gethex+0x3b8>
 800b21a:	68a3      	ldr	r3, [r4, #8]
 800b21c:	459b      	cmp	fp, r3
 800b21e:	db19      	blt.n	800b254 <__gethex+0x440>
 800b220:	6861      	ldr	r1, [r4, #4]
 800b222:	ee18 0a10 	vmov	r0, s16
 800b226:	3101      	adds	r1, #1
 800b228:	f000 f91a 	bl	800b460 <_Balloc>
 800b22c:	4681      	mov	r9, r0
 800b22e:	b918      	cbnz	r0, 800b238 <__gethex+0x424>
 800b230:	4b1a      	ldr	r3, [pc, #104]	; (800b29c <__gethex+0x488>)
 800b232:	4602      	mov	r2, r0
 800b234:	2184      	movs	r1, #132	; 0x84
 800b236:	e6a8      	b.n	800af8a <__gethex+0x176>
 800b238:	6922      	ldr	r2, [r4, #16]
 800b23a:	3202      	adds	r2, #2
 800b23c:	f104 010c 	add.w	r1, r4, #12
 800b240:	0092      	lsls	r2, r2, #2
 800b242:	300c      	adds	r0, #12
 800b244:	f7fd f96e 	bl	8008524 <memcpy>
 800b248:	4621      	mov	r1, r4
 800b24a:	ee18 0a10 	vmov	r0, s16
 800b24e:	f000 f947 	bl	800b4e0 <_Bfree>
 800b252:	464c      	mov	r4, r9
 800b254:	6923      	ldr	r3, [r4, #16]
 800b256:	1c5a      	adds	r2, r3, #1
 800b258:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b25c:	6122      	str	r2, [r4, #16]
 800b25e:	2201      	movs	r2, #1
 800b260:	615a      	str	r2, [r3, #20]
 800b262:	e7bb      	b.n	800b1dc <__gethex+0x3c8>
 800b264:	6922      	ldr	r2, [r4, #16]
 800b266:	455a      	cmp	r2, fp
 800b268:	dd0b      	ble.n	800b282 <__gethex+0x46e>
 800b26a:	2101      	movs	r1, #1
 800b26c:	4620      	mov	r0, r4
 800b26e:	f7ff fd69 	bl	800ad44 <rshift>
 800b272:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b276:	3501      	adds	r5, #1
 800b278:	42ab      	cmp	r3, r5
 800b27a:	f6ff aed0 	blt.w	800b01e <__gethex+0x20a>
 800b27e:	2701      	movs	r7, #1
 800b280:	e7c0      	b.n	800b204 <__gethex+0x3f0>
 800b282:	f016 061f 	ands.w	r6, r6, #31
 800b286:	d0fa      	beq.n	800b27e <__gethex+0x46a>
 800b288:	4453      	add	r3, sl
 800b28a:	f1c6 0620 	rsb	r6, r6, #32
 800b28e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b292:	f000 f9d7 	bl	800b644 <__hi0bits>
 800b296:	42b0      	cmp	r0, r6
 800b298:	dbe7      	blt.n	800b26a <__gethex+0x456>
 800b29a:	e7f0      	b.n	800b27e <__gethex+0x46a>
 800b29c:	0800d118 	.word	0x0800d118

0800b2a0 <L_shift>:
 800b2a0:	f1c2 0208 	rsb	r2, r2, #8
 800b2a4:	0092      	lsls	r2, r2, #2
 800b2a6:	b570      	push	{r4, r5, r6, lr}
 800b2a8:	f1c2 0620 	rsb	r6, r2, #32
 800b2ac:	6843      	ldr	r3, [r0, #4]
 800b2ae:	6804      	ldr	r4, [r0, #0]
 800b2b0:	fa03 f506 	lsl.w	r5, r3, r6
 800b2b4:	432c      	orrs	r4, r5
 800b2b6:	40d3      	lsrs	r3, r2
 800b2b8:	6004      	str	r4, [r0, #0]
 800b2ba:	f840 3f04 	str.w	r3, [r0, #4]!
 800b2be:	4288      	cmp	r0, r1
 800b2c0:	d3f4      	bcc.n	800b2ac <L_shift+0xc>
 800b2c2:	bd70      	pop	{r4, r5, r6, pc}

0800b2c4 <__match>:
 800b2c4:	b530      	push	{r4, r5, lr}
 800b2c6:	6803      	ldr	r3, [r0, #0]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2ce:	b914      	cbnz	r4, 800b2d6 <__match+0x12>
 800b2d0:	6003      	str	r3, [r0, #0]
 800b2d2:	2001      	movs	r0, #1
 800b2d4:	bd30      	pop	{r4, r5, pc}
 800b2d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b2de:	2d19      	cmp	r5, #25
 800b2e0:	bf98      	it	ls
 800b2e2:	3220      	addls	r2, #32
 800b2e4:	42a2      	cmp	r2, r4
 800b2e6:	d0f0      	beq.n	800b2ca <__match+0x6>
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	e7f3      	b.n	800b2d4 <__match+0x10>

0800b2ec <__hexnan>:
 800b2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f0:	680b      	ldr	r3, [r1, #0]
 800b2f2:	115e      	asrs	r6, r3, #5
 800b2f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b2f8:	f013 031f 	ands.w	r3, r3, #31
 800b2fc:	b087      	sub	sp, #28
 800b2fe:	bf18      	it	ne
 800b300:	3604      	addne	r6, #4
 800b302:	2500      	movs	r5, #0
 800b304:	1f37      	subs	r7, r6, #4
 800b306:	4690      	mov	r8, r2
 800b308:	6802      	ldr	r2, [r0, #0]
 800b30a:	9301      	str	r3, [sp, #4]
 800b30c:	4682      	mov	sl, r0
 800b30e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b312:	46b9      	mov	r9, r7
 800b314:	463c      	mov	r4, r7
 800b316:	9502      	str	r5, [sp, #8]
 800b318:	46ab      	mov	fp, r5
 800b31a:	7851      	ldrb	r1, [r2, #1]
 800b31c:	1c53      	adds	r3, r2, #1
 800b31e:	9303      	str	r3, [sp, #12]
 800b320:	b341      	cbz	r1, 800b374 <__hexnan+0x88>
 800b322:	4608      	mov	r0, r1
 800b324:	9205      	str	r2, [sp, #20]
 800b326:	9104      	str	r1, [sp, #16]
 800b328:	f7ff fd5e 	bl	800ade8 <__hexdig_fun>
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d14f      	bne.n	800b3d0 <__hexnan+0xe4>
 800b330:	9904      	ldr	r1, [sp, #16]
 800b332:	9a05      	ldr	r2, [sp, #20]
 800b334:	2920      	cmp	r1, #32
 800b336:	d818      	bhi.n	800b36a <__hexnan+0x7e>
 800b338:	9b02      	ldr	r3, [sp, #8]
 800b33a:	459b      	cmp	fp, r3
 800b33c:	dd13      	ble.n	800b366 <__hexnan+0x7a>
 800b33e:	454c      	cmp	r4, r9
 800b340:	d206      	bcs.n	800b350 <__hexnan+0x64>
 800b342:	2d07      	cmp	r5, #7
 800b344:	dc04      	bgt.n	800b350 <__hexnan+0x64>
 800b346:	462a      	mov	r2, r5
 800b348:	4649      	mov	r1, r9
 800b34a:	4620      	mov	r0, r4
 800b34c:	f7ff ffa8 	bl	800b2a0 <L_shift>
 800b350:	4544      	cmp	r4, r8
 800b352:	d950      	bls.n	800b3f6 <__hexnan+0x10a>
 800b354:	2300      	movs	r3, #0
 800b356:	f1a4 0904 	sub.w	r9, r4, #4
 800b35a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b35e:	f8cd b008 	str.w	fp, [sp, #8]
 800b362:	464c      	mov	r4, r9
 800b364:	461d      	mov	r5, r3
 800b366:	9a03      	ldr	r2, [sp, #12]
 800b368:	e7d7      	b.n	800b31a <__hexnan+0x2e>
 800b36a:	2929      	cmp	r1, #41	; 0x29
 800b36c:	d156      	bne.n	800b41c <__hexnan+0x130>
 800b36e:	3202      	adds	r2, #2
 800b370:	f8ca 2000 	str.w	r2, [sl]
 800b374:	f1bb 0f00 	cmp.w	fp, #0
 800b378:	d050      	beq.n	800b41c <__hexnan+0x130>
 800b37a:	454c      	cmp	r4, r9
 800b37c:	d206      	bcs.n	800b38c <__hexnan+0xa0>
 800b37e:	2d07      	cmp	r5, #7
 800b380:	dc04      	bgt.n	800b38c <__hexnan+0xa0>
 800b382:	462a      	mov	r2, r5
 800b384:	4649      	mov	r1, r9
 800b386:	4620      	mov	r0, r4
 800b388:	f7ff ff8a 	bl	800b2a0 <L_shift>
 800b38c:	4544      	cmp	r4, r8
 800b38e:	d934      	bls.n	800b3fa <__hexnan+0x10e>
 800b390:	f1a8 0204 	sub.w	r2, r8, #4
 800b394:	4623      	mov	r3, r4
 800b396:	f853 1b04 	ldr.w	r1, [r3], #4
 800b39a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b39e:	429f      	cmp	r7, r3
 800b3a0:	d2f9      	bcs.n	800b396 <__hexnan+0xaa>
 800b3a2:	1b3b      	subs	r3, r7, r4
 800b3a4:	f023 0303 	bic.w	r3, r3, #3
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	3401      	adds	r4, #1
 800b3ac:	3e03      	subs	r6, #3
 800b3ae:	42b4      	cmp	r4, r6
 800b3b0:	bf88      	it	hi
 800b3b2:	2304      	movhi	r3, #4
 800b3b4:	4443      	add	r3, r8
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f843 2b04 	str.w	r2, [r3], #4
 800b3bc:	429f      	cmp	r7, r3
 800b3be:	d2fb      	bcs.n	800b3b8 <__hexnan+0xcc>
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	b91b      	cbnz	r3, 800b3cc <__hexnan+0xe0>
 800b3c4:	4547      	cmp	r7, r8
 800b3c6:	d127      	bne.n	800b418 <__hexnan+0x12c>
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	603b      	str	r3, [r7, #0]
 800b3cc:	2005      	movs	r0, #5
 800b3ce:	e026      	b.n	800b41e <__hexnan+0x132>
 800b3d0:	3501      	adds	r5, #1
 800b3d2:	2d08      	cmp	r5, #8
 800b3d4:	f10b 0b01 	add.w	fp, fp, #1
 800b3d8:	dd06      	ble.n	800b3e8 <__hexnan+0xfc>
 800b3da:	4544      	cmp	r4, r8
 800b3dc:	d9c3      	bls.n	800b366 <__hexnan+0x7a>
 800b3de:	2300      	movs	r3, #0
 800b3e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3e4:	2501      	movs	r5, #1
 800b3e6:	3c04      	subs	r4, #4
 800b3e8:	6822      	ldr	r2, [r4, #0]
 800b3ea:	f000 000f 	and.w	r0, r0, #15
 800b3ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b3f2:	6022      	str	r2, [r4, #0]
 800b3f4:	e7b7      	b.n	800b366 <__hexnan+0x7a>
 800b3f6:	2508      	movs	r5, #8
 800b3f8:	e7b5      	b.n	800b366 <__hexnan+0x7a>
 800b3fa:	9b01      	ldr	r3, [sp, #4]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d0df      	beq.n	800b3c0 <__hexnan+0xd4>
 800b400:	f04f 32ff 	mov.w	r2, #4294967295
 800b404:	f1c3 0320 	rsb	r3, r3, #32
 800b408:	fa22 f303 	lsr.w	r3, r2, r3
 800b40c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b410:	401a      	ands	r2, r3
 800b412:	f846 2c04 	str.w	r2, [r6, #-4]
 800b416:	e7d3      	b.n	800b3c0 <__hexnan+0xd4>
 800b418:	3f04      	subs	r7, #4
 800b41a:	e7d1      	b.n	800b3c0 <__hexnan+0xd4>
 800b41c:	2004      	movs	r0, #4
 800b41e:	b007      	add	sp, #28
 800b420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b424 <_localeconv_r>:
 800b424:	4800      	ldr	r0, [pc, #0]	; (800b428 <_localeconv_r+0x4>)
 800b426:	4770      	bx	lr
 800b428:	20000254 	.word	0x20000254

0800b42c <malloc>:
 800b42c:	4b02      	ldr	r3, [pc, #8]	; (800b438 <malloc+0xc>)
 800b42e:	4601      	mov	r1, r0
 800b430:	6818      	ldr	r0, [r3, #0]
 800b432:	f000 bd59 	b.w	800bee8 <_malloc_r>
 800b436:	bf00      	nop
 800b438:	200000fc 	.word	0x200000fc

0800b43c <__ascii_mbtowc>:
 800b43c:	b082      	sub	sp, #8
 800b43e:	b901      	cbnz	r1, 800b442 <__ascii_mbtowc+0x6>
 800b440:	a901      	add	r1, sp, #4
 800b442:	b142      	cbz	r2, 800b456 <__ascii_mbtowc+0x1a>
 800b444:	b14b      	cbz	r3, 800b45a <__ascii_mbtowc+0x1e>
 800b446:	7813      	ldrb	r3, [r2, #0]
 800b448:	600b      	str	r3, [r1, #0]
 800b44a:	7812      	ldrb	r2, [r2, #0]
 800b44c:	1e10      	subs	r0, r2, #0
 800b44e:	bf18      	it	ne
 800b450:	2001      	movne	r0, #1
 800b452:	b002      	add	sp, #8
 800b454:	4770      	bx	lr
 800b456:	4610      	mov	r0, r2
 800b458:	e7fb      	b.n	800b452 <__ascii_mbtowc+0x16>
 800b45a:	f06f 0001 	mvn.w	r0, #1
 800b45e:	e7f8      	b.n	800b452 <__ascii_mbtowc+0x16>

0800b460 <_Balloc>:
 800b460:	b570      	push	{r4, r5, r6, lr}
 800b462:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b464:	4604      	mov	r4, r0
 800b466:	460d      	mov	r5, r1
 800b468:	b976      	cbnz	r6, 800b488 <_Balloc+0x28>
 800b46a:	2010      	movs	r0, #16
 800b46c:	f7ff ffde 	bl	800b42c <malloc>
 800b470:	4602      	mov	r2, r0
 800b472:	6260      	str	r0, [r4, #36]	; 0x24
 800b474:	b920      	cbnz	r0, 800b480 <_Balloc+0x20>
 800b476:	4b18      	ldr	r3, [pc, #96]	; (800b4d8 <_Balloc+0x78>)
 800b478:	4818      	ldr	r0, [pc, #96]	; (800b4dc <_Balloc+0x7c>)
 800b47a:	2166      	movs	r1, #102	; 0x66
 800b47c:	f000 ff3e 	bl	800c2fc <__assert_func>
 800b480:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b484:	6006      	str	r6, [r0, #0]
 800b486:	60c6      	str	r6, [r0, #12]
 800b488:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b48a:	68f3      	ldr	r3, [r6, #12]
 800b48c:	b183      	cbz	r3, 800b4b0 <_Balloc+0x50>
 800b48e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b496:	b9b8      	cbnz	r0, 800b4c8 <_Balloc+0x68>
 800b498:	2101      	movs	r1, #1
 800b49a:	fa01 f605 	lsl.w	r6, r1, r5
 800b49e:	1d72      	adds	r2, r6, #5
 800b4a0:	0092      	lsls	r2, r2, #2
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f000 fc9d 	bl	800bde2 <_calloc_r>
 800b4a8:	b160      	cbz	r0, 800b4c4 <_Balloc+0x64>
 800b4aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4ae:	e00e      	b.n	800b4ce <_Balloc+0x6e>
 800b4b0:	2221      	movs	r2, #33	; 0x21
 800b4b2:	2104      	movs	r1, #4
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f000 fc94 	bl	800bde2 <_calloc_r>
 800b4ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4bc:	60f0      	str	r0, [r6, #12]
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d1e4      	bne.n	800b48e <_Balloc+0x2e>
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	bd70      	pop	{r4, r5, r6, pc}
 800b4c8:	6802      	ldr	r2, [r0, #0]
 800b4ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4d4:	e7f7      	b.n	800b4c6 <_Balloc+0x66>
 800b4d6:	bf00      	nop
 800b4d8:	0800d0a6 	.word	0x0800d0a6
 800b4dc:	0800d1a4 	.word	0x0800d1a4

0800b4e0 <_Bfree>:
 800b4e0:	b570      	push	{r4, r5, r6, lr}
 800b4e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b4e4:	4605      	mov	r5, r0
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	b976      	cbnz	r6, 800b508 <_Bfree+0x28>
 800b4ea:	2010      	movs	r0, #16
 800b4ec:	f7ff ff9e 	bl	800b42c <malloc>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	6268      	str	r0, [r5, #36]	; 0x24
 800b4f4:	b920      	cbnz	r0, 800b500 <_Bfree+0x20>
 800b4f6:	4b09      	ldr	r3, [pc, #36]	; (800b51c <_Bfree+0x3c>)
 800b4f8:	4809      	ldr	r0, [pc, #36]	; (800b520 <_Bfree+0x40>)
 800b4fa:	218a      	movs	r1, #138	; 0x8a
 800b4fc:	f000 fefe 	bl	800c2fc <__assert_func>
 800b500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b504:	6006      	str	r6, [r0, #0]
 800b506:	60c6      	str	r6, [r0, #12]
 800b508:	b13c      	cbz	r4, 800b51a <_Bfree+0x3a>
 800b50a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b50c:	6862      	ldr	r2, [r4, #4]
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b514:	6021      	str	r1, [r4, #0]
 800b516:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b51a:	bd70      	pop	{r4, r5, r6, pc}
 800b51c:	0800d0a6 	.word	0x0800d0a6
 800b520:	0800d1a4 	.word	0x0800d1a4

0800b524 <__multadd>:
 800b524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b528:	690d      	ldr	r5, [r1, #16]
 800b52a:	4607      	mov	r7, r0
 800b52c:	460c      	mov	r4, r1
 800b52e:	461e      	mov	r6, r3
 800b530:	f101 0c14 	add.w	ip, r1, #20
 800b534:	2000      	movs	r0, #0
 800b536:	f8dc 3000 	ldr.w	r3, [ip]
 800b53a:	b299      	uxth	r1, r3
 800b53c:	fb02 6101 	mla	r1, r2, r1, r6
 800b540:	0c1e      	lsrs	r6, r3, #16
 800b542:	0c0b      	lsrs	r3, r1, #16
 800b544:	fb02 3306 	mla	r3, r2, r6, r3
 800b548:	b289      	uxth	r1, r1
 800b54a:	3001      	adds	r0, #1
 800b54c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b550:	4285      	cmp	r5, r0
 800b552:	f84c 1b04 	str.w	r1, [ip], #4
 800b556:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b55a:	dcec      	bgt.n	800b536 <__multadd+0x12>
 800b55c:	b30e      	cbz	r6, 800b5a2 <__multadd+0x7e>
 800b55e:	68a3      	ldr	r3, [r4, #8]
 800b560:	42ab      	cmp	r3, r5
 800b562:	dc19      	bgt.n	800b598 <__multadd+0x74>
 800b564:	6861      	ldr	r1, [r4, #4]
 800b566:	4638      	mov	r0, r7
 800b568:	3101      	adds	r1, #1
 800b56a:	f7ff ff79 	bl	800b460 <_Balloc>
 800b56e:	4680      	mov	r8, r0
 800b570:	b928      	cbnz	r0, 800b57e <__multadd+0x5a>
 800b572:	4602      	mov	r2, r0
 800b574:	4b0c      	ldr	r3, [pc, #48]	; (800b5a8 <__multadd+0x84>)
 800b576:	480d      	ldr	r0, [pc, #52]	; (800b5ac <__multadd+0x88>)
 800b578:	21b5      	movs	r1, #181	; 0xb5
 800b57a:	f000 febf 	bl	800c2fc <__assert_func>
 800b57e:	6922      	ldr	r2, [r4, #16]
 800b580:	3202      	adds	r2, #2
 800b582:	f104 010c 	add.w	r1, r4, #12
 800b586:	0092      	lsls	r2, r2, #2
 800b588:	300c      	adds	r0, #12
 800b58a:	f7fc ffcb 	bl	8008524 <memcpy>
 800b58e:	4621      	mov	r1, r4
 800b590:	4638      	mov	r0, r7
 800b592:	f7ff ffa5 	bl	800b4e0 <_Bfree>
 800b596:	4644      	mov	r4, r8
 800b598:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b59c:	3501      	adds	r5, #1
 800b59e:	615e      	str	r6, [r3, #20]
 800b5a0:	6125      	str	r5, [r4, #16]
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a8:	0800d118 	.word	0x0800d118
 800b5ac:	0800d1a4 	.word	0x0800d1a4

0800b5b0 <__s2b>:
 800b5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5b4:	460c      	mov	r4, r1
 800b5b6:	4615      	mov	r5, r2
 800b5b8:	461f      	mov	r7, r3
 800b5ba:	2209      	movs	r2, #9
 800b5bc:	3308      	adds	r3, #8
 800b5be:	4606      	mov	r6, r0
 800b5c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	db09      	blt.n	800b5e0 <__s2b+0x30>
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	f7ff ff47 	bl	800b460 <_Balloc>
 800b5d2:	b940      	cbnz	r0, 800b5e6 <__s2b+0x36>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	4b19      	ldr	r3, [pc, #100]	; (800b63c <__s2b+0x8c>)
 800b5d8:	4819      	ldr	r0, [pc, #100]	; (800b640 <__s2b+0x90>)
 800b5da:	21ce      	movs	r1, #206	; 0xce
 800b5dc:	f000 fe8e 	bl	800c2fc <__assert_func>
 800b5e0:	0052      	lsls	r2, r2, #1
 800b5e2:	3101      	adds	r1, #1
 800b5e4:	e7f0      	b.n	800b5c8 <__s2b+0x18>
 800b5e6:	9b08      	ldr	r3, [sp, #32]
 800b5e8:	6143      	str	r3, [r0, #20]
 800b5ea:	2d09      	cmp	r5, #9
 800b5ec:	f04f 0301 	mov.w	r3, #1
 800b5f0:	6103      	str	r3, [r0, #16]
 800b5f2:	dd16      	ble.n	800b622 <__s2b+0x72>
 800b5f4:	f104 0909 	add.w	r9, r4, #9
 800b5f8:	46c8      	mov	r8, r9
 800b5fa:	442c      	add	r4, r5
 800b5fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b600:	4601      	mov	r1, r0
 800b602:	3b30      	subs	r3, #48	; 0x30
 800b604:	220a      	movs	r2, #10
 800b606:	4630      	mov	r0, r6
 800b608:	f7ff ff8c 	bl	800b524 <__multadd>
 800b60c:	45a0      	cmp	r8, r4
 800b60e:	d1f5      	bne.n	800b5fc <__s2b+0x4c>
 800b610:	f1a5 0408 	sub.w	r4, r5, #8
 800b614:	444c      	add	r4, r9
 800b616:	1b2d      	subs	r5, r5, r4
 800b618:	1963      	adds	r3, r4, r5
 800b61a:	42bb      	cmp	r3, r7
 800b61c:	db04      	blt.n	800b628 <__s2b+0x78>
 800b61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b622:	340a      	adds	r4, #10
 800b624:	2509      	movs	r5, #9
 800b626:	e7f6      	b.n	800b616 <__s2b+0x66>
 800b628:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b62c:	4601      	mov	r1, r0
 800b62e:	3b30      	subs	r3, #48	; 0x30
 800b630:	220a      	movs	r2, #10
 800b632:	4630      	mov	r0, r6
 800b634:	f7ff ff76 	bl	800b524 <__multadd>
 800b638:	e7ee      	b.n	800b618 <__s2b+0x68>
 800b63a:	bf00      	nop
 800b63c:	0800d118 	.word	0x0800d118
 800b640:	0800d1a4 	.word	0x0800d1a4

0800b644 <__hi0bits>:
 800b644:	0c03      	lsrs	r3, r0, #16
 800b646:	041b      	lsls	r3, r3, #16
 800b648:	b9d3      	cbnz	r3, 800b680 <__hi0bits+0x3c>
 800b64a:	0400      	lsls	r0, r0, #16
 800b64c:	2310      	movs	r3, #16
 800b64e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b652:	bf04      	itt	eq
 800b654:	0200      	lsleq	r0, r0, #8
 800b656:	3308      	addeq	r3, #8
 800b658:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b65c:	bf04      	itt	eq
 800b65e:	0100      	lsleq	r0, r0, #4
 800b660:	3304      	addeq	r3, #4
 800b662:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b666:	bf04      	itt	eq
 800b668:	0080      	lsleq	r0, r0, #2
 800b66a:	3302      	addeq	r3, #2
 800b66c:	2800      	cmp	r0, #0
 800b66e:	db05      	blt.n	800b67c <__hi0bits+0x38>
 800b670:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b674:	f103 0301 	add.w	r3, r3, #1
 800b678:	bf08      	it	eq
 800b67a:	2320      	moveq	r3, #32
 800b67c:	4618      	mov	r0, r3
 800b67e:	4770      	bx	lr
 800b680:	2300      	movs	r3, #0
 800b682:	e7e4      	b.n	800b64e <__hi0bits+0xa>

0800b684 <__lo0bits>:
 800b684:	6803      	ldr	r3, [r0, #0]
 800b686:	f013 0207 	ands.w	r2, r3, #7
 800b68a:	4601      	mov	r1, r0
 800b68c:	d00b      	beq.n	800b6a6 <__lo0bits+0x22>
 800b68e:	07da      	lsls	r2, r3, #31
 800b690:	d423      	bmi.n	800b6da <__lo0bits+0x56>
 800b692:	0798      	lsls	r0, r3, #30
 800b694:	bf49      	itett	mi
 800b696:	085b      	lsrmi	r3, r3, #1
 800b698:	089b      	lsrpl	r3, r3, #2
 800b69a:	2001      	movmi	r0, #1
 800b69c:	600b      	strmi	r3, [r1, #0]
 800b69e:	bf5c      	itt	pl
 800b6a0:	600b      	strpl	r3, [r1, #0]
 800b6a2:	2002      	movpl	r0, #2
 800b6a4:	4770      	bx	lr
 800b6a6:	b298      	uxth	r0, r3
 800b6a8:	b9a8      	cbnz	r0, 800b6d6 <__lo0bits+0x52>
 800b6aa:	0c1b      	lsrs	r3, r3, #16
 800b6ac:	2010      	movs	r0, #16
 800b6ae:	b2da      	uxtb	r2, r3
 800b6b0:	b90a      	cbnz	r2, 800b6b6 <__lo0bits+0x32>
 800b6b2:	3008      	adds	r0, #8
 800b6b4:	0a1b      	lsrs	r3, r3, #8
 800b6b6:	071a      	lsls	r2, r3, #28
 800b6b8:	bf04      	itt	eq
 800b6ba:	091b      	lsreq	r3, r3, #4
 800b6bc:	3004      	addeq	r0, #4
 800b6be:	079a      	lsls	r2, r3, #30
 800b6c0:	bf04      	itt	eq
 800b6c2:	089b      	lsreq	r3, r3, #2
 800b6c4:	3002      	addeq	r0, #2
 800b6c6:	07da      	lsls	r2, r3, #31
 800b6c8:	d403      	bmi.n	800b6d2 <__lo0bits+0x4e>
 800b6ca:	085b      	lsrs	r3, r3, #1
 800b6cc:	f100 0001 	add.w	r0, r0, #1
 800b6d0:	d005      	beq.n	800b6de <__lo0bits+0x5a>
 800b6d2:	600b      	str	r3, [r1, #0]
 800b6d4:	4770      	bx	lr
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	e7e9      	b.n	800b6ae <__lo0bits+0x2a>
 800b6da:	2000      	movs	r0, #0
 800b6dc:	4770      	bx	lr
 800b6de:	2020      	movs	r0, #32
 800b6e0:	4770      	bx	lr
	...

0800b6e4 <__i2b>:
 800b6e4:	b510      	push	{r4, lr}
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	2101      	movs	r1, #1
 800b6ea:	f7ff feb9 	bl	800b460 <_Balloc>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	b928      	cbnz	r0, 800b6fe <__i2b+0x1a>
 800b6f2:	4b05      	ldr	r3, [pc, #20]	; (800b708 <__i2b+0x24>)
 800b6f4:	4805      	ldr	r0, [pc, #20]	; (800b70c <__i2b+0x28>)
 800b6f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b6fa:	f000 fdff 	bl	800c2fc <__assert_func>
 800b6fe:	2301      	movs	r3, #1
 800b700:	6144      	str	r4, [r0, #20]
 800b702:	6103      	str	r3, [r0, #16]
 800b704:	bd10      	pop	{r4, pc}
 800b706:	bf00      	nop
 800b708:	0800d118 	.word	0x0800d118
 800b70c:	0800d1a4 	.word	0x0800d1a4

0800b710 <__multiply>:
 800b710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b714:	4691      	mov	r9, r2
 800b716:	690a      	ldr	r2, [r1, #16]
 800b718:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	bfb8      	it	lt
 800b720:	460b      	movlt	r3, r1
 800b722:	460c      	mov	r4, r1
 800b724:	bfbc      	itt	lt
 800b726:	464c      	movlt	r4, r9
 800b728:	4699      	movlt	r9, r3
 800b72a:	6927      	ldr	r7, [r4, #16]
 800b72c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b730:	68a3      	ldr	r3, [r4, #8]
 800b732:	6861      	ldr	r1, [r4, #4]
 800b734:	eb07 060a 	add.w	r6, r7, sl
 800b738:	42b3      	cmp	r3, r6
 800b73a:	b085      	sub	sp, #20
 800b73c:	bfb8      	it	lt
 800b73e:	3101      	addlt	r1, #1
 800b740:	f7ff fe8e 	bl	800b460 <_Balloc>
 800b744:	b930      	cbnz	r0, 800b754 <__multiply+0x44>
 800b746:	4602      	mov	r2, r0
 800b748:	4b44      	ldr	r3, [pc, #272]	; (800b85c <__multiply+0x14c>)
 800b74a:	4845      	ldr	r0, [pc, #276]	; (800b860 <__multiply+0x150>)
 800b74c:	f240 115d 	movw	r1, #349	; 0x15d
 800b750:	f000 fdd4 	bl	800c2fc <__assert_func>
 800b754:	f100 0514 	add.w	r5, r0, #20
 800b758:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b75c:	462b      	mov	r3, r5
 800b75e:	2200      	movs	r2, #0
 800b760:	4543      	cmp	r3, r8
 800b762:	d321      	bcc.n	800b7a8 <__multiply+0x98>
 800b764:	f104 0314 	add.w	r3, r4, #20
 800b768:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b76c:	f109 0314 	add.w	r3, r9, #20
 800b770:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b774:	9202      	str	r2, [sp, #8]
 800b776:	1b3a      	subs	r2, r7, r4
 800b778:	3a15      	subs	r2, #21
 800b77a:	f022 0203 	bic.w	r2, r2, #3
 800b77e:	3204      	adds	r2, #4
 800b780:	f104 0115 	add.w	r1, r4, #21
 800b784:	428f      	cmp	r7, r1
 800b786:	bf38      	it	cc
 800b788:	2204      	movcc	r2, #4
 800b78a:	9201      	str	r2, [sp, #4]
 800b78c:	9a02      	ldr	r2, [sp, #8]
 800b78e:	9303      	str	r3, [sp, #12]
 800b790:	429a      	cmp	r2, r3
 800b792:	d80c      	bhi.n	800b7ae <__multiply+0x9e>
 800b794:	2e00      	cmp	r6, #0
 800b796:	dd03      	ble.n	800b7a0 <__multiply+0x90>
 800b798:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d05a      	beq.n	800b856 <__multiply+0x146>
 800b7a0:	6106      	str	r6, [r0, #16]
 800b7a2:	b005      	add	sp, #20
 800b7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a8:	f843 2b04 	str.w	r2, [r3], #4
 800b7ac:	e7d8      	b.n	800b760 <__multiply+0x50>
 800b7ae:	f8b3 a000 	ldrh.w	sl, [r3]
 800b7b2:	f1ba 0f00 	cmp.w	sl, #0
 800b7b6:	d024      	beq.n	800b802 <__multiply+0xf2>
 800b7b8:	f104 0e14 	add.w	lr, r4, #20
 800b7bc:	46a9      	mov	r9, r5
 800b7be:	f04f 0c00 	mov.w	ip, #0
 800b7c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b7c6:	f8d9 1000 	ldr.w	r1, [r9]
 800b7ca:	fa1f fb82 	uxth.w	fp, r2
 800b7ce:	b289      	uxth	r1, r1
 800b7d0:	fb0a 110b 	mla	r1, sl, fp, r1
 800b7d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b7d8:	f8d9 2000 	ldr.w	r2, [r9]
 800b7dc:	4461      	add	r1, ip
 800b7de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b7e2:	fb0a c20b 	mla	r2, sl, fp, ip
 800b7e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b7ea:	b289      	uxth	r1, r1
 800b7ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b7f0:	4577      	cmp	r7, lr
 800b7f2:	f849 1b04 	str.w	r1, [r9], #4
 800b7f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b7fa:	d8e2      	bhi.n	800b7c2 <__multiply+0xb2>
 800b7fc:	9a01      	ldr	r2, [sp, #4]
 800b7fe:	f845 c002 	str.w	ip, [r5, r2]
 800b802:	9a03      	ldr	r2, [sp, #12]
 800b804:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b808:	3304      	adds	r3, #4
 800b80a:	f1b9 0f00 	cmp.w	r9, #0
 800b80e:	d020      	beq.n	800b852 <__multiply+0x142>
 800b810:	6829      	ldr	r1, [r5, #0]
 800b812:	f104 0c14 	add.w	ip, r4, #20
 800b816:	46ae      	mov	lr, r5
 800b818:	f04f 0a00 	mov.w	sl, #0
 800b81c:	f8bc b000 	ldrh.w	fp, [ip]
 800b820:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b824:	fb09 220b 	mla	r2, r9, fp, r2
 800b828:	4492      	add	sl, r2
 800b82a:	b289      	uxth	r1, r1
 800b82c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b830:	f84e 1b04 	str.w	r1, [lr], #4
 800b834:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b838:	f8be 1000 	ldrh.w	r1, [lr]
 800b83c:	0c12      	lsrs	r2, r2, #16
 800b83e:	fb09 1102 	mla	r1, r9, r2, r1
 800b842:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b846:	4567      	cmp	r7, ip
 800b848:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b84c:	d8e6      	bhi.n	800b81c <__multiply+0x10c>
 800b84e:	9a01      	ldr	r2, [sp, #4]
 800b850:	50a9      	str	r1, [r5, r2]
 800b852:	3504      	adds	r5, #4
 800b854:	e79a      	b.n	800b78c <__multiply+0x7c>
 800b856:	3e01      	subs	r6, #1
 800b858:	e79c      	b.n	800b794 <__multiply+0x84>
 800b85a:	bf00      	nop
 800b85c:	0800d118 	.word	0x0800d118
 800b860:	0800d1a4 	.word	0x0800d1a4

0800b864 <__pow5mult>:
 800b864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b868:	4615      	mov	r5, r2
 800b86a:	f012 0203 	ands.w	r2, r2, #3
 800b86e:	4606      	mov	r6, r0
 800b870:	460f      	mov	r7, r1
 800b872:	d007      	beq.n	800b884 <__pow5mult+0x20>
 800b874:	4c25      	ldr	r4, [pc, #148]	; (800b90c <__pow5mult+0xa8>)
 800b876:	3a01      	subs	r2, #1
 800b878:	2300      	movs	r3, #0
 800b87a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b87e:	f7ff fe51 	bl	800b524 <__multadd>
 800b882:	4607      	mov	r7, r0
 800b884:	10ad      	asrs	r5, r5, #2
 800b886:	d03d      	beq.n	800b904 <__pow5mult+0xa0>
 800b888:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b88a:	b97c      	cbnz	r4, 800b8ac <__pow5mult+0x48>
 800b88c:	2010      	movs	r0, #16
 800b88e:	f7ff fdcd 	bl	800b42c <malloc>
 800b892:	4602      	mov	r2, r0
 800b894:	6270      	str	r0, [r6, #36]	; 0x24
 800b896:	b928      	cbnz	r0, 800b8a4 <__pow5mult+0x40>
 800b898:	4b1d      	ldr	r3, [pc, #116]	; (800b910 <__pow5mult+0xac>)
 800b89a:	481e      	ldr	r0, [pc, #120]	; (800b914 <__pow5mult+0xb0>)
 800b89c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b8a0:	f000 fd2c 	bl	800c2fc <__assert_func>
 800b8a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8a8:	6004      	str	r4, [r0, #0]
 800b8aa:	60c4      	str	r4, [r0, #12]
 800b8ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b8b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b8b4:	b94c      	cbnz	r4, 800b8ca <__pow5mult+0x66>
 800b8b6:	f240 2171 	movw	r1, #625	; 0x271
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	f7ff ff12 	bl	800b6e4 <__i2b>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	6003      	str	r3, [r0, #0]
 800b8ca:	f04f 0900 	mov.w	r9, #0
 800b8ce:	07eb      	lsls	r3, r5, #31
 800b8d0:	d50a      	bpl.n	800b8e8 <__pow5mult+0x84>
 800b8d2:	4639      	mov	r1, r7
 800b8d4:	4622      	mov	r2, r4
 800b8d6:	4630      	mov	r0, r6
 800b8d8:	f7ff ff1a 	bl	800b710 <__multiply>
 800b8dc:	4639      	mov	r1, r7
 800b8de:	4680      	mov	r8, r0
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	f7ff fdfd 	bl	800b4e0 <_Bfree>
 800b8e6:	4647      	mov	r7, r8
 800b8e8:	106d      	asrs	r5, r5, #1
 800b8ea:	d00b      	beq.n	800b904 <__pow5mult+0xa0>
 800b8ec:	6820      	ldr	r0, [r4, #0]
 800b8ee:	b938      	cbnz	r0, 800b900 <__pow5mult+0x9c>
 800b8f0:	4622      	mov	r2, r4
 800b8f2:	4621      	mov	r1, r4
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	f7ff ff0b 	bl	800b710 <__multiply>
 800b8fa:	6020      	str	r0, [r4, #0]
 800b8fc:	f8c0 9000 	str.w	r9, [r0]
 800b900:	4604      	mov	r4, r0
 800b902:	e7e4      	b.n	800b8ce <__pow5mult+0x6a>
 800b904:	4638      	mov	r0, r7
 800b906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b90a:	bf00      	nop
 800b90c:	0800d2f0 	.word	0x0800d2f0
 800b910:	0800d0a6 	.word	0x0800d0a6
 800b914:	0800d1a4 	.word	0x0800d1a4

0800b918 <__lshift>:
 800b918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b91c:	460c      	mov	r4, r1
 800b91e:	6849      	ldr	r1, [r1, #4]
 800b920:	6923      	ldr	r3, [r4, #16]
 800b922:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b926:	68a3      	ldr	r3, [r4, #8]
 800b928:	4607      	mov	r7, r0
 800b92a:	4691      	mov	r9, r2
 800b92c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b930:	f108 0601 	add.w	r6, r8, #1
 800b934:	42b3      	cmp	r3, r6
 800b936:	db0b      	blt.n	800b950 <__lshift+0x38>
 800b938:	4638      	mov	r0, r7
 800b93a:	f7ff fd91 	bl	800b460 <_Balloc>
 800b93e:	4605      	mov	r5, r0
 800b940:	b948      	cbnz	r0, 800b956 <__lshift+0x3e>
 800b942:	4602      	mov	r2, r0
 800b944:	4b2a      	ldr	r3, [pc, #168]	; (800b9f0 <__lshift+0xd8>)
 800b946:	482b      	ldr	r0, [pc, #172]	; (800b9f4 <__lshift+0xdc>)
 800b948:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b94c:	f000 fcd6 	bl	800c2fc <__assert_func>
 800b950:	3101      	adds	r1, #1
 800b952:	005b      	lsls	r3, r3, #1
 800b954:	e7ee      	b.n	800b934 <__lshift+0x1c>
 800b956:	2300      	movs	r3, #0
 800b958:	f100 0114 	add.w	r1, r0, #20
 800b95c:	f100 0210 	add.w	r2, r0, #16
 800b960:	4618      	mov	r0, r3
 800b962:	4553      	cmp	r3, sl
 800b964:	db37      	blt.n	800b9d6 <__lshift+0xbe>
 800b966:	6920      	ldr	r0, [r4, #16]
 800b968:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b96c:	f104 0314 	add.w	r3, r4, #20
 800b970:	f019 091f 	ands.w	r9, r9, #31
 800b974:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b978:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b97c:	d02f      	beq.n	800b9de <__lshift+0xc6>
 800b97e:	f1c9 0e20 	rsb	lr, r9, #32
 800b982:	468a      	mov	sl, r1
 800b984:	f04f 0c00 	mov.w	ip, #0
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	fa02 f209 	lsl.w	r2, r2, r9
 800b98e:	ea42 020c 	orr.w	r2, r2, ip
 800b992:	f84a 2b04 	str.w	r2, [sl], #4
 800b996:	f853 2b04 	ldr.w	r2, [r3], #4
 800b99a:	4298      	cmp	r0, r3
 800b99c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b9a0:	d8f2      	bhi.n	800b988 <__lshift+0x70>
 800b9a2:	1b03      	subs	r3, r0, r4
 800b9a4:	3b15      	subs	r3, #21
 800b9a6:	f023 0303 	bic.w	r3, r3, #3
 800b9aa:	3304      	adds	r3, #4
 800b9ac:	f104 0215 	add.w	r2, r4, #21
 800b9b0:	4290      	cmp	r0, r2
 800b9b2:	bf38      	it	cc
 800b9b4:	2304      	movcc	r3, #4
 800b9b6:	f841 c003 	str.w	ip, [r1, r3]
 800b9ba:	f1bc 0f00 	cmp.w	ip, #0
 800b9be:	d001      	beq.n	800b9c4 <__lshift+0xac>
 800b9c0:	f108 0602 	add.w	r6, r8, #2
 800b9c4:	3e01      	subs	r6, #1
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	612e      	str	r6, [r5, #16]
 800b9ca:	4621      	mov	r1, r4
 800b9cc:	f7ff fd88 	bl	800b4e0 <_Bfree>
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9da:	3301      	adds	r3, #1
 800b9dc:	e7c1      	b.n	800b962 <__lshift+0x4a>
 800b9de:	3904      	subs	r1, #4
 800b9e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9e8:	4298      	cmp	r0, r3
 800b9ea:	d8f9      	bhi.n	800b9e0 <__lshift+0xc8>
 800b9ec:	e7ea      	b.n	800b9c4 <__lshift+0xac>
 800b9ee:	bf00      	nop
 800b9f0:	0800d118 	.word	0x0800d118
 800b9f4:	0800d1a4 	.word	0x0800d1a4

0800b9f8 <__mcmp>:
 800b9f8:	b530      	push	{r4, r5, lr}
 800b9fa:	6902      	ldr	r2, [r0, #16]
 800b9fc:	690c      	ldr	r4, [r1, #16]
 800b9fe:	1b12      	subs	r2, r2, r4
 800ba00:	d10e      	bne.n	800ba20 <__mcmp+0x28>
 800ba02:	f100 0314 	add.w	r3, r0, #20
 800ba06:	3114      	adds	r1, #20
 800ba08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ba0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ba10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ba14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ba18:	42a5      	cmp	r5, r4
 800ba1a:	d003      	beq.n	800ba24 <__mcmp+0x2c>
 800ba1c:	d305      	bcc.n	800ba2a <__mcmp+0x32>
 800ba1e:	2201      	movs	r2, #1
 800ba20:	4610      	mov	r0, r2
 800ba22:	bd30      	pop	{r4, r5, pc}
 800ba24:	4283      	cmp	r3, r0
 800ba26:	d3f3      	bcc.n	800ba10 <__mcmp+0x18>
 800ba28:	e7fa      	b.n	800ba20 <__mcmp+0x28>
 800ba2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba2e:	e7f7      	b.n	800ba20 <__mcmp+0x28>

0800ba30 <__mdiff>:
 800ba30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba34:	460c      	mov	r4, r1
 800ba36:	4606      	mov	r6, r0
 800ba38:	4611      	mov	r1, r2
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	4690      	mov	r8, r2
 800ba3e:	f7ff ffdb 	bl	800b9f8 <__mcmp>
 800ba42:	1e05      	subs	r5, r0, #0
 800ba44:	d110      	bne.n	800ba68 <__mdiff+0x38>
 800ba46:	4629      	mov	r1, r5
 800ba48:	4630      	mov	r0, r6
 800ba4a:	f7ff fd09 	bl	800b460 <_Balloc>
 800ba4e:	b930      	cbnz	r0, 800ba5e <__mdiff+0x2e>
 800ba50:	4b3a      	ldr	r3, [pc, #232]	; (800bb3c <__mdiff+0x10c>)
 800ba52:	4602      	mov	r2, r0
 800ba54:	f240 2132 	movw	r1, #562	; 0x232
 800ba58:	4839      	ldr	r0, [pc, #228]	; (800bb40 <__mdiff+0x110>)
 800ba5a:	f000 fc4f 	bl	800c2fc <__assert_func>
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba68:	bfa4      	itt	ge
 800ba6a:	4643      	movge	r3, r8
 800ba6c:	46a0      	movge	r8, r4
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ba74:	bfa6      	itte	ge
 800ba76:	461c      	movge	r4, r3
 800ba78:	2500      	movge	r5, #0
 800ba7a:	2501      	movlt	r5, #1
 800ba7c:	f7ff fcf0 	bl	800b460 <_Balloc>
 800ba80:	b920      	cbnz	r0, 800ba8c <__mdiff+0x5c>
 800ba82:	4b2e      	ldr	r3, [pc, #184]	; (800bb3c <__mdiff+0x10c>)
 800ba84:	4602      	mov	r2, r0
 800ba86:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ba8a:	e7e5      	b.n	800ba58 <__mdiff+0x28>
 800ba8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ba90:	6926      	ldr	r6, [r4, #16]
 800ba92:	60c5      	str	r5, [r0, #12]
 800ba94:	f104 0914 	add.w	r9, r4, #20
 800ba98:	f108 0514 	add.w	r5, r8, #20
 800ba9c:	f100 0e14 	add.w	lr, r0, #20
 800baa0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800baa4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800baa8:	f108 0210 	add.w	r2, r8, #16
 800baac:	46f2      	mov	sl, lr
 800baae:	2100      	movs	r1, #0
 800bab0:	f859 3b04 	ldr.w	r3, [r9], #4
 800bab4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bab8:	fa1f f883 	uxth.w	r8, r3
 800babc:	fa11 f18b 	uxtah	r1, r1, fp
 800bac0:	0c1b      	lsrs	r3, r3, #16
 800bac2:	eba1 0808 	sub.w	r8, r1, r8
 800bac6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800baca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bace:	fa1f f888 	uxth.w	r8, r8
 800bad2:	1419      	asrs	r1, r3, #16
 800bad4:	454e      	cmp	r6, r9
 800bad6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bada:	f84a 3b04 	str.w	r3, [sl], #4
 800bade:	d8e7      	bhi.n	800bab0 <__mdiff+0x80>
 800bae0:	1b33      	subs	r3, r6, r4
 800bae2:	3b15      	subs	r3, #21
 800bae4:	f023 0303 	bic.w	r3, r3, #3
 800bae8:	3304      	adds	r3, #4
 800baea:	3415      	adds	r4, #21
 800baec:	42a6      	cmp	r6, r4
 800baee:	bf38      	it	cc
 800baf0:	2304      	movcc	r3, #4
 800baf2:	441d      	add	r5, r3
 800baf4:	4473      	add	r3, lr
 800baf6:	469e      	mov	lr, r3
 800baf8:	462e      	mov	r6, r5
 800bafa:	4566      	cmp	r6, ip
 800bafc:	d30e      	bcc.n	800bb1c <__mdiff+0xec>
 800bafe:	f10c 0203 	add.w	r2, ip, #3
 800bb02:	1b52      	subs	r2, r2, r5
 800bb04:	f022 0203 	bic.w	r2, r2, #3
 800bb08:	3d03      	subs	r5, #3
 800bb0a:	45ac      	cmp	ip, r5
 800bb0c:	bf38      	it	cc
 800bb0e:	2200      	movcc	r2, #0
 800bb10:	441a      	add	r2, r3
 800bb12:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bb16:	b17b      	cbz	r3, 800bb38 <__mdiff+0x108>
 800bb18:	6107      	str	r7, [r0, #16]
 800bb1a:	e7a3      	b.n	800ba64 <__mdiff+0x34>
 800bb1c:	f856 8b04 	ldr.w	r8, [r6], #4
 800bb20:	fa11 f288 	uxtah	r2, r1, r8
 800bb24:	1414      	asrs	r4, r2, #16
 800bb26:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bb2a:	b292      	uxth	r2, r2
 800bb2c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bb30:	f84e 2b04 	str.w	r2, [lr], #4
 800bb34:	1421      	asrs	r1, r4, #16
 800bb36:	e7e0      	b.n	800bafa <__mdiff+0xca>
 800bb38:	3f01      	subs	r7, #1
 800bb3a:	e7ea      	b.n	800bb12 <__mdiff+0xe2>
 800bb3c:	0800d118 	.word	0x0800d118
 800bb40:	0800d1a4 	.word	0x0800d1a4

0800bb44 <__ulp>:
 800bb44:	b082      	sub	sp, #8
 800bb46:	ed8d 0b00 	vstr	d0, [sp]
 800bb4a:	9b01      	ldr	r3, [sp, #4]
 800bb4c:	4912      	ldr	r1, [pc, #72]	; (800bb98 <__ulp+0x54>)
 800bb4e:	4019      	ands	r1, r3
 800bb50:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bb54:	2900      	cmp	r1, #0
 800bb56:	dd05      	ble.n	800bb64 <__ulp+0x20>
 800bb58:	2200      	movs	r2, #0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	ec43 2b10 	vmov	d0, r2, r3
 800bb60:	b002      	add	sp, #8
 800bb62:	4770      	bx	lr
 800bb64:	4249      	negs	r1, r1
 800bb66:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bb6a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bb6e:	f04f 0200 	mov.w	r2, #0
 800bb72:	f04f 0300 	mov.w	r3, #0
 800bb76:	da04      	bge.n	800bb82 <__ulp+0x3e>
 800bb78:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bb7c:	fa41 f300 	asr.w	r3, r1, r0
 800bb80:	e7ec      	b.n	800bb5c <__ulp+0x18>
 800bb82:	f1a0 0114 	sub.w	r1, r0, #20
 800bb86:	291e      	cmp	r1, #30
 800bb88:	bfda      	itte	le
 800bb8a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bb8e:	fa20 f101 	lsrle.w	r1, r0, r1
 800bb92:	2101      	movgt	r1, #1
 800bb94:	460a      	mov	r2, r1
 800bb96:	e7e1      	b.n	800bb5c <__ulp+0x18>
 800bb98:	7ff00000 	.word	0x7ff00000

0800bb9c <__b2d>:
 800bb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb9e:	6905      	ldr	r5, [r0, #16]
 800bba0:	f100 0714 	add.w	r7, r0, #20
 800bba4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bba8:	1f2e      	subs	r6, r5, #4
 800bbaa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bbae:	4620      	mov	r0, r4
 800bbb0:	f7ff fd48 	bl	800b644 <__hi0bits>
 800bbb4:	f1c0 0320 	rsb	r3, r0, #32
 800bbb8:	280a      	cmp	r0, #10
 800bbba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bc38 <__b2d+0x9c>
 800bbbe:	600b      	str	r3, [r1, #0]
 800bbc0:	dc14      	bgt.n	800bbec <__b2d+0x50>
 800bbc2:	f1c0 0e0b 	rsb	lr, r0, #11
 800bbc6:	fa24 f10e 	lsr.w	r1, r4, lr
 800bbca:	42b7      	cmp	r7, r6
 800bbcc:	ea41 030c 	orr.w	r3, r1, ip
 800bbd0:	bf34      	ite	cc
 800bbd2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bbd6:	2100      	movcs	r1, #0
 800bbd8:	3015      	adds	r0, #21
 800bbda:	fa04 f000 	lsl.w	r0, r4, r0
 800bbde:	fa21 f10e 	lsr.w	r1, r1, lr
 800bbe2:	ea40 0201 	orr.w	r2, r0, r1
 800bbe6:	ec43 2b10 	vmov	d0, r2, r3
 800bbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbec:	42b7      	cmp	r7, r6
 800bbee:	bf3a      	itte	cc
 800bbf0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bbf4:	f1a5 0608 	subcc.w	r6, r5, #8
 800bbf8:	2100      	movcs	r1, #0
 800bbfa:	380b      	subs	r0, #11
 800bbfc:	d017      	beq.n	800bc2e <__b2d+0x92>
 800bbfe:	f1c0 0c20 	rsb	ip, r0, #32
 800bc02:	fa04 f500 	lsl.w	r5, r4, r0
 800bc06:	42be      	cmp	r6, r7
 800bc08:	fa21 f40c 	lsr.w	r4, r1, ip
 800bc0c:	ea45 0504 	orr.w	r5, r5, r4
 800bc10:	bf8c      	ite	hi
 800bc12:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bc16:	2400      	movls	r4, #0
 800bc18:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bc1c:	fa01 f000 	lsl.w	r0, r1, r0
 800bc20:	fa24 f40c 	lsr.w	r4, r4, ip
 800bc24:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bc28:	ea40 0204 	orr.w	r2, r0, r4
 800bc2c:	e7db      	b.n	800bbe6 <__b2d+0x4a>
 800bc2e:	ea44 030c 	orr.w	r3, r4, ip
 800bc32:	460a      	mov	r2, r1
 800bc34:	e7d7      	b.n	800bbe6 <__b2d+0x4a>
 800bc36:	bf00      	nop
 800bc38:	3ff00000 	.word	0x3ff00000

0800bc3c <__d2b>:
 800bc3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc40:	4689      	mov	r9, r1
 800bc42:	2101      	movs	r1, #1
 800bc44:	ec57 6b10 	vmov	r6, r7, d0
 800bc48:	4690      	mov	r8, r2
 800bc4a:	f7ff fc09 	bl	800b460 <_Balloc>
 800bc4e:	4604      	mov	r4, r0
 800bc50:	b930      	cbnz	r0, 800bc60 <__d2b+0x24>
 800bc52:	4602      	mov	r2, r0
 800bc54:	4b25      	ldr	r3, [pc, #148]	; (800bcec <__d2b+0xb0>)
 800bc56:	4826      	ldr	r0, [pc, #152]	; (800bcf0 <__d2b+0xb4>)
 800bc58:	f240 310a 	movw	r1, #778	; 0x30a
 800bc5c:	f000 fb4e 	bl	800c2fc <__assert_func>
 800bc60:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bc64:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc68:	bb35      	cbnz	r5, 800bcb8 <__d2b+0x7c>
 800bc6a:	2e00      	cmp	r6, #0
 800bc6c:	9301      	str	r3, [sp, #4]
 800bc6e:	d028      	beq.n	800bcc2 <__d2b+0x86>
 800bc70:	4668      	mov	r0, sp
 800bc72:	9600      	str	r6, [sp, #0]
 800bc74:	f7ff fd06 	bl	800b684 <__lo0bits>
 800bc78:	9900      	ldr	r1, [sp, #0]
 800bc7a:	b300      	cbz	r0, 800bcbe <__d2b+0x82>
 800bc7c:	9a01      	ldr	r2, [sp, #4]
 800bc7e:	f1c0 0320 	rsb	r3, r0, #32
 800bc82:	fa02 f303 	lsl.w	r3, r2, r3
 800bc86:	430b      	orrs	r3, r1
 800bc88:	40c2      	lsrs	r2, r0
 800bc8a:	6163      	str	r3, [r4, #20]
 800bc8c:	9201      	str	r2, [sp, #4]
 800bc8e:	9b01      	ldr	r3, [sp, #4]
 800bc90:	61a3      	str	r3, [r4, #24]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	bf14      	ite	ne
 800bc96:	2202      	movne	r2, #2
 800bc98:	2201      	moveq	r2, #1
 800bc9a:	6122      	str	r2, [r4, #16]
 800bc9c:	b1d5      	cbz	r5, 800bcd4 <__d2b+0x98>
 800bc9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bca2:	4405      	add	r5, r0
 800bca4:	f8c9 5000 	str.w	r5, [r9]
 800bca8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bcac:	f8c8 0000 	str.w	r0, [r8]
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	b003      	add	sp, #12
 800bcb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcbc:	e7d5      	b.n	800bc6a <__d2b+0x2e>
 800bcbe:	6161      	str	r1, [r4, #20]
 800bcc0:	e7e5      	b.n	800bc8e <__d2b+0x52>
 800bcc2:	a801      	add	r0, sp, #4
 800bcc4:	f7ff fcde 	bl	800b684 <__lo0bits>
 800bcc8:	9b01      	ldr	r3, [sp, #4]
 800bcca:	6163      	str	r3, [r4, #20]
 800bccc:	2201      	movs	r2, #1
 800bcce:	6122      	str	r2, [r4, #16]
 800bcd0:	3020      	adds	r0, #32
 800bcd2:	e7e3      	b.n	800bc9c <__d2b+0x60>
 800bcd4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bcd8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bcdc:	f8c9 0000 	str.w	r0, [r9]
 800bce0:	6918      	ldr	r0, [r3, #16]
 800bce2:	f7ff fcaf 	bl	800b644 <__hi0bits>
 800bce6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bcea:	e7df      	b.n	800bcac <__d2b+0x70>
 800bcec:	0800d118 	.word	0x0800d118
 800bcf0:	0800d1a4 	.word	0x0800d1a4

0800bcf4 <__ratio>:
 800bcf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf8:	4688      	mov	r8, r1
 800bcfa:	4669      	mov	r1, sp
 800bcfc:	4681      	mov	r9, r0
 800bcfe:	f7ff ff4d 	bl	800bb9c <__b2d>
 800bd02:	a901      	add	r1, sp, #4
 800bd04:	4640      	mov	r0, r8
 800bd06:	ec55 4b10 	vmov	r4, r5, d0
 800bd0a:	f7ff ff47 	bl	800bb9c <__b2d>
 800bd0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd12:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bd16:	eba3 0c02 	sub.w	ip, r3, r2
 800bd1a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bd1e:	1a9b      	subs	r3, r3, r2
 800bd20:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bd24:	ec51 0b10 	vmov	r0, r1, d0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	bfd6      	itet	le
 800bd2c:	460a      	movle	r2, r1
 800bd2e:	462a      	movgt	r2, r5
 800bd30:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bd34:	468b      	mov	fp, r1
 800bd36:	462f      	mov	r7, r5
 800bd38:	bfd4      	ite	le
 800bd3a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bd3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bd42:	4620      	mov	r0, r4
 800bd44:	ee10 2a10 	vmov	r2, s0
 800bd48:	465b      	mov	r3, fp
 800bd4a:	4639      	mov	r1, r7
 800bd4c:	f7f4 fd7e 	bl	800084c <__aeabi_ddiv>
 800bd50:	ec41 0b10 	vmov	d0, r0, r1
 800bd54:	b003      	add	sp, #12
 800bd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bd5a <__copybits>:
 800bd5a:	3901      	subs	r1, #1
 800bd5c:	b570      	push	{r4, r5, r6, lr}
 800bd5e:	1149      	asrs	r1, r1, #5
 800bd60:	6914      	ldr	r4, [r2, #16]
 800bd62:	3101      	adds	r1, #1
 800bd64:	f102 0314 	add.w	r3, r2, #20
 800bd68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bd6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bd70:	1f05      	subs	r5, r0, #4
 800bd72:	42a3      	cmp	r3, r4
 800bd74:	d30c      	bcc.n	800bd90 <__copybits+0x36>
 800bd76:	1aa3      	subs	r3, r4, r2
 800bd78:	3b11      	subs	r3, #17
 800bd7a:	f023 0303 	bic.w	r3, r3, #3
 800bd7e:	3211      	adds	r2, #17
 800bd80:	42a2      	cmp	r2, r4
 800bd82:	bf88      	it	hi
 800bd84:	2300      	movhi	r3, #0
 800bd86:	4418      	add	r0, r3
 800bd88:	2300      	movs	r3, #0
 800bd8a:	4288      	cmp	r0, r1
 800bd8c:	d305      	bcc.n	800bd9a <__copybits+0x40>
 800bd8e:	bd70      	pop	{r4, r5, r6, pc}
 800bd90:	f853 6b04 	ldr.w	r6, [r3], #4
 800bd94:	f845 6f04 	str.w	r6, [r5, #4]!
 800bd98:	e7eb      	b.n	800bd72 <__copybits+0x18>
 800bd9a:	f840 3b04 	str.w	r3, [r0], #4
 800bd9e:	e7f4      	b.n	800bd8a <__copybits+0x30>

0800bda0 <__any_on>:
 800bda0:	f100 0214 	add.w	r2, r0, #20
 800bda4:	6900      	ldr	r0, [r0, #16]
 800bda6:	114b      	asrs	r3, r1, #5
 800bda8:	4298      	cmp	r0, r3
 800bdaa:	b510      	push	{r4, lr}
 800bdac:	db11      	blt.n	800bdd2 <__any_on+0x32>
 800bdae:	dd0a      	ble.n	800bdc6 <__any_on+0x26>
 800bdb0:	f011 011f 	ands.w	r1, r1, #31
 800bdb4:	d007      	beq.n	800bdc6 <__any_on+0x26>
 800bdb6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bdba:	fa24 f001 	lsr.w	r0, r4, r1
 800bdbe:	fa00 f101 	lsl.w	r1, r0, r1
 800bdc2:	428c      	cmp	r4, r1
 800bdc4:	d10b      	bne.n	800bdde <__any_on+0x3e>
 800bdc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d803      	bhi.n	800bdd6 <__any_on+0x36>
 800bdce:	2000      	movs	r0, #0
 800bdd0:	bd10      	pop	{r4, pc}
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	e7f7      	b.n	800bdc6 <__any_on+0x26>
 800bdd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bdda:	2900      	cmp	r1, #0
 800bddc:	d0f5      	beq.n	800bdca <__any_on+0x2a>
 800bdde:	2001      	movs	r0, #1
 800bde0:	e7f6      	b.n	800bdd0 <__any_on+0x30>

0800bde2 <_calloc_r>:
 800bde2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bde4:	fba1 2402 	umull	r2, r4, r1, r2
 800bde8:	b94c      	cbnz	r4, 800bdfe <_calloc_r+0x1c>
 800bdea:	4611      	mov	r1, r2
 800bdec:	9201      	str	r2, [sp, #4]
 800bdee:	f000 f87b 	bl	800bee8 <_malloc_r>
 800bdf2:	9a01      	ldr	r2, [sp, #4]
 800bdf4:	4605      	mov	r5, r0
 800bdf6:	b930      	cbnz	r0, 800be06 <_calloc_r+0x24>
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	b003      	add	sp, #12
 800bdfc:	bd30      	pop	{r4, r5, pc}
 800bdfe:	220c      	movs	r2, #12
 800be00:	6002      	str	r2, [r0, #0]
 800be02:	2500      	movs	r5, #0
 800be04:	e7f8      	b.n	800bdf8 <_calloc_r+0x16>
 800be06:	4621      	mov	r1, r4
 800be08:	f7fc fb9a 	bl	8008540 <memset>
 800be0c:	e7f4      	b.n	800bdf8 <_calloc_r+0x16>
	...

0800be10 <_free_r>:
 800be10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be12:	2900      	cmp	r1, #0
 800be14:	d044      	beq.n	800bea0 <_free_r+0x90>
 800be16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be1a:	9001      	str	r0, [sp, #4]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f1a1 0404 	sub.w	r4, r1, #4
 800be22:	bfb8      	it	lt
 800be24:	18e4      	addlt	r4, r4, r3
 800be26:	f000 fab3 	bl	800c390 <__malloc_lock>
 800be2a:	4a1e      	ldr	r2, [pc, #120]	; (800bea4 <_free_r+0x94>)
 800be2c:	9801      	ldr	r0, [sp, #4]
 800be2e:	6813      	ldr	r3, [r2, #0]
 800be30:	b933      	cbnz	r3, 800be40 <_free_r+0x30>
 800be32:	6063      	str	r3, [r4, #4]
 800be34:	6014      	str	r4, [r2, #0]
 800be36:	b003      	add	sp, #12
 800be38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be3c:	f000 baae 	b.w	800c39c <__malloc_unlock>
 800be40:	42a3      	cmp	r3, r4
 800be42:	d908      	bls.n	800be56 <_free_r+0x46>
 800be44:	6825      	ldr	r5, [r4, #0]
 800be46:	1961      	adds	r1, r4, r5
 800be48:	428b      	cmp	r3, r1
 800be4a:	bf01      	itttt	eq
 800be4c:	6819      	ldreq	r1, [r3, #0]
 800be4e:	685b      	ldreq	r3, [r3, #4]
 800be50:	1949      	addeq	r1, r1, r5
 800be52:	6021      	streq	r1, [r4, #0]
 800be54:	e7ed      	b.n	800be32 <_free_r+0x22>
 800be56:	461a      	mov	r2, r3
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	b10b      	cbz	r3, 800be60 <_free_r+0x50>
 800be5c:	42a3      	cmp	r3, r4
 800be5e:	d9fa      	bls.n	800be56 <_free_r+0x46>
 800be60:	6811      	ldr	r1, [r2, #0]
 800be62:	1855      	adds	r5, r2, r1
 800be64:	42a5      	cmp	r5, r4
 800be66:	d10b      	bne.n	800be80 <_free_r+0x70>
 800be68:	6824      	ldr	r4, [r4, #0]
 800be6a:	4421      	add	r1, r4
 800be6c:	1854      	adds	r4, r2, r1
 800be6e:	42a3      	cmp	r3, r4
 800be70:	6011      	str	r1, [r2, #0]
 800be72:	d1e0      	bne.n	800be36 <_free_r+0x26>
 800be74:	681c      	ldr	r4, [r3, #0]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	6053      	str	r3, [r2, #4]
 800be7a:	4421      	add	r1, r4
 800be7c:	6011      	str	r1, [r2, #0]
 800be7e:	e7da      	b.n	800be36 <_free_r+0x26>
 800be80:	d902      	bls.n	800be88 <_free_r+0x78>
 800be82:	230c      	movs	r3, #12
 800be84:	6003      	str	r3, [r0, #0]
 800be86:	e7d6      	b.n	800be36 <_free_r+0x26>
 800be88:	6825      	ldr	r5, [r4, #0]
 800be8a:	1961      	adds	r1, r4, r5
 800be8c:	428b      	cmp	r3, r1
 800be8e:	bf04      	itt	eq
 800be90:	6819      	ldreq	r1, [r3, #0]
 800be92:	685b      	ldreq	r3, [r3, #4]
 800be94:	6063      	str	r3, [r4, #4]
 800be96:	bf04      	itt	eq
 800be98:	1949      	addeq	r1, r1, r5
 800be9a:	6021      	streq	r1, [r4, #0]
 800be9c:	6054      	str	r4, [r2, #4]
 800be9e:	e7ca      	b.n	800be36 <_free_r+0x26>
 800bea0:	b003      	add	sp, #12
 800bea2:	bd30      	pop	{r4, r5, pc}
 800bea4:	20001f90 	.word	0x20001f90

0800bea8 <sbrk_aligned>:
 800bea8:	b570      	push	{r4, r5, r6, lr}
 800beaa:	4e0e      	ldr	r6, [pc, #56]	; (800bee4 <sbrk_aligned+0x3c>)
 800beac:	460c      	mov	r4, r1
 800beae:	6831      	ldr	r1, [r6, #0]
 800beb0:	4605      	mov	r5, r0
 800beb2:	b911      	cbnz	r1, 800beba <sbrk_aligned+0x12>
 800beb4:	f000 f9f0 	bl	800c298 <_sbrk_r>
 800beb8:	6030      	str	r0, [r6, #0]
 800beba:	4621      	mov	r1, r4
 800bebc:	4628      	mov	r0, r5
 800bebe:	f000 f9eb 	bl	800c298 <_sbrk_r>
 800bec2:	1c43      	adds	r3, r0, #1
 800bec4:	d00a      	beq.n	800bedc <sbrk_aligned+0x34>
 800bec6:	1cc4      	adds	r4, r0, #3
 800bec8:	f024 0403 	bic.w	r4, r4, #3
 800becc:	42a0      	cmp	r0, r4
 800bece:	d007      	beq.n	800bee0 <sbrk_aligned+0x38>
 800bed0:	1a21      	subs	r1, r4, r0
 800bed2:	4628      	mov	r0, r5
 800bed4:	f000 f9e0 	bl	800c298 <_sbrk_r>
 800bed8:	3001      	adds	r0, #1
 800beda:	d101      	bne.n	800bee0 <sbrk_aligned+0x38>
 800bedc:	f04f 34ff 	mov.w	r4, #4294967295
 800bee0:	4620      	mov	r0, r4
 800bee2:	bd70      	pop	{r4, r5, r6, pc}
 800bee4:	20001f94 	.word	0x20001f94

0800bee8 <_malloc_r>:
 800bee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beec:	1ccd      	adds	r5, r1, #3
 800beee:	f025 0503 	bic.w	r5, r5, #3
 800bef2:	3508      	adds	r5, #8
 800bef4:	2d0c      	cmp	r5, #12
 800bef6:	bf38      	it	cc
 800bef8:	250c      	movcc	r5, #12
 800befa:	2d00      	cmp	r5, #0
 800befc:	4607      	mov	r7, r0
 800befe:	db01      	blt.n	800bf04 <_malloc_r+0x1c>
 800bf00:	42a9      	cmp	r1, r5
 800bf02:	d905      	bls.n	800bf10 <_malloc_r+0x28>
 800bf04:	230c      	movs	r3, #12
 800bf06:	603b      	str	r3, [r7, #0]
 800bf08:	2600      	movs	r6, #0
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf10:	4e2e      	ldr	r6, [pc, #184]	; (800bfcc <_malloc_r+0xe4>)
 800bf12:	f000 fa3d 	bl	800c390 <__malloc_lock>
 800bf16:	6833      	ldr	r3, [r6, #0]
 800bf18:	461c      	mov	r4, r3
 800bf1a:	bb34      	cbnz	r4, 800bf6a <_malloc_r+0x82>
 800bf1c:	4629      	mov	r1, r5
 800bf1e:	4638      	mov	r0, r7
 800bf20:	f7ff ffc2 	bl	800bea8 <sbrk_aligned>
 800bf24:	1c43      	adds	r3, r0, #1
 800bf26:	4604      	mov	r4, r0
 800bf28:	d14d      	bne.n	800bfc6 <_malloc_r+0xde>
 800bf2a:	6834      	ldr	r4, [r6, #0]
 800bf2c:	4626      	mov	r6, r4
 800bf2e:	2e00      	cmp	r6, #0
 800bf30:	d140      	bne.n	800bfb4 <_malloc_r+0xcc>
 800bf32:	6823      	ldr	r3, [r4, #0]
 800bf34:	4631      	mov	r1, r6
 800bf36:	4638      	mov	r0, r7
 800bf38:	eb04 0803 	add.w	r8, r4, r3
 800bf3c:	f000 f9ac 	bl	800c298 <_sbrk_r>
 800bf40:	4580      	cmp	r8, r0
 800bf42:	d13a      	bne.n	800bfba <_malloc_r+0xd2>
 800bf44:	6821      	ldr	r1, [r4, #0]
 800bf46:	3503      	adds	r5, #3
 800bf48:	1a6d      	subs	r5, r5, r1
 800bf4a:	f025 0503 	bic.w	r5, r5, #3
 800bf4e:	3508      	adds	r5, #8
 800bf50:	2d0c      	cmp	r5, #12
 800bf52:	bf38      	it	cc
 800bf54:	250c      	movcc	r5, #12
 800bf56:	4629      	mov	r1, r5
 800bf58:	4638      	mov	r0, r7
 800bf5a:	f7ff ffa5 	bl	800bea8 <sbrk_aligned>
 800bf5e:	3001      	adds	r0, #1
 800bf60:	d02b      	beq.n	800bfba <_malloc_r+0xd2>
 800bf62:	6823      	ldr	r3, [r4, #0]
 800bf64:	442b      	add	r3, r5
 800bf66:	6023      	str	r3, [r4, #0]
 800bf68:	e00e      	b.n	800bf88 <_malloc_r+0xa0>
 800bf6a:	6822      	ldr	r2, [r4, #0]
 800bf6c:	1b52      	subs	r2, r2, r5
 800bf6e:	d41e      	bmi.n	800bfae <_malloc_r+0xc6>
 800bf70:	2a0b      	cmp	r2, #11
 800bf72:	d916      	bls.n	800bfa2 <_malloc_r+0xba>
 800bf74:	1961      	adds	r1, r4, r5
 800bf76:	42a3      	cmp	r3, r4
 800bf78:	6025      	str	r5, [r4, #0]
 800bf7a:	bf18      	it	ne
 800bf7c:	6059      	strne	r1, [r3, #4]
 800bf7e:	6863      	ldr	r3, [r4, #4]
 800bf80:	bf08      	it	eq
 800bf82:	6031      	streq	r1, [r6, #0]
 800bf84:	5162      	str	r2, [r4, r5]
 800bf86:	604b      	str	r3, [r1, #4]
 800bf88:	4638      	mov	r0, r7
 800bf8a:	f104 060b 	add.w	r6, r4, #11
 800bf8e:	f000 fa05 	bl	800c39c <__malloc_unlock>
 800bf92:	f026 0607 	bic.w	r6, r6, #7
 800bf96:	1d23      	adds	r3, r4, #4
 800bf98:	1af2      	subs	r2, r6, r3
 800bf9a:	d0b6      	beq.n	800bf0a <_malloc_r+0x22>
 800bf9c:	1b9b      	subs	r3, r3, r6
 800bf9e:	50a3      	str	r3, [r4, r2]
 800bfa0:	e7b3      	b.n	800bf0a <_malloc_r+0x22>
 800bfa2:	6862      	ldr	r2, [r4, #4]
 800bfa4:	42a3      	cmp	r3, r4
 800bfa6:	bf0c      	ite	eq
 800bfa8:	6032      	streq	r2, [r6, #0]
 800bfaa:	605a      	strne	r2, [r3, #4]
 800bfac:	e7ec      	b.n	800bf88 <_malloc_r+0xa0>
 800bfae:	4623      	mov	r3, r4
 800bfb0:	6864      	ldr	r4, [r4, #4]
 800bfb2:	e7b2      	b.n	800bf1a <_malloc_r+0x32>
 800bfb4:	4634      	mov	r4, r6
 800bfb6:	6876      	ldr	r6, [r6, #4]
 800bfb8:	e7b9      	b.n	800bf2e <_malloc_r+0x46>
 800bfba:	230c      	movs	r3, #12
 800bfbc:	603b      	str	r3, [r7, #0]
 800bfbe:	4638      	mov	r0, r7
 800bfc0:	f000 f9ec 	bl	800c39c <__malloc_unlock>
 800bfc4:	e7a1      	b.n	800bf0a <_malloc_r+0x22>
 800bfc6:	6025      	str	r5, [r4, #0]
 800bfc8:	e7de      	b.n	800bf88 <_malloc_r+0xa0>
 800bfca:	bf00      	nop
 800bfcc:	20001f90 	.word	0x20001f90

0800bfd0 <__ssputs_r>:
 800bfd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfd4:	688e      	ldr	r6, [r1, #8]
 800bfd6:	429e      	cmp	r6, r3
 800bfd8:	4682      	mov	sl, r0
 800bfda:	460c      	mov	r4, r1
 800bfdc:	4690      	mov	r8, r2
 800bfde:	461f      	mov	r7, r3
 800bfe0:	d838      	bhi.n	800c054 <__ssputs_r+0x84>
 800bfe2:	898a      	ldrh	r2, [r1, #12]
 800bfe4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bfe8:	d032      	beq.n	800c050 <__ssputs_r+0x80>
 800bfea:	6825      	ldr	r5, [r4, #0]
 800bfec:	6909      	ldr	r1, [r1, #16]
 800bfee:	eba5 0901 	sub.w	r9, r5, r1
 800bff2:	6965      	ldr	r5, [r4, #20]
 800bff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bff8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bffc:	3301      	adds	r3, #1
 800bffe:	444b      	add	r3, r9
 800c000:	106d      	asrs	r5, r5, #1
 800c002:	429d      	cmp	r5, r3
 800c004:	bf38      	it	cc
 800c006:	461d      	movcc	r5, r3
 800c008:	0553      	lsls	r3, r2, #21
 800c00a:	d531      	bpl.n	800c070 <__ssputs_r+0xa0>
 800c00c:	4629      	mov	r1, r5
 800c00e:	f7ff ff6b 	bl	800bee8 <_malloc_r>
 800c012:	4606      	mov	r6, r0
 800c014:	b950      	cbnz	r0, 800c02c <__ssputs_r+0x5c>
 800c016:	230c      	movs	r3, #12
 800c018:	f8ca 3000 	str.w	r3, [sl]
 800c01c:	89a3      	ldrh	r3, [r4, #12]
 800c01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c022:	81a3      	strh	r3, [r4, #12]
 800c024:	f04f 30ff 	mov.w	r0, #4294967295
 800c028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c02c:	6921      	ldr	r1, [r4, #16]
 800c02e:	464a      	mov	r2, r9
 800c030:	f7fc fa78 	bl	8008524 <memcpy>
 800c034:	89a3      	ldrh	r3, [r4, #12]
 800c036:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c03a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c03e:	81a3      	strh	r3, [r4, #12]
 800c040:	6126      	str	r6, [r4, #16]
 800c042:	6165      	str	r5, [r4, #20]
 800c044:	444e      	add	r6, r9
 800c046:	eba5 0509 	sub.w	r5, r5, r9
 800c04a:	6026      	str	r6, [r4, #0]
 800c04c:	60a5      	str	r5, [r4, #8]
 800c04e:	463e      	mov	r6, r7
 800c050:	42be      	cmp	r6, r7
 800c052:	d900      	bls.n	800c056 <__ssputs_r+0x86>
 800c054:	463e      	mov	r6, r7
 800c056:	6820      	ldr	r0, [r4, #0]
 800c058:	4632      	mov	r2, r6
 800c05a:	4641      	mov	r1, r8
 800c05c:	f000 f97e 	bl	800c35c <memmove>
 800c060:	68a3      	ldr	r3, [r4, #8]
 800c062:	1b9b      	subs	r3, r3, r6
 800c064:	60a3      	str	r3, [r4, #8]
 800c066:	6823      	ldr	r3, [r4, #0]
 800c068:	4433      	add	r3, r6
 800c06a:	6023      	str	r3, [r4, #0]
 800c06c:	2000      	movs	r0, #0
 800c06e:	e7db      	b.n	800c028 <__ssputs_r+0x58>
 800c070:	462a      	mov	r2, r5
 800c072:	f000 f999 	bl	800c3a8 <_realloc_r>
 800c076:	4606      	mov	r6, r0
 800c078:	2800      	cmp	r0, #0
 800c07a:	d1e1      	bne.n	800c040 <__ssputs_r+0x70>
 800c07c:	6921      	ldr	r1, [r4, #16]
 800c07e:	4650      	mov	r0, sl
 800c080:	f7ff fec6 	bl	800be10 <_free_r>
 800c084:	e7c7      	b.n	800c016 <__ssputs_r+0x46>
	...

0800c088 <_svfiprintf_r>:
 800c088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c08c:	4698      	mov	r8, r3
 800c08e:	898b      	ldrh	r3, [r1, #12]
 800c090:	061b      	lsls	r3, r3, #24
 800c092:	b09d      	sub	sp, #116	; 0x74
 800c094:	4607      	mov	r7, r0
 800c096:	460d      	mov	r5, r1
 800c098:	4614      	mov	r4, r2
 800c09a:	d50e      	bpl.n	800c0ba <_svfiprintf_r+0x32>
 800c09c:	690b      	ldr	r3, [r1, #16]
 800c09e:	b963      	cbnz	r3, 800c0ba <_svfiprintf_r+0x32>
 800c0a0:	2140      	movs	r1, #64	; 0x40
 800c0a2:	f7ff ff21 	bl	800bee8 <_malloc_r>
 800c0a6:	6028      	str	r0, [r5, #0]
 800c0a8:	6128      	str	r0, [r5, #16]
 800c0aa:	b920      	cbnz	r0, 800c0b6 <_svfiprintf_r+0x2e>
 800c0ac:	230c      	movs	r3, #12
 800c0ae:	603b      	str	r3, [r7, #0]
 800c0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b4:	e0d1      	b.n	800c25a <_svfiprintf_r+0x1d2>
 800c0b6:	2340      	movs	r3, #64	; 0x40
 800c0b8:	616b      	str	r3, [r5, #20]
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c0be:	2320      	movs	r3, #32
 800c0c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0c8:	2330      	movs	r3, #48	; 0x30
 800c0ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c274 <_svfiprintf_r+0x1ec>
 800c0ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0d2:	f04f 0901 	mov.w	r9, #1
 800c0d6:	4623      	mov	r3, r4
 800c0d8:	469a      	mov	sl, r3
 800c0da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0de:	b10a      	cbz	r2, 800c0e4 <_svfiprintf_r+0x5c>
 800c0e0:	2a25      	cmp	r2, #37	; 0x25
 800c0e2:	d1f9      	bne.n	800c0d8 <_svfiprintf_r+0x50>
 800c0e4:	ebba 0b04 	subs.w	fp, sl, r4
 800c0e8:	d00b      	beq.n	800c102 <_svfiprintf_r+0x7a>
 800c0ea:	465b      	mov	r3, fp
 800c0ec:	4622      	mov	r2, r4
 800c0ee:	4629      	mov	r1, r5
 800c0f0:	4638      	mov	r0, r7
 800c0f2:	f7ff ff6d 	bl	800bfd0 <__ssputs_r>
 800c0f6:	3001      	adds	r0, #1
 800c0f8:	f000 80aa 	beq.w	800c250 <_svfiprintf_r+0x1c8>
 800c0fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0fe:	445a      	add	r2, fp
 800c100:	9209      	str	r2, [sp, #36]	; 0x24
 800c102:	f89a 3000 	ldrb.w	r3, [sl]
 800c106:	2b00      	cmp	r3, #0
 800c108:	f000 80a2 	beq.w	800c250 <_svfiprintf_r+0x1c8>
 800c10c:	2300      	movs	r3, #0
 800c10e:	f04f 32ff 	mov.w	r2, #4294967295
 800c112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c116:	f10a 0a01 	add.w	sl, sl, #1
 800c11a:	9304      	str	r3, [sp, #16]
 800c11c:	9307      	str	r3, [sp, #28]
 800c11e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c122:	931a      	str	r3, [sp, #104]	; 0x68
 800c124:	4654      	mov	r4, sl
 800c126:	2205      	movs	r2, #5
 800c128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c12c:	4851      	ldr	r0, [pc, #324]	; (800c274 <_svfiprintf_r+0x1ec>)
 800c12e:	f7f4 f857 	bl	80001e0 <memchr>
 800c132:	9a04      	ldr	r2, [sp, #16]
 800c134:	b9d8      	cbnz	r0, 800c16e <_svfiprintf_r+0xe6>
 800c136:	06d0      	lsls	r0, r2, #27
 800c138:	bf44      	itt	mi
 800c13a:	2320      	movmi	r3, #32
 800c13c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c140:	0711      	lsls	r1, r2, #28
 800c142:	bf44      	itt	mi
 800c144:	232b      	movmi	r3, #43	; 0x2b
 800c146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c14a:	f89a 3000 	ldrb.w	r3, [sl]
 800c14e:	2b2a      	cmp	r3, #42	; 0x2a
 800c150:	d015      	beq.n	800c17e <_svfiprintf_r+0xf6>
 800c152:	9a07      	ldr	r2, [sp, #28]
 800c154:	4654      	mov	r4, sl
 800c156:	2000      	movs	r0, #0
 800c158:	f04f 0c0a 	mov.w	ip, #10
 800c15c:	4621      	mov	r1, r4
 800c15e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c162:	3b30      	subs	r3, #48	; 0x30
 800c164:	2b09      	cmp	r3, #9
 800c166:	d94e      	bls.n	800c206 <_svfiprintf_r+0x17e>
 800c168:	b1b0      	cbz	r0, 800c198 <_svfiprintf_r+0x110>
 800c16a:	9207      	str	r2, [sp, #28]
 800c16c:	e014      	b.n	800c198 <_svfiprintf_r+0x110>
 800c16e:	eba0 0308 	sub.w	r3, r0, r8
 800c172:	fa09 f303 	lsl.w	r3, r9, r3
 800c176:	4313      	orrs	r3, r2
 800c178:	9304      	str	r3, [sp, #16]
 800c17a:	46a2      	mov	sl, r4
 800c17c:	e7d2      	b.n	800c124 <_svfiprintf_r+0x9c>
 800c17e:	9b03      	ldr	r3, [sp, #12]
 800c180:	1d19      	adds	r1, r3, #4
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	9103      	str	r1, [sp, #12]
 800c186:	2b00      	cmp	r3, #0
 800c188:	bfbb      	ittet	lt
 800c18a:	425b      	neglt	r3, r3
 800c18c:	f042 0202 	orrlt.w	r2, r2, #2
 800c190:	9307      	strge	r3, [sp, #28]
 800c192:	9307      	strlt	r3, [sp, #28]
 800c194:	bfb8      	it	lt
 800c196:	9204      	strlt	r2, [sp, #16]
 800c198:	7823      	ldrb	r3, [r4, #0]
 800c19a:	2b2e      	cmp	r3, #46	; 0x2e
 800c19c:	d10c      	bne.n	800c1b8 <_svfiprintf_r+0x130>
 800c19e:	7863      	ldrb	r3, [r4, #1]
 800c1a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c1a2:	d135      	bne.n	800c210 <_svfiprintf_r+0x188>
 800c1a4:	9b03      	ldr	r3, [sp, #12]
 800c1a6:	1d1a      	adds	r2, r3, #4
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	9203      	str	r2, [sp, #12]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	bfb8      	it	lt
 800c1b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1b4:	3402      	adds	r4, #2
 800c1b6:	9305      	str	r3, [sp, #20]
 800c1b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c284 <_svfiprintf_r+0x1fc>
 800c1bc:	7821      	ldrb	r1, [r4, #0]
 800c1be:	2203      	movs	r2, #3
 800c1c0:	4650      	mov	r0, sl
 800c1c2:	f7f4 f80d 	bl	80001e0 <memchr>
 800c1c6:	b140      	cbz	r0, 800c1da <_svfiprintf_r+0x152>
 800c1c8:	2340      	movs	r3, #64	; 0x40
 800c1ca:	eba0 000a 	sub.w	r0, r0, sl
 800c1ce:	fa03 f000 	lsl.w	r0, r3, r0
 800c1d2:	9b04      	ldr	r3, [sp, #16]
 800c1d4:	4303      	orrs	r3, r0
 800c1d6:	3401      	adds	r4, #1
 800c1d8:	9304      	str	r3, [sp, #16]
 800c1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1de:	4826      	ldr	r0, [pc, #152]	; (800c278 <_svfiprintf_r+0x1f0>)
 800c1e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1e4:	2206      	movs	r2, #6
 800c1e6:	f7f3 fffb 	bl	80001e0 <memchr>
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d038      	beq.n	800c260 <_svfiprintf_r+0x1d8>
 800c1ee:	4b23      	ldr	r3, [pc, #140]	; (800c27c <_svfiprintf_r+0x1f4>)
 800c1f0:	bb1b      	cbnz	r3, 800c23a <_svfiprintf_r+0x1b2>
 800c1f2:	9b03      	ldr	r3, [sp, #12]
 800c1f4:	3307      	adds	r3, #7
 800c1f6:	f023 0307 	bic.w	r3, r3, #7
 800c1fa:	3308      	adds	r3, #8
 800c1fc:	9303      	str	r3, [sp, #12]
 800c1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c200:	4433      	add	r3, r6
 800c202:	9309      	str	r3, [sp, #36]	; 0x24
 800c204:	e767      	b.n	800c0d6 <_svfiprintf_r+0x4e>
 800c206:	fb0c 3202 	mla	r2, ip, r2, r3
 800c20a:	460c      	mov	r4, r1
 800c20c:	2001      	movs	r0, #1
 800c20e:	e7a5      	b.n	800c15c <_svfiprintf_r+0xd4>
 800c210:	2300      	movs	r3, #0
 800c212:	3401      	adds	r4, #1
 800c214:	9305      	str	r3, [sp, #20]
 800c216:	4619      	mov	r1, r3
 800c218:	f04f 0c0a 	mov.w	ip, #10
 800c21c:	4620      	mov	r0, r4
 800c21e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c222:	3a30      	subs	r2, #48	; 0x30
 800c224:	2a09      	cmp	r2, #9
 800c226:	d903      	bls.n	800c230 <_svfiprintf_r+0x1a8>
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d0c5      	beq.n	800c1b8 <_svfiprintf_r+0x130>
 800c22c:	9105      	str	r1, [sp, #20]
 800c22e:	e7c3      	b.n	800c1b8 <_svfiprintf_r+0x130>
 800c230:	fb0c 2101 	mla	r1, ip, r1, r2
 800c234:	4604      	mov	r4, r0
 800c236:	2301      	movs	r3, #1
 800c238:	e7f0      	b.n	800c21c <_svfiprintf_r+0x194>
 800c23a:	ab03      	add	r3, sp, #12
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	462a      	mov	r2, r5
 800c240:	4b0f      	ldr	r3, [pc, #60]	; (800c280 <_svfiprintf_r+0x1f8>)
 800c242:	a904      	add	r1, sp, #16
 800c244:	4638      	mov	r0, r7
 800c246:	f7fc fa23 	bl	8008690 <_printf_float>
 800c24a:	1c42      	adds	r2, r0, #1
 800c24c:	4606      	mov	r6, r0
 800c24e:	d1d6      	bne.n	800c1fe <_svfiprintf_r+0x176>
 800c250:	89ab      	ldrh	r3, [r5, #12]
 800c252:	065b      	lsls	r3, r3, #25
 800c254:	f53f af2c 	bmi.w	800c0b0 <_svfiprintf_r+0x28>
 800c258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c25a:	b01d      	add	sp, #116	; 0x74
 800c25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c260:	ab03      	add	r3, sp, #12
 800c262:	9300      	str	r3, [sp, #0]
 800c264:	462a      	mov	r2, r5
 800c266:	4b06      	ldr	r3, [pc, #24]	; (800c280 <_svfiprintf_r+0x1f8>)
 800c268:	a904      	add	r1, sp, #16
 800c26a:	4638      	mov	r0, r7
 800c26c:	f7fc fcb4 	bl	8008bd8 <_printf_i>
 800c270:	e7eb      	b.n	800c24a <_svfiprintf_r+0x1c2>
 800c272:	bf00      	nop
 800c274:	0800d2fc 	.word	0x0800d2fc
 800c278:	0800d306 	.word	0x0800d306
 800c27c:	08008691 	.word	0x08008691
 800c280:	0800bfd1 	.word	0x0800bfd1
 800c284:	0800d302 	.word	0x0800d302

0800c288 <nan>:
 800c288:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c290 <nan+0x8>
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	00000000 	.word	0x00000000
 800c294:	7ff80000 	.word	0x7ff80000

0800c298 <_sbrk_r>:
 800c298:	b538      	push	{r3, r4, r5, lr}
 800c29a:	4d06      	ldr	r5, [pc, #24]	; (800c2b4 <_sbrk_r+0x1c>)
 800c29c:	2300      	movs	r3, #0
 800c29e:	4604      	mov	r4, r0
 800c2a0:	4608      	mov	r0, r1
 800c2a2:	602b      	str	r3, [r5, #0]
 800c2a4:	f7f5 f962 	bl	800156c <_sbrk>
 800c2a8:	1c43      	adds	r3, r0, #1
 800c2aa:	d102      	bne.n	800c2b2 <_sbrk_r+0x1a>
 800c2ac:	682b      	ldr	r3, [r5, #0]
 800c2ae:	b103      	cbz	r3, 800c2b2 <_sbrk_r+0x1a>
 800c2b0:	6023      	str	r3, [r4, #0]
 800c2b2:	bd38      	pop	{r3, r4, r5, pc}
 800c2b4:	20001f98 	.word	0x20001f98

0800c2b8 <strncmp>:
 800c2b8:	b510      	push	{r4, lr}
 800c2ba:	b17a      	cbz	r2, 800c2dc <strncmp+0x24>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	3901      	subs	r1, #1
 800c2c0:	1884      	adds	r4, r0, r2
 800c2c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c2c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c2ca:	4290      	cmp	r0, r2
 800c2cc:	d101      	bne.n	800c2d2 <strncmp+0x1a>
 800c2ce:	42a3      	cmp	r3, r4
 800c2d0:	d101      	bne.n	800c2d6 <strncmp+0x1e>
 800c2d2:	1a80      	subs	r0, r0, r2
 800c2d4:	bd10      	pop	{r4, pc}
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	d1f3      	bne.n	800c2c2 <strncmp+0xa>
 800c2da:	e7fa      	b.n	800c2d2 <strncmp+0x1a>
 800c2dc:	4610      	mov	r0, r2
 800c2de:	e7f9      	b.n	800c2d4 <strncmp+0x1c>

0800c2e0 <__ascii_wctomb>:
 800c2e0:	b149      	cbz	r1, 800c2f6 <__ascii_wctomb+0x16>
 800c2e2:	2aff      	cmp	r2, #255	; 0xff
 800c2e4:	bf85      	ittet	hi
 800c2e6:	238a      	movhi	r3, #138	; 0x8a
 800c2e8:	6003      	strhi	r3, [r0, #0]
 800c2ea:	700a      	strbls	r2, [r1, #0]
 800c2ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800c2f0:	bf98      	it	ls
 800c2f2:	2001      	movls	r0, #1
 800c2f4:	4770      	bx	lr
 800c2f6:	4608      	mov	r0, r1
 800c2f8:	4770      	bx	lr
	...

0800c2fc <__assert_func>:
 800c2fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2fe:	4614      	mov	r4, r2
 800c300:	461a      	mov	r2, r3
 800c302:	4b09      	ldr	r3, [pc, #36]	; (800c328 <__assert_func+0x2c>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4605      	mov	r5, r0
 800c308:	68d8      	ldr	r0, [r3, #12]
 800c30a:	b14c      	cbz	r4, 800c320 <__assert_func+0x24>
 800c30c:	4b07      	ldr	r3, [pc, #28]	; (800c32c <__assert_func+0x30>)
 800c30e:	9100      	str	r1, [sp, #0]
 800c310:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c314:	4906      	ldr	r1, [pc, #24]	; (800c330 <__assert_func+0x34>)
 800c316:	462b      	mov	r3, r5
 800c318:	f000 f80e 	bl	800c338 <fiprintf>
 800c31c:	f000 fa8c 	bl	800c838 <abort>
 800c320:	4b04      	ldr	r3, [pc, #16]	; (800c334 <__assert_func+0x38>)
 800c322:	461c      	mov	r4, r3
 800c324:	e7f3      	b.n	800c30e <__assert_func+0x12>
 800c326:	bf00      	nop
 800c328:	200000fc 	.word	0x200000fc
 800c32c:	0800d30d 	.word	0x0800d30d
 800c330:	0800d31a 	.word	0x0800d31a
 800c334:	0800d348 	.word	0x0800d348

0800c338 <fiprintf>:
 800c338:	b40e      	push	{r1, r2, r3}
 800c33a:	b503      	push	{r0, r1, lr}
 800c33c:	4601      	mov	r1, r0
 800c33e:	ab03      	add	r3, sp, #12
 800c340:	4805      	ldr	r0, [pc, #20]	; (800c358 <fiprintf+0x20>)
 800c342:	f853 2b04 	ldr.w	r2, [r3], #4
 800c346:	6800      	ldr	r0, [r0, #0]
 800c348:	9301      	str	r3, [sp, #4]
 800c34a:	f000 f885 	bl	800c458 <_vfiprintf_r>
 800c34e:	b002      	add	sp, #8
 800c350:	f85d eb04 	ldr.w	lr, [sp], #4
 800c354:	b003      	add	sp, #12
 800c356:	4770      	bx	lr
 800c358:	200000fc 	.word	0x200000fc

0800c35c <memmove>:
 800c35c:	4288      	cmp	r0, r1
 800c35e:	b510      	push	{r4, lr}
 800c360:	eb01 0402 	add.w	r4, r1, r2
 800c364:	d902      	bls.n	800c36c <memmove+0x10>
 800c366:	4284      	cmp	r4, r0
 800c368:	4623      	mov	r3, r4
 800c36a:	d807      	bhi.n	800c37c <memmove+0x20>
 800c36c:	1e43      	subs	r3, r0, #1
 800c36e:	42a1      	cmp	r1, r4
 800c370:	d008      	beq.n	800c384 <memmove+0x28>
 800c372:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c376:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c37a:	e7f8      	b.n	800c36e <memmove+0x12>
 800c37c:	4402      	add	r2, r0
 800c37e:	4601      	mov	r1, r0
 800c380:	428a      	cmp	r2, r1
 800c382:	d100      	bne.n	800c386 <memmove+0x2a>
 800c384:	bd10      	pop	{r4, pc}
 800c386:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c38a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c38e:	e7f7      	b.n	800c380 <memmove+0x24>

0800c390 <__malloc_lock>:
 800c390:	4801      	ldr	r0, [pc, #4]	; (800c398 <__malloc_lock+0x8>)
 800c392:	f000 bc11 	b.w	800cbb8 <__retarget_lock_acquire_recursive>
 800c396:	bf00      	nop
 800c398:	20001f9c 	.word	0x20001f9c

0800c39c <__malloc_unlock>:
 800c39c:	4801      	ldr	r0, [pc, #4]	; (800c3a4 <__malloc_unlock+0x8>)
 800c39e:	f000 bc0c 	b.w	800cbba <__retarget_lock_release_recursive>
 800c3a2:	bf00      	nop
 800c3a4:	20001f9c 	.word	0x20001f9c

0800c3a8 <_realloc_r>:
 800c3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ac:	4680      	mov	r8, r0
 800c3ae:	4614      	mov	r4, r2
 800c3b0:	460e      	mov	r6, r1
 800c3b2:	b921      	cbnz	r1, 800c3be <_realloc_r+0x16>
 800c3b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3b8:	4611      	mov	r1, r2
 800c3ba:	f7ff bd95 	b.w	800bee8 <_malloc_r>
 800c3be:	b92a      	cbnz	r2, 800c3cc <_realloc_r+0x24>
 800c3c0:	f7ff fd26 	bl	800be10 <_free_r>
 800c3c4:	4625      	mov	r5, r4
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3cc:	f000 fc5c 	bl	800cc88 <_malloc_usable_size_r>
 800c3d0:	4284      	cmp	r4, r0
 800c3d2:	4607      	mov	r7, r0
 800c3d4:	d802      	bhi.n	800c3dc <_realloc_r+0x34>
 800c3d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c3da:	d812      	bhi.n	800c402 <_realloc_r+0x5a>
 800c3dc:	4621      	mov	r1, r4
 800c3de:	4640      	mov	r0, r8
 800c3e0:	f7ff fd82 	bl	800bee8 <_malloc_r>
 800c3e4:	4605      	mov	r5, r0
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	d0ed      	beq.n	800c3c6 <_realloc_r+0x1e>
 800c3ea:	42bc      	cmp	r4, r7
 800c3ec:	4622      	mov	r2, r4
 800c3ee:	4631      	mov	r1, r6
 800c3f0:	bf28      	it	cs
 800c3f2:	463a      	movcs	r2, r7
 800c3f4:	f7fc f896 	bl	8008524 <memcpy>
 800c3f8:	4631      	mov	r1, r6
 800c3fa:	4640      	mov	r0, r8
 800c3fc:	f7ff fd08 	bl	800be10 <_free_r>
 800c400:	e7e1      	b.n	800c3c6 <_realloc_r+0x1e>
 800c402:	4635      	mov	r5, r6
 800c404:	e7df      	b.n	800c3c6 <_realloc_r+0x1e>

0800c406 <__sfputc_r>:
 800c406:	6893      	ldr	r3, [r2, #8]
 800c408:	3b01      	subs	r3, #1
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	b410      	push	{r4}
 800c40e:	6093      	str	r3, [r2, #8]
 800c410:	da08      	bge.n	800c424 <__sfputc_r+0x1e>
 800c412:	6994      	ldr	r4, [r2, #24]
 800c414:	42a3      	cmp	r3, r4
 800c416:	db01      	blt.n	800c41c <__sfputc_r+0x16>
 800c418:	290a      	cmp	r1, #10
 800c41a:	d103      	bne.n	800c424 <__sfputc_r+0x1e>
 800c41c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c420:	f000 b94a 	b.w	800c6b8 <__swbuf_r>
 800c424:	6813      	ldr	r3, [r2, #0]
 800c426:	1c58      	adds	r0, r3, #1
 800c428:	6010      	str	r0, [r2, #0]
 800c42a:	7019      	strb	r1, [r3, #0]
 800c42c:	4608      	mov	r0, r1
 800c42e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <__sfputs_r>:
 800c434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c436:	4606      	mov	r6, r0
 800c438:	460f      	mov	r7, r1
 800c43a:	4614      	mov	r4, r2
 800c43c:	18d5      	adds	r5, r2, r3
 800c43e:	42ac      	cmp	r4, r5
 800c440:	d101      	bne.n	800c446 <__sfputs_r+0x12>
 800c442:	2000      	movs	r0, #0
 800c444:	e007      	b.n	800c456 <__sfputs_r+0x22>
 800c446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c44a:	463a      	mov	r2, r7
 800c44c:	4630      	mov	r0, r6
 800c44e:	f7ff ffda 	bl	800c406 <__sfputc_r>
 800c452:	1c43      	adds	r3, r0, #1
 800c454:	d1f3      	bne.n	800c43e <__sfputs_r+0xa>
 800c456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c458 <_vfiprintf_r>:
 800c458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c45c:	460d      	mov	r5, r1
 800c45e:	b09d      	sub	sp, #116	; 0x74
 800c460:	4614      	mov	r4, r2
 800c462:	4698      	mov	r8, r3
 800c464:	4606      	mov	r6, r0
 800c466:	b118      	cbz	r0, 800c470 <_vfiprintf_r+0x18>
 800c468:	6983      	ldr	r3, [r0, #24]
 800c46a:	b90b      	cbnz	r3, 800c470 <_vfiprintf_r+0x18>
 800c46c:	f000 fb06 	bl	800ca7c <__sinit>
 800c470:	4b89      	ldr	r3, [pc, #548]	; (800c698 <_vfiprintf_r+0x240>)
 800c472:	429d      	cmp	r5, r3
 800c474:	d11b      	bne.n	800c4ae <_vfiprintf_r+0x56>
 800c476:	6875      	ldr	r5, [r6, #4]
 800c478:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c47a:	07d9      	lsls	r1, r3, #31
 800c47c:	d405      	bmi.n	800c48a <_vfiprintf_r+0x32>
 800c47e:	89ab      	ldrh	r3, [r5, #12]
 800c480:	059a      	lsls	r2, r3, #22
 800c482:	d402      	bmi.n	800c48a <_vfiprintf_r+0x32>
 800c484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c486:	f000 fb97 	bl	800cbb8 <__retarget_lock_acquire_recursive>
 800c48a:	89ab      	ldrh	r3, [r5, #12]
 800c48c:	071b      	lsls	r3, r3, #28
 800c48e:	d501      	bpl.n	800c494 <_vfiprintf_r+0x3c>
 800c490:	692b      	ldr	r3, [r5, #16]
 800c492:	b9eb      	cbnz	r3, 800c4d0 <_vfiprintf_r+0x78>
 800c494:	4629      	mov	r1, r5
 800c496:	4630      	mov	r0, r6
 800c498:	f000 f960 	bl	800c75c <__swsetup_r>
 800c49c:	b1c0      	cbz	r0, 800c4d0 <_vfiprintf_r+0x78>
 800c49e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4a0:	07dc      	lsls	r4, r3, #31
 800c4a2:	d50e      	bpl.n	800c4c2 <_vfiprintf_r+0x6a>
 800c4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a8:	b01d      	add	sp, #116	; 0x74
 800c4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ae:	4b7b      	ldr	r3, [pc, #492]	; (800c69c <_vfiprintf_r+0x244>)
 800c4b0:	429d      	cmp	r5, r3
 800c4b2:	d101      	bne.n	800c4b8 <_vfiprintf_r+0x60>
 800c4b4:	68b5      	ldr	r5, [r6, #8]
 800c4b6:	e7df      	b.n	800c478 <_vfiprintf_r+0x20>
 800c4b8:	4b79      	ldr	r3, [pc, #484]	; (800c6a0 <_vfiprintf_r+0x248>)
 800c4ba:	429d      	cmp	r5, r3
 800c4bc:	bf08      	it	eq
 800c4be:	68f5      	ldreq	r5, [r6, #12]
 800c4c0:	e7da      	b.n	800c478 <_vfiprintf_r+0x20>
 800c4c2:	89ab      	ldrh	r3, [r5, #12]
 800c4c4:	0598      	lsls	r0, r3, #22
 800c4c6:	d4ed      	bmi.n	800c4a4 <_vfiprintf_r+0x4c>
 800c4c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4ca:	f000 fb76 	bl	800cbba <__retarget_lock_release_recursive>
 800c4ce:	e7e9      	b.n	800c4a4 <_vfiprintf_r+0x4c>
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c4d4:	2320      	movs	r3, #32
 800c4d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4da:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4de:	2330      	movs	r3, #48	; 0x30
 800c4e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c6a4 <_vfiprintf_r+0x24c>
 800c4e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4e8:	f04f 0901 	mov.w	r9, #1
 800c4ec:	4623      	mov	r3, r4
 800c4ee:	469a      	mov	sl, r3
 800c4f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4f4:	b10a      	cbz	r2, 800c4fa <_vfiprintf_r+0xa2>
 800c4f6:	2a25      	cmp	r2, #37	; 0x25
 800c4f8:	d1f9      	bne.n	800c4ee <_vfiprintf_r+0x96>
 800c4fa:	ebba 0b04 	subs.w	fp, sl, r4
 800c4fe:	d00b      	beq.n	800c518 <_vfiprintf_r+0xc0>
 800c500:	465b      	mov	r3, fp
 800c502:	4622      	mov	r2, r4
 800c504:	4629      	mov	r1, r5
 800c506:	4630      	mov	r0, r6
 800c508:	f7ff ff94 	bl	800c434 <__sfputs_r>
 800c50c:	3001      	adds	r0, #1
 800c50e:	f000 80aa 	beq.w	800c666 <_vfiprintf_r+0x20e>
 800c512:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c514:	445a      	add	r2, fp
 800c516:	9209      	str	r2, [sp, #36]	; 0x24
 800c518:	f89a 3000 	ldrb.w	r3, [sl]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f000 80a2 	beq.w	800c666 <_vfiprintf_r+0x20e>
 800c522:	2300      	movs	r3, #0
 800c524:	f04f 32ff 	mov.w	r2, #4294967295
 800c528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c52c:	f10a 0a01 	add.w	sl, sl, #1
 800c530:	9304      	str	r3, [sp, #16]
 800c532:	9307      	str	r3, [sp, #28]
 800c534:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c538:	931a      	str	r3, [sp, #104]	; 0x68
 800c53a:	4654      	mov	r4, sl
 800c53c:	2205      	movs	r2, #5
 800c53e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c542:	4858      	ldr	r0, [pc, #352]	; (800c6a4 <_vfiprintf_r+0x24c>)
 800c544:	f7f3 fe4c 	bl	80001e0 <memchr>
 800c548:	9a04      	ldr	r2, [sp, #16]
 800c54a:	b9d8      	cbnz	r0, 800c584 <_vfiprintf_r+0x12c>
 800c54c:	06d1      	lsls	r1, r2, #27
 800c54e:	bf44      	itt	mi
 800c550:	2320      	movmi	r3, #32
 800c552:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c556:	0713      	lsls	r3, r2, #28
 800c558:	bf44      	itt	mi
 800c55a:	232b      	movmi	r3, #43	; 0x2b
 800c55c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c560:	f89a 3000 	ldrb.w	r3, [sl]
 800c564:	2b2a      	cmp	r3, #42	; 0x2a
 800c566:	d015      	beq.n	800c594 <_vfiprintf_r+0x13c>
 800c568:	9a07      	ldr	r2, [sp, #28]
 800c56a:	4654      	mov	r4, sl
 800c56c:	2000      	movs	r0, #0
 800c56e:	f04f 0c0a 	mov.w	ip, #10
 800c572:	4621      	mov	r1, r4
 800c574:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c578:	3b30      	subs	r3, #48	; 0x30
 800c57a:	2b09      	cmp	r3, #9
 800c57c:	d94e      	bls.n	800c61c <_vfiprintf_r+0x1c4>
 800c57e:	b1b0      	cbz	r0, 800c5ae <_vfiprintf_r+0x156>
 800c580:	9207      	str	r2, [sp, #28]
 800c582:	e014      	b.n	800c5ae <_vfiprintf_r+0x156>
 800c584:	eba0 0308 	sub.w	r3, r0, r8
 800c588:	fa09 f303 	lsl.w	r3, r9, r3
 800c58c:	4313      	orrs	r3, r2
 800c58e:	9304      	str	r3, [sp, #16]
 800c590:	46a2      	mov	sl, r4
 800c592:	e7d2      	b.n	800c53a <_vfiprintf_r+0xe2>
 800c594:	9b03      	ldr	r3, [sp, #12]
 800c596:	1d19      	adds	r1, r3, #4
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	9103      	str	r1, [sp, #12]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	bfbb      	ittet	lt
 800c5a0:	425b      	neglt	r3, r3
 800c5a2:	f042 0202 	orrlt.w	r2, r2, #2
 800c5a6:	9307      	strge	r3, [sp, #28]
 800c5a8:	9307      	strlt	r3, [sp, #28]
 800c5aa:	bfb8      	it	lt
 800c5ac:	9204      	strlt	r2, [sp, #16]
 800c5ae:	7823      	ldrb	r3, [r4, #0]
 800c5b0:	2b2e      	cmp	r3, #46	; 0x2e
 800c5b2:	d10c      	bne.n	800c5ce <_vfiprintf_r+0x176>
 800c5b4:	7863      	ldrb	r3, [r4, #1]
 800c5b6:	2b2a      	cmp	r3, #42	; 0x2a
 800c5b8:	d135      	bne.n	800c626 <_vfiprintf_r+0x1ce>
 800c5ba:	9b03      	ldr	r3, [sp, #12]
 800c5bc:	1d1a      	adds	r2, r3, #4
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	9203      	str	r2, [sp, #12]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	bfb8      	it	lt
 800c5c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5ca:	3402      	adds	r4, #2
 800c5cc:	9305      	str	r3, [sp, #20]
 800c5ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c6b4 <_vfiprintf_r+0x25c>
 800c5d2:	7821      	ldrb	r1, [r4, #0]
 800c5d4:	2203      	movs	r2, #3
 800c5d6:	4650      	mov	r0, sl
 800c5d8:	f7f3 fe02 	bl	80001e0 <memchr>
 800c5dc:	b140      	cbz	r0, 800c5f0 <_vfiprintf_r+0x198>
 800c5de:	2340      	movs	r3, #64	; 0x40
 800c5e0:	eba0 000a 	sub.w	r0, r0, sl
 800c5e4:	fa03 f000 	lsl.w	r0, r3, r0
 800c5e8:	9b04      	ldr	r3, [sp, #16]
 800c5ea:	4303      	orrs	r3, r0
 800c5ec:	3401      	adds	r4, #1
 800c5ee:	9304      	str	r3, [sp, #16]
 800c5f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5f4:	482c      	ldr	r0, [pc, #176]	; (800c6a8 <_vfiprintf_r+0x250>)
 800c5f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5fa:	2206      	movs	r2, #6
 800c5fc:	f7f3 fdf0 	bl	80001e0 <memchr>
 800c600:	2800      	cmp	r0, #0
 800c602:	d03f      	beq.n	800c684 <_vfiprintf_r+0x22c>
 800c604:	4b29      	ldr	r3, [pc, #164]	; (800c6ac <_vfiprintf_r+0x254>)
 800c606:	bb1b      	cbnz	r3, 800c650 <_vfiprintf_r+0x1f8>
 800c608:	9b03      	ldr	r3, [sp, #12]
 800c60a:	3307      	adds	r3, #7
 800c60c:	f023 0307 	bic.w	r3, r3, #7
 800c610:	3308      	adds	r3, #8
 800c612:	9303      	str	r3, [sp, #12]
 800c614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c616:	443b      	add	r3, r7
 800c618:	9309      	str	r3, [sp, #36]	; 0x24
 800c61a:	e767      	b.n	800c4ec <_vfiprintf_r+0x94>
 800c61c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c620:	460c      	mov	r4, r1
 800c622:	2001      	movs	r0, #1
 800c624:	e7a5      	b.n	800c572 <_vfiprintf_r+0x11a>
 800c626:	2300      	movs	r3, #0
 800c628:	3401      	adds	r4, #1
 800c62a:	9305      	str	r3, [sp, #20]
 800c62c:	4619      	mov	r1, r3
 800c62e:	f04f 0c0a 	mov.w	ip, #10
 800c632:	4620      	mov	r0, r4
 800c634:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c638:	3a30      	subs	r2, #48	; 0x30
 800c63a:	2a09      	cmp	r2, #9
 800c63c:	d903      	bls.n	800c646 <_vfiprintf_r+0x1ee>
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d0c5      	beq.n	800c5ce <_vfiprintf_r+0x176>
 800c642:	9105      	str	r1, [sp, #20]
 800c644:	e7c3      	b.n	800c5ce <_vfiprintf_r+0x176>
 800c646:	fb0c 2101 	mla	r1, ip, r1, r2
 800c64a:	4604      	mov	r4, r0
 800c64c:	2301      	movs	r3, #1
 800c64e:	e7f0      	b.n	800c632 <_vfiprintf_r+0x1da>
 800c650:	ab03      	add	r3, sp, #12
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	462a      	mov	r2, r5
 800c656:	4b16      	ldr	r3, [pc, #88]	; (800c6b0 <_vfiprintf_r+0x258>)
 800c658:	a904      	add	r1, sp, #16
 800c65a:	4630      	mov	r0, r6
 800c65c:	f7fc f818 	bl	8008690 <_printf_float>
 800c660:	4607      	mov	r7, r0
 800c662:	1c78      	adds	r0, r7, #1
 800c664:	d1d6      	bne.n	800c614 <_vfiprintf_r+0x1bc>
 800c666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c668:	07d9      	lsls	r1, r3, #31
 800c66a:	d405      	bmi.n	800c678 <_vfiprintf_r+0x220>
 800c66c:	89ab      	ldrh	r3, [r5, #12]
 800c66e:	059a      	lsls	r2, r3, #22
 800c670:	d402      	bmi.n	800c678 <_vfiprintf_r+0x220>
 800c672:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c674:	f000 faa1 	bl	800cbba <__retarget_lock_release_recursive>
 800c678:	89ab      	ldrh	r3, [r5, #12]
 800c67a:	065b      	lsls	r3, r3, #25
 800c67c:	f53f af12 	bmi.w	800c4a4 <_vfiprintf_r+0x4c>
 800c680:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c682:	e711      	b.n	800c4a8 <_vfiprintf_r+0x50>
 800c684:	ab03      	add	r3, sp, #12
 800c686:	9300      	str	r3, [sp, #0]
 800c688:	462a      	mov	r2, r5
 800c68a:	4b09      	ldr	r3, [pc, #36]	; (800c6b0 <_vfiprintf_r+0x258>)
 800c68c:	a904      	add	r1, sp, #16
 800c68e:	4630      	mov	r0, r6
 800c690:	f7fc faa2 	bl	8008bd8 <_printf_i>
 800c694:	e7e4      	b.n	800c660 <_vfiprintf_r+0x208>
 800c696:	bf00      	nop
 800c698:	0800d36c 	.word	0x0800d36c
 800c69c:	0800d38c 	.word	0x0800d38c
 800c6a0:	0800d34c 	.word	0x0800d34c
 800c6a4:	0800d2fc 	.word	0x0800d2fc
 800c6a8:	0800d306 	.word	0x0800d306
 800c6ac:	08008691 	.word	0x08008691
 800c6b0:	0800c435 	.word	0x0800c435
 800c6b4:	0800d302 	.word	0x0800d302

0800c6b8 <__swbuf_r>:
 800c6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ba:	460e      	mov	r6, r1
 800c6bc:	4614      	mov	r4, r2
 800c6be:	4605      	mov	r5, r0
 800c6c0:	b118      	cbz	r0, 800c6ca <__swbuf_r+0x12>
 800c6c2:	6983      	ldr	r3, [r0, #24]
 800c6c4:	b90b      	cbnz	r3, 800c6ca <__swbuf_r+0x12>
 800c6c6:	f000 f9d9 	bl	800ca7c <__sinit>
 800c6ca:	4b21      	ldr	r3, [pc, #132]	; (800c750 <__swbuf_r+0x98>)
 800c6cc:	429c      	cmp	r4, r3
 800c6ce:	d12b      	bne.n	800c728 <__swbuf_r+0x70>
 800c6d0:	686c      	ldr	r4, [r5, #4]
 800c6d2:	69a3      	ldr	r3, [r4, #24]
 800c6d4:	60a3      	str	r3, [r4, #8]
 800c6d6:	89a3      	ldrh	r3, [r4, #12]
 800c6d8:	071a      	lsls	r2, r3, #28
 800c6da:	d52f      	bpl.n	800c73c <__swbuf_r+0x84>
 800c6dc:	6923      	ldr	r3, [r4, #16]
 800c6de:	b36b      	cbz	r3, 800c73c <__swbuf_r+0x84>
 800c6e0:	6923      	ldr	r3, [r4, #16]
 800c6e2:	6820      	ldr	r0, [r4, #0]
 800c6e4:	1ac0      	subs	r0, r0, r3
 800c6e6:	6963      	ldr	r3, [r4, #20]
 800c6e8:	b2f6      	uxtb	r6, r6
 800c6ea:	4283      	cmp	r3, r0
 800c6ec:	4637      	mov	r7, r6
 800c6ee:	dc04      	bgt.n	800c6fa <__swbuf_r+0x42>
 800c6f0:	4621      	mov	r1, r4
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	f000 f92e 	bl	800c954 <_fflush_r>
 800c6f8:	bb30      	cbnz	r0, 800c748 <__swbuf_r+0x90>
 800c6fa:	68a3      	ldr	r3, [r4, #8]
 800c6fc:	3b01      	subs	r3, #1
 800c6fe:	60a3      	str	r3, [r4, #8]
 800c700:	6823      	ldr	r3, [r4, #0]
 800c702:	1c5a      	adds	r2, r3, #1
 800c704:	6022      	str	r2, [r4, #0]
 800c706:	701e      	strb	r6, [r3, #0]
 800c708:	6963      	ldr	r3, [r4, #20]
 800c70a:	3001      	adds	r0, #1
 800c70c:	4283      	cmp	r3, r0
 800c70e:	d004      	beq.n	800c71a <__swbuf_r+0x62>
 800c710:	89a3      	ldrh	r3, [r4, #12]
 800c712:	07db      	lsls	r3, r3, #31
 800c714:	d506      	bpl.n	800c724 <__swbuf_r+0x6c>
 800c716:	2e0a      	cmp	r6, #10
 800c718:	d104      	bne.n	800c724 <__swbuf_r+0x6c>
 800c71a:	4621      	mov	r1, r4
 800c71c:	4628      	mov	r0, r5
 800c71e:	f000 f919 	bl	800c954 <_fflush_r>
 800c722:	b988      	cbnz	r0, 800c748 <__swbuf_r+0x90>
 800c724:	4638      	mov	r0, r7
 800c726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c728:	4b0a      	ldr	r3, [pc, #40]	; (800c754 <__swbuf_r+0x9c>)
 800c72a:	429c      	cmp	r4, r3
 800c72c:	d101      	bne.n	800c732 <__swbuf_r+0x7a>
 800c72e:	68ac      	ldr	r4, [r5, #8]
 800c730:	e7cf      	b.n	800c6d2 <__swbuf_r+0x1a>
 800c732:	4b09      	ldr	r3, [pc, #36]	; (800c758 <__swbuf_r+0xa0>)
 800c734:	429c      	cmp	r4, r3
 800c736:	bf08      	it	eq
 800c738:	68ec      	ldreq	r4, [r5, #12]
 800c73a:	e7ca      	b.n	800c6d2 <__swbuf_r+0x1a>
 800c73c:	4621      	mov	r1, r4
 800c73e:	4628      	mov	r0, r5
 800c740:	f000 f80c 	bl	800c75c <__swsetup_r>
 800c744:	2800      	cmp	r0, #0
 800c746:	d0cb      	beq.n	800c6e0 <__swbuf_r+0x28>
 800c748:	f04f 37ff 	mov.w	r7, #4294967295
 800c74c:	e7ea      	b.n	800c724 <__swbuf_r+0x6c>
 800c74e:	bf00      	nop
 800c750:	0800d36c 	.word	0x0800d36c
 800c754:	0800d38c 	.word	0x0800d38c
 800c758:	0800d34c 	.word	0x0800d34c

0800c75c <__swsetup_r>:
 800c75c:	4b32      	ldr	r3, [pc, #200]	; (800c828 <__swsetup_r+0xcc>)
 800c75e:	b570      	push	{r4, r5, r6, lr}
 800c760:	681d      	ldr	r5, [r3, #0]
 800c762:	4606      	mov	r6, r0
 800c764:	460c      	mov	r4, r1
 800c766:	b125      	cbz	r5, 800c772 <__swsetup_r+0x16>
 800c768:	69ab      	ldr	r3, [r5, #24]
 800c76a:	b913      	cbnz	r3, 800c772 <__swsetup_r+0x16>
 800c76c:	4628      	mov	r0, r5
 800c76e:	f000 f985 	bl	800ca7c <__sinit>
 800c772:	4b2e      	ldr	r3, [pc, #184]	; (800c82c <__swsetup_r+0xd0>)
 800c774:	429c      	cmp	r4, r3
 800c776:	d10f      	bne.n	800c798 <__swsetup_r+0x3c>
 800c778:	686c      	ldr	r4, [r5, #4]
 800c77a:	89a3      	ldrh	r3, [r4, #12]
 800c77c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c780:	0719      	lsls	r1, r3, #28
 800c782:	d42c      	bmi.n	800c7de <__swsetup_r+0x82>
 800c784:	06dd      	lsls	r5, r3, #27
 800c786:	d411      	bmi.n	800c7ac <__swsetup_r+0x50>
 800c788:	2309      	movs	r3, #9
 800c78a:	6033      	str	r3, [r6, #0]
 800c78c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c790:	81a3      	strh	r3, [r4, #12]
 800c792:	f04f 30ff 	mov.w	r0, #4294967295
 800c796:	e03e      	b.n	800c816 <__swsetup_r+0xba>
 800c798:	4b25      	ldr	r3, [pc, #148]	; (800c830 <__swsetup_r+0xd4>)
 800c79a:	429c      	cmp	r4, r3
 800c79c:	d101      	bne.n	800c7a2 <__swsetup_r+0x46>
 800c79e:	68ac      	ldr	r4, [r5, #8]
 800c7a0:	e7eb      	b.n	800c77a <__swsetup_r+0x1e>
 800c7a2:	4b24      	ldr	r3, [pc, #144]	; (800c834 <__swsetup_r+0xd8>)
 800c7a4:	429c      	cmp	r4, r3
 800c7a6:	bf08      	it	eq
 800c7a8:	68ec      	ldreq	r4, [r5, #12]
 800c7aa:	e7e6      	b.n	800c77a <__swsetup_r+0x1e>
 800c7ac:	0758      	lsls	r0, r3, #29
 800c7ae:	d512      	bpl.n	800c7d6 <__swsetup_r+0x7a>
 800c7b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7b2:	b141      	cbz	r1, 800c7c6 <__swsetup_r+0x6a>
 800c7b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7b8:	4299      	cmp	r1, r3
 800c7ba:	d002      	beq.n	800c7c2 <__swsetup_r+0x66>
 800c7bc:	4630      	mov	r0, r6
 800c7be:	f7ff fb27 	bl	800be10 <_free_r>
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	6363      	str	r3, [r4, #52]	; 0x34
 800c7c6:	89a3      	ldrh	r3, [r4, #12]
 800c7c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c7cc:	81a3      	strh	r3, [r4, #12]
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	6063      	str	r3, [r4, #4]
 800c7d2:	6923      	ldr	r3, [r4, #16]
 800c7d4:	6023      	str	r3, [r4, #0]
 800c7d6:	89a3      	ldrh	r3, [r4, #12]
 800c7d8:	f043 0308 	orr.w	r3, r3, #8
 800c7dc:	81a3      	strh	r3, [r4, #12]
 800c7de:	6923      	ldr	r3, [r4, #16]
 800c7e0:	b94b      	cbnz	r3, 800c7f6 <__swsetup_r+0x9a>
 800c7e2:	89a3      	ldrh	r3, [r4, #12]
 800c7e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c7e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7ec:	d003      	beq.n	800c7f6 <__swsetup_r+0x9a>
 800c7ee:	4621      	mov	r1, r4
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	f000 fa09 	bl	800cc08 <__smakebuf_r>
 800c7f6:	89a0      	ldrh	r0, [r4, #12]
 800c7f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7fc:	f010 0301 	ands.w	r3, r0, #1
 800c800:	d00a      	beq.n	800c818 <__swsetup_r+0xbc>
 800c802:	2300      	movs	r3, #0
 800c804:	60a3      	str	r3, [r4, #8]
 800c806:	6963      	ldr	r3, [r4, #20]
 800c808:	425b      	negs	r3, r3
 800c80a:	61a3      	str	r3, [r4, #24]
 800c80c:	6923      	ldr	r3, [r4, #16]
 800c80e:	b943      	cbnz	r3, 800c822 <__swsetup_r+0xc6>
 800c810:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c814:	d1ba      	bne.n	800c78c <__swsetup_r+0x30>
 800c816:	bd70      	pop	{r4, r5, r6, pc}
 800c818:	0781      	lsls	r1, r0, #30
 800c81a:	bf58      	it	pl
 800c81c:	6963      	ldrpl	r3, [r4, #20]
 800c81e:	60a3      	str	r3, [r4, #8]
 800c820:	e7f4      	b.n	800c80c <__swsetup_r+0xb0>
 800c822:	2000      	movs	r0, #0
 800c824:	e7f7      	b.n	800c816 <__swsetup_r+0xba>
 800c826:	bf00      	nop
 800c828:	200000fc 	.word	0x200000fc
 800c82c:	0800d36c 	.word	0x0800d36c
 800c830:	0800d38c 	.word	0x0800d38c
 800c834:	0800d34c 	.word	0x0800d34c

0800c838 <abort>:
 800c838:	b508      	push	{r3, lr}
 800c83a:	2006      	movs	r0, #6
 800c83c:	f000 fa54 	bl	800cce8 <raise>
 800c840:	2001      	movs	r0, #1
 800c842:	f7f4 fe1b 	bl	800147c <_exit>
	...

0800c848 <__sflush_r>:
 800c848:	898a      	ldrh	r2, [r1, #12]
 800c84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c84e:	4605      	mov	r5, r0
 800c850:	0710      	lsls	r0, r2, #28
 800c852:	460c      	mov	r4, r1
 800c854:	d458      	bmi.n	800c908 <__sflush_r+0xc0>
 800c856:	684b      	ldr	r3, [r1, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	dc05      	bgt.n	800c868 <__sflush_r+0x20>
 800c85c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c85e:	2b00      	cmp	r3, #0
 800c860:	dc02      	bgt.n	800c868 <__sflush_r+0x20>
 800c862:	2000      	movs	r0, #0
 800c864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c86a:	2e00      	cmp	r6, #0
 800c86c:	d0f9      	beq.n	800c862 <__sflush_r+0x1a>
 800c86e:	2300      	movs	r3, #0
 800c870:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c874:	682f      	ldr	r7, [r5, #0]
 800c876:	602b      	str	r3, [r5, #0]
 800c878:	d032      	beq.n	800c8e0 <__sflush_r+0x98>
 800c87a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c87c:	89a3      	ldrh	r3, [r4, #12]
 800c87e:	075a      	lsls	r2, r3, #29
 800c880:	d505      	bpl.n	800c88e <__sflush_r+0x46>
 800c882:	6863      	ldr	r3, [r4, #4]
 800c884:	1ac0      	subs	r0, r0, r3
 800c886:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c888:	b10b      	cbz	r3, 800c88e <__sflush_r+0x46>
 800c88a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c88c:	1ac0      	subs	r0, r0, r3
 800c88e:	2300      	movs	r3, #0
 800c890:	4602      	mov	r2, r0
 800c892:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c894:	6a21      	ldr	r1, [r4, #32]
 800c896:	4628      	mov	r0, r5
 800c898:	47b0      	blx	r6
 800c89a:	1c43      	adds	r3, r0, #1
 800c89c:	89a3      	ldrh	r3, [r4, #12]
 800c89e:	d106      	bne.n	800c8ae <__sflush_r+0x66>
 800c8a0:	6829      	ldr	r1, [r5, #0]
 800c8a2:	291d      	cmp	r1, #29
 800c8a4:	d82c      	bhi.n	800c900 <__sflush_r+0xb8>
 800c8a6:	4a2a      	ldr	r2, [pc, #168]	; (800c950 <__sflush_r+0x108>)
 800c8a8:	40ca      	lsrs	r2, r1
 800c8aa:	07d6      	lsls	r6, r2, #31
 800c8ac:	d528      	bpl.n	800c900 <__sflush_r+0xb8>
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	6062      	str	r2, [r4, #4]
 800c8b2:	04d9      	lsls	r1, r3, #19
 800c8b4:	6922      	ldr	r2, [r4, #16]
 800c8b6:	6022      	str	r2, [r4, #0]
 800c8b8:	d504      	bpl.n	800c8c4 <__sflush_r+0x7c>
 800c8ba:	1c42      	adds	r2, r0, #1
 800c8bc:	d101      	bne.n	800c8c2 <__sflush_r+0x7a>
 800c8be:	682b      	ldr	r3, [r5, #0]
 800c8c0:	b903      	cbnz	r3, 800c8c4 <__sflush_r+0x7c>
 800c8c2:	6560      	str	r0, [r4, #84]	; 0x54
 800c8c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8c6:	602f      	str	r7, [r5, #0]
 800c8c8:	2900      	cmp	r1, #0
 800c8ca:	d0ca      	beq.n	800c862 <__sflush_r+0x1a>
 800c8cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8d0:	4299      	cmp	r1, r3
 800c8d2:	d002      	beq.n	800c8da <__sflush_r+0x92>
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	f7ff fa9b 	bl	800be10 <_free_r>
 800c8da:	2000      	movs	r0, #0
 800c8dc:	6360      	str	r0, [r4, #52]	; 0x34
 800c8de:	e7c1      	b.n	800c864 <__sflush_r+0x1c>
 800c8e0:	6a21      	ldr	r1, [r4, #32]
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	47b0      	blx	r6
 800c8e8:	1c41      	adds	r1, r0, #1
 800c8ea:	d1c7      	bne.n	800c87c <__sflush_r+0x34>
 800c8ec:	682b      	ldr	r3, [r5, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d0c4      	beq.n	800c87c <__sflush_r+0x34>
 800c8f2:	2b1d      	cmp	r3, #29
 800c8f4:	d001      	beq.n	800c8fa <__sflush_r+0xb2>
 800c8f6:	2b16      	cmp	r3, #22
 800c8f8:	d101      	bne.n	800c8fe <__sflush_r+0xb6>
 800c8fa:	602f      	str	r7, [r5, #0]
 800c8fc:	e7b1      	b.n	800c862 <__sflush_r+0x1a>
 800c8fe:	89a3      	ldrh	r3, [r4, #12]
 800c900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c904:	81a3      	strh	r3, [r4, #12]
 800c906:	e7ad      	b.n	800c864 <__sflush_r+0x1c>
 800c908:	690f      	ldr	r7, [r1, #16]
 800c90a:	2f00      	cmp	r7, #0
 800c90c:	d0a9      	beq.n	800c862 <__sflush_r+0x1a>
 800c90e:	0793      	lsls	r3, r2, #30
 800c910:	680e      	ldr	r6, [r1, #0]
 800c912:	bf08      	it	eq
 800c914:	694b      	ldreq	r3, [r1, #20]
 800c916:	600f      	str	r7, [r1, #0]
 800c918:	bf18      	it	ne
 800c91a:	2300      	movne	r3, #0
 800c91c:	eba6 0807 	sub.w	r8, r6, r7
 800c920:	608b      	str	r3, [r1, #8]
 800c922:	f1b8 0f00 	cmp.w	r8, #0
 800c926:	dd9c      	ble.n	800c862 <__sflush_r+0x1a>
 800c928:	6a21      	ldr	r1, [r4, #32]
 800c92a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c92c:	4643      	mov	r3, r8
 800c92e:	463a      	mov	r2, r7
 800c930:	4628      	mov	r0, r5
 800c932:	47b0      	blx	r6
 800c934:	2800      	cmp	r0, #0
 800c936:	dc06      	bgt.n	800c946 <__sflush_r+0xfe>
 800c938:	89a3      	ldrh	r3, [r4, #12]
 800c93a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c93e:	81a3      	strh	r3, [r4, #12]
 800c940:	f04f 30ff 	mov.w	r0, #4294967295
 800c944:	e78e      	b.n	800c864 <__sflush_r+0x1c>
 800c946:	4407      	add	r7, r0
 800c948:	eba8 0800 	sub.w	r8, r8, r0
 800c94c:	e7e9      	b.n	800c922 <__sflush_r+0xda>
 800c94e:	bf00      	nop
 800c950:	20400001 	.word	0x20400001

0800c954 <_fflush_r>:
 800c954:	b538      	push	{r3, r4, r5, lr}
 800c956:	690b      	ldr	r3, [r1, #16]
 800c958:	4605      	mov	r5, r0
 800c95a:	460c      	mov	r4, r1
 800c95c:	b913      	cbnz	r3, 800c964 <_fflush_r+0x10>
 800c95e:	2500      	movs	r5, #0
 800c960:	4628      	mov	r0, r5
 800c962:	bd38      	pop	{r3, r4, r5, pc}
 800c964:	b118      	cbz	r0, 800c96e <_fflush_r+0x1a>
 800c966:	6983      	ldr	r3, [r0, #24]
 800c968:	b90b      	cbnz	r3, 800c96e <_fflush_r+0x1a>
 800c96a:	f000 f887 	bl	800ca7c <__sinit>
 800c96e:	4b14      	ldr	r3, [pc, #80]	; (800c9c0 <_fflush_r+0x6c>)
 800c970:	429c      	cmp	r4, r3
 800c972:	d11b      	bne.n	800c9ac <_fflush_r+0x58>
 800c974:	686c      	ldr	r4, [r5, #4]
 800c976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d0ef      	beq.n	800c95e <_fflush_r+0xa>
 800c97e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c980:	07d0      	lsls	r0, r2, #31
 800c982:	d404      	bmi.n	800c98e <_fflush_r+0x3a>
 800c984:	0599      	lsls	r1, r3, #22
 800c986:	d402      	bmi.n	800c98e <_fflush_r+0x3a>
 800c988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c98a:	f000 f915 	bl	800cbb8 <__retarget_lock_acquire_recursive>
 800c98e:	4628      	mov	r0, r5
 800c990:	4621      	mov	r1, r4
 800c992:	f7ff ff59 	bl	800c848 <__sflush_r>
 800c996:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c998:	07da      	lsls	r2, r3, #31
 800c99a:	4605      	mov	r5, r0
 800c99c:	d4e0      	bmi.n	800c960 <_fflush_r+0xc>
 800c99e:	89a3      	ldrh	r3, [r4, #12]
 800c9a0:	059b      	lsls	r3, r3, #22
 800c9a2:	d4dd      	bmi.n	800c960 <_fflush_r+0xc>
 800c9a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9a6:	f000 f908 	bl	800cbba <__retarget_lock_release_recursive>
 800c9aa:	e7d9      	b.n	800c960 <_fflush_r+0xc>
 800c9ac:	4b05      	ldr	r3, [pc, #20]	; (800c9c4 <_fflush_r+0x70>)
 800c9ae:	429c      	cmp	r4, r3
 800c9b0:	d101      	bne.n	800c9b6 <_fflush_r+0x62>
 800c9b2:	68ac      	ldr	r4, [r5, #8]
 800c9b4:	e7df      	b.n	800c976 <_fflush_r+0x22>
 800c9b6:	4b04      	ldr	r3, [pc, #16]	; (800c9c8 <_fflush_r+0x74>)
 800c9b8:	429c      	cmp	r4, r3
 800c9ba:	bf08      	it	eq
 800c9bc:	68ec      	ldreq	r4, [r5, #12]
 800c9be:	e7da      	b.n	800c976 <_fflush_r+0x22>
 800c9c0:	0800d36c 	.word	0x0800d36c
 800c9c4:	0800d38c 	.word	0x0800d38c
 800c9c8:	0800d34c 	.word	0x0800d34c

0800c9cc <std>:
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	b510      	push	{r4, lr}
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	e9c0 3300 	strd	r3, r3, [r0]
 800c9d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9da:	6083      	str	r3, [r0, #8]
 800c9dc:	8181      	strh	r1, [r0, #12]
 800c9de:	6643      	str	r3, [r0, #100]	; 0x64
 800c9e0:	81c2      	strh	r2, [r0, #14]
 800c9e2:	6183      	str	r3, [r0, #24]
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	2208      	movs	r2, #8
 800c9e8:	305c      	adds	r0, #92	; 0x5c
 800c9ea:	f7fb fda9 	bl	8008540 <memset>
 800c9ee:	4b05      	ldr	r3, [pc, #20]	; (800ca04 <std+0x38>)
 800c9f0:	6263      	str	r3, [r4, #36]	; 0x24
 800c9f2:	4b05      	ldr	r3, [pc, #20]	; (800ca08 <std+0x3c>)
 800c9f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c9f6:	4b05      	ldr	r3, [pc, #20]	; (800ca0c <std+0x40>)
 800c9f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c9fa:	4b05      	ldr	r3, [pc, #20]	; (800ca10 <std+0x44>)
 800c9fc:	6224      	str	r4, [r4, #32]
 800c9fe:	6323      	str	r3, [r4, #48]	; 0x30
 800ca00:	bd10      	pop	{r4, pc}
 800ca02:	bf00      	nop
 800ca04:	0800cd21 	.word	0x0800cd21
 800ca08:	0800cd43 	.word	0x0800cd43
 800ca0c:	0800cd7b 	.word	0x0800cd7b
 800ca10:	0800cd9f 	.word	0x0800cd9f

0800ca14 <_cleanup_r>:
 800ca14:	4901      	ldr	r1, [pc, #4]	; (800ca1c <_cleanup_r+0x8>)
 800ca16:	f000 b8af 	b.w	800cb78 <_fwalk_reent>
 800ca1a:	bf00      	nop
 800ca1c:	0800c955 	.word	0x0800c955

0800ca20 <__sfmoreglue>:
 800ca20:	b570      	push	{r4, r5, r6, lr}
 800ca22:	2268      	movs	r2, #104	; 0x68
 800ca24:	1e4d      	subs	r5, r1, #1
 800ca26:	4355      	muls	r5, r2
 800ca28:	460e      	mov	r6, r1
 800ca2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ca2e:	f7ff fa5b 	bl	800bee8 <_malloc_r>
 800ca32:	4604      	mov	r4, r0
 800ca34:	b140      	cbz	r0, 800ca48 <__sfmoreglue+0x28>
 800ca36:	2100      	movs	r1, #0
 800ca38:	e9c0 1600 	strd	r1, r6, [r0]
 800ca3c:	300c      	adds	r0, #12
 800ca3e:	60a0      	str	r0, [r4, #8]
 800ca40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ca44:	f7fb fd7c 	bl	8008540 <memset>
 800ca48:	4620      	mov	r0, r4
 800ca4a:	bd70      	pop	{r4, r5, r6, pc}

0800ca4c <__sfp_lock_acquire>:
 800ca4c:	4801      	ldr	r0, [pc, #4]	; (800ca54 <__sfp_lock_acquire+0x8>)
 800ca4e:	f000 b8b3 	b.w	800cbb8 <__retarget_lock_acquire_recursive>
 800ca52:	bf00      	nop
 800ca54:	20001f9d 	.word	0x20001f9d

0800ca58 <__sfp_lock_release>:
 800ca58:	4801      	ldr	r0, [pc, #4]	; (800ca60 <__sfp_lock_release+0x8>)
 800ca5a:	f000 b8ae 	b.w	800cbba <__retarget_lock_release_recursive>
 800ca5e:	bf00      	nop
 800ca60:	20001f9d 	.word	0x20001f9d

0800ca64 <__sinit_lock_acquire>:
 800ca64:	4801      	ldr	r0, [pc, #4]	; (800ca6c <__sinit_lock_acquire+0x8>)
 800ca66:	f000 b8a7 	b.w	800cbb8 <__retarget_lock_acquire_recursive>
 800ca6a:	bf00      	nop
 800ca6c:	20001f9e 	.word	0x20001f9e

0800ca70 <__sinit_lock_release>:
 800ca70:	4801      	ldr	r0, [pc, #4]	; (800ca78 <__sinit_lock_release+0x8>)
 800ca72:	f000 b8a2 	b.w	800cbba <__retarget_lock_release_recursive>
 800ca76:	bf00      	nop
 800ca78:	20001f9e 	.word	0x20001f9e

0800ca7c <__sinit>:
 800ca7c:	b510      	push	{r4, lr}
 800ca7e:	4604      	mov	r4, r0
 800ca80:	f7ff fff0 	bl	800ca64 <__sinit_lock_acquire>
 800ca84:	69a3      	ldr	r3, [r4, #24]
 800ca86:	b11b      	cbz	r3, 800ca90 <__sinit+0x14>
 800ca88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca8c:	f7ff bff0 	b.w	800ca70 <__sinit_lock_release>
 800ca90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ca94:	6523      	str	r3, [r4, #80]	; 0x50
 800ca96:	4b13      	ldr	r3, [pc, #76]	; (800cae4 <__sinit+0x68>)
 800ca98:	4a13      	ldr	r2, [pc, #76]	; (800cae8 <__sinit+0x6c>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ca9e:	42a3      	cmp	r3, r4
 800caa0:	bf04      	itt	eq
 800caa2:	2301      	moveq	r3, #1
 800caa4:	61a3      	streq	r3, [r4, #24]
 800caa6:	4620      	mov	r0, r4
 800caa8:	f000 f820 	bl	800caec <__sfp>
 800caac:	6060      	str	r0, [r4, #4]
 800caae:	4620      	mov	r0, r4
 800cab0:	f000 f81c 	bl	800caec <__sfp>
 800cab4:	60a0      	str	r0, [r4, #8]
 800cab6:	4620      	mov	r0, r4
 800cab8:	f000 f818 	bl	800caec <__sfp>
 800cabc:	2200      	movs	r2, #0
 800cabe:	60e0      	str	r0, [r4, #12]
 800cac0:	2104      	movs	r1, #4
 800cac2:	6860      	ldr	r0, [r4, #4]
 800cac4:	f7ff ff82 	bl	800c9cc <std>
 800cac8:	68a0      	ldr	r0, [r4, #8]
 800caca:	2201      	movs	r2, #1
 800cacc:	2109      	movs	r1, #9
 800cace:	f7ff ff7d 	bl	800c9cc <std>
 800cad2:	68e0      	ldr	r0, [r4, #12]
 800cad4:	2202      	movs	r2, #2
 800cad6:	2112      	movs	r1, #18
 800cad8:	f7ff ff78 	bl	800c9cc <std>
 800cadc:	2301      	movs	r3, #1
 800cade:	61a3      	str	r3, [r4, #24]
 800cae0:	e7d2      	b.n	800ca88 <__sinit+0xc>
 800cae2:	bf00      	nop
 800cae4:	0800cf08 	.word	0x0800cf08
 800cae8:	0800ca15 	.word	0x0800ca15

0800caec <__sfp>:
 800caec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caee:	4607      	mov	r7, r0
 800caf0:	f7ff ffac 	bl	800ca4c <__sfp_lock_acquire>
 800caf4:	4b1e      	ldr	r3, [pc, #120]	; (800cb70 <__sfp+0x84>)
 800caf6:	681e      	ldr	r6, [r3, #0]
 800caf8:	69b3      	ldr	r3, [r6, #24]
 800cafa:	b913      	cbnz	r3, 800cb02 <__sfp+0x16>
 800cafc:	4630      	mov	r0, r6
 800cafe:	f7ff ffbd 	bl	800ca7c <__sinit>
 800cb02:	3648      	adds	r6, #72	; 0x48
 800cb04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	d503      	bpl.n	800cb14 <__sfp+0x28>
 800cb0c:	6833      	ldr	r3, [r6, #0]
 800cb0e:	b30b      	cbz	r3, 800cb54 <__sfp+0x68>
 800cb10:	6836      	ldr	r6, [r6, #0]
 800cb12:	e7f7      	b.n	800cb04 <__sfp+0x18>
 800cb14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cb18:	b9d5      	cbnz	r5, 800cb50 <__sfp+0x64>
 800cb1a:	4b16      	ldr	r3, [pc, #88]	; (800cb74 <__sfp+0x88>)
 800cb1c:	60e3      	str	r3, [r4, #12]
 800cb1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb22:	6665      	str	r5, [r4, #100]	; 0x64
 800cb24:	f000 f847 	bl	800cbb6 <__retarget_lock_init_recursive>
 800cb28:	f7ff ff96 	bl	800ca58 <__sfp_lock_release>
 800cb2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cb30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cb34:	6025      	str	r5, [r4, #0]
 800cb36:	61a5      	str	r5, [r4, #24]
 800cb38:	2208      	movs	r2, #8
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cb40:	f7fb fcfe 	bl	8008540 <memset>
 800cb44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cb48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb50:	3468      	adds	r4, #104	; 0x68
 800cb52:	e7d9      	b.n	800cb08 <__sfp+0x1c>
 800cb54:	2104      	movs	r1, #4
 800cb56:	4638      	mov	r0, r7
 800cb58:	f7ff ff62 	bl	800ca20 <__sfmoreglue>
 800cb5c:	4604      	mov	r4, r0
 800cb5e:	6030      	str	r0, [r6, #0]
 800cb60:	2800      	cmp	r0, #0
 800cb62:	d1d5      	bne.n	800cb10 <__sfp+0x24>
 800cb64:	f7ff ff78 	bl	800ca58 <__sfp_lock_release>
 800cb68:	230c      	movs	r3, #12
 800cb6a:	603b      	str	r3, [r7, #0]
 800cb6c:	e7ee      	b.n	800cb4c <__sfp+0x60>
 800cb6e:	bf00      	nop
 800cb70:	0800cf08 	.word	0x0800cf08
 800cb74:	ffff0001 	.word	0xffff0001

0800cb78 <_fwalk_reent>:
 800cb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb7c:	4606      	mov	r6, r0
 800cb7e:	4688      	mov	r8, r1
 800cb80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb84:	2700      	movs	r7, #0
 800cb86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb8a:	f1b9 0901 	subs.w	r9, r9, #1
 800cb8e:	d505      	bpl.n	800cb9c <_fwalk_reent+0x24>
 800cb90:	6824      	ldr	r4, [r4, #0]
 800cb92:	2c00      	cmp	r4, #0
 800cb94:	d1f7      	bne.n	800cb86 <_fwalk_reent+0xe>
 800cb96:	4638      	mov	r0, r7
 800cb98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb9c:	89ab      	ldrh	r3, [r5, #12]
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d907      	bls.n	800cbb2 <_fwalk_reent+0x3a>
 800cba2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cba6:	3301      	adds	r3, #1
 800cba8:	d003      	beq.n	800cbb2 <_fwalk_reent+0x3a>
 800cbaa:	4629      	mov	r1, r5
 800cbac:	4630      	mov	r0, r6
 800cbae:	47c0      	blx	r8
 800cbb0:	4307      	orrs	r7, r0
 800cbb2:	3568      	adds	r5, #104	; 0x68
 800cbb4:	e7e9      	b.n	800cb8a <_fwalk_reent+0x12>

0800cbb6 <__retarget_lock_init_recursive>:
 800cbb6:	4770      	bx	lr

0800cbb8 <__retarget_lock_acquire_recursive>:
 800cbb8:	4770      	bx	lr

0800cbba <__retarget_lock_release_recursive>:
 800cbba:	4770      	bx	lr

0800cbbc <__swhatbuf_r>:
 800cbbc:	b570      	push	{r4, r5, r6, lr}
 800cbbe:	460e      	mov	r6, r1
 800cbc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbc4:	2900      	cmp	r1, #0
 800cbc6:	b096      	sub	sp, #88	; 0x58
 800cbc8:	4614      	mov	r4, r2
 800cbca:	461d      	mov	r5, r3
 800cbcc:	da08      	bge.n	800cbe0 <__swhatbuf_r+0x24>
 800cbce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	602a      	str	r2, [r5, #0]
 800cbd6:	061a      	lsls	r2, r3, #24
 800cbd8:	d410      	bmi.n	800cbfc <__swhatbuf_r+0x40>
 800cbda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbde:	e00e      	b.n	800cbfe <__swhatbuf_r+0x42>
 800cbe0:	466a      	mov	r2, sp
 800cbe2:	f000 f903 	bl	800cdec <_fstat_r>
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	dbf1      	blt.n	800cbce <__swhatbuf_r+0x12>
 800cbea:	9a01      	ldr	r2, [sp, #4]
 800cbec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cbf0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cbf4:	425a      	negs	r2, r3
 800cbf6:	415a      	adcs	r2, r3
 800cbf8:	602a      	str	r2, [r5, #0]
 800cbfa:	e7ee      	b.n	800cbda <__swhatbuf_r+0x1e>
 800cbfc:	2340      	movs	r3, #64	; 0x40
 800cbfe:	2000      	movs	r0, #0
 800cc00:	6023      	str	r3, [r4, #0]
 800cc02:	b016      	add	sp, #88	; 0x58
 800cc04:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cc08 <__smakebuf_r>:
 800cc08:	898b      	ldrh	r3, [r1, #12]
 800cc0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc0c:	079d      	lsls	r5, r3, #30
 800cc0e:	4606      	mov	r6, r0
 800cc10:	460c      	mov	r4, r1
 800cc12:	d507      	bpl.n	800cc24 <__smakebuf_r+0x1c>
 800cc14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cc18:	6023      	str	r3, [r4, #0]
 800cc1a:	6123      	str	r3, [r4, #16]
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	6163      	str	r3, [r4, #20]
 800cc20:	b002      	add	sp, #8
 800cc22:	bd70      	pop	{r4, r5, r6, pc}
 800cc24:	ab01      	add	r3, sp, #4
 800cc26:	466a      	mov	r2, sp
 800cc28:	f7ff ffc8 	bl	800cbbc <__swhatbuf_r>
 800cc2c:	9900      	ldr	r1, [sp, #0]
 800cc2e:	4605      	mov	r5, r0
 800cc30:	4630      	mov	r0, r6
 800cc32:	f7ff f959 	bl	800bee8 <_malloc_r>
 800cc36:	b948      	cbnz	r0, 800cc4c <__smakebuf_r+0x44>
 800cc38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc3c:	059a      	lsls	r2, r3, #22
 800cc3e:	d4ef      	bmi.n	800cc20 <__smakebuf_r+0x18>
 800cc40:	f023 0303 	bic.w	r3, r3, #3
 800cc44:	f043 0302 	orr.w	r3, r3, #2
 800cc48:	81a3      	strh	r3, [r4, #12]
 800cc4a:	e7e3      	b.n	800cc14 <__smakebuf_r+0xc>
 800cc4c:	4b0d      	ldr	r3, [pc, #52]	; (800cc84 <__smakebuf_r+0x7c>)
 800cc4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cc50:	89a3      	ldrh	r3, [r4, #12]
 800cc52:	6020      	str	r0, [r4, #0]
 800cc54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc58:	81a3      	strh	r3, [r4, #12]
 800cc5a:	9b00      	ldr	r3, [sp, #0]
 800cc5c:	6163      	str	r3, [r4, #20]
 800cc5e:	9b01      	ldr	r3, [sp, #4]
 800cc60:	6120      	str	r0, [r4, #16]
 800cc62:	b15b      	cbz	r3, 800cc7c <__smakebuf_r+0x74>
 800cc64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc68:	4630      	mov	r0, r6
 800cc6a:	f000 f8d1 	bl	800ce10 <_isatty_r>
 800cc6e:	b128      	cbz	r0, 800cc7c <__smakebuf_r+0x74>
 800cc70:	89a3      	ldrh	r3, [r4, #12]
 800cc72:	f023 0303 	bic.w	r3, r3, #3
 800cc76:	f043 0301 	orr.w	r3, r3, #1
 800cc7a:	81a3      	strh	r3, [r4, #12]
 800cc7c:	89a0      	ldrh	r0, [r4, #12]
 800cc7e:	4305      	orrs	r5, r0
 800cc80:	81a5      	strh	r5, [r4, #12]
 800cc82:	e7cd      	b.n	800cc20 <__smakebuf_r+0x18>
 800cc84:	0800ca15 	.word	0x0800ca15

0800cc88 <_malloc_usable_size_r>:
 800cc88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc8c:	1f18      	subs	r0, r3, #4
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	bfbc      	itt	lt
 800cc92:	580b      	ldrlt	r3, [r1, r0]
 800cc94:	18c0      	addlt	r0, r0, r3
 800cc96:	4770      	bx	lr

0800cc98 <_raise_r>:
 800cc98:	291f      	cmp	r1, #31
 800cc9a:	b538      	push	{r3, r4, r5, lr}
 800cc9c:	4604      	mov	r4, r0
 800cc9e:	460d      	mov	r5, r1
 800cca0:	d904      	bls.n	800ccac <_raise_r+0x14>
 800cca2:	2316      	movs	r3, #22
 800cca4:	6003      	str	r3, [r0, #0]
 800cca6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccaa:	bd38      	pop	{r3, r4, r5, pc}
 800ccac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ccae:	b112      	cbz	r2, 800ccb6 <_raise_r+0x1e>
 800ccb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ccb4:	b94b      	cbnz	r3, 800ccca <_raise_r+0x32>
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	f000 f830 	bl	800cd1c <_getpid_r>
 800ccbc:	462a      	mov	r2, r5
 800ccbe:	4601      	mov	r1, r0
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccc6:	f000 b817 	b.w	800ccf8 <_kill_r>
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d00a      	beq.n	800cce4 <_raise_r+0x4c>
 800ccce:	1c59      	adds	r1, r3, #1
 800ccd0:	d103      	bne.n	800ccda <_raise_r+0x42>
 800ccd2:	2316      	movs	r3, #22
 800ccd4:	6003      	str	r3, [r0, #0]
 800ccd6:	2001      	movs	r0, #1
 800ccd8:	e7e7      	b.n	800ccaa <_raise_r+0x12>
 800ccda:	2400      	movs	r4, #0
 800ccdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cce0:	4628      	mov	r0, r5
 800cce2:	4798      	blx	r3
 800cce4:	2000      	movs	r0, #0
 800cce6:	e7e0      	b.n	800ccaa <_raise_r+0x12>

0800cce8 <raise>:
 800cce8:	4b02      	ldr	r3, [pc, #8]	; (800ccf4 <raise+0xc>)
 800ccea:	4601      	mov	r1, r0
 800ccec:	6818      	ldr	r0, [r3, #0]
 800ccee:	f7ff bfd3 	b.w	800cc98 <_raise_r>
 800ccf2:	bf00      	nop
 800ccf4:	200000fc 	.word	0x200000fc

0800ccf8 <_kill_r>:
 800ccf8:	b538      	push	{r3, r4, r5, lr}
 800ccfa:	4d07      	ldr	r5, [pc, #28]	; (800cd18 <_kill_r+0x20>)
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	4604      	mov	r4, r0
 800cd00:	4608      	mov	r0, r1
 800cd02:	4611      	mov	r1, r2
 800cd04:	602b      	str	r3, [r5, #0]
 800cd06:	f7f4 fba9 	bl	800145c <_kill>
 800cd0a:	1c43      	adds	r3, r0, #1
 800cd0c:	d102      	bne.n	800cd14 <_kill_r+0x1c>
 800cd0e:	682b      	ldr	r3, [r5, #0]
 800cd10:	b103      	cbz	r3, 800cd14 <_kill_r+0x1c>
 800cd12:	6023      	str	r3, [r4, #0]
 800cd14:	bd38      	pop	{r3, r4, r5, pc}
 800cd16:	bf00      	nop
 800cd18:	20001f98 	.word	0x20001f98

0800cd1c <_getpid_r>:
 800cd1c:	f7f4 bb96 	b.w	800144c <_getpid>

0800cd20 <__sread>:
 800cd20:	b510      	push	{r4, lr}
 800cd22:	460c      	mov	r4, r1
 800cd24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd28:	f000 f894 	bl	800ce54 <_read_r>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	bfab      	itete	ge
 800cd30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd32:	89a3      	ldrhlt	r3, [r4, #12]
 800cd34:	181b      	addge	r3, r3, r0
 800cd36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd3a:	bfac      	ite	ge
 800cd3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd3e:	81a3      	strhlt	r3, [r4, #12]
 800cd40:	bd10      	pop	{r4, pc}

0800cd42 <__swrite>:
 800cd42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd46:	461f      	mov	r7, r3
 800cd48:	898b      	ldrh	r3, [r1, #12]
 800cd4a:	05db      	lsls	r3, r3, #23
 800cd4c:	4605      	mov	r5, r0
 800cd4e:	460c      	mov	r4, r1
 800cd50:	4616      	mov	r6, r2
 800cd52:	d505      	bpl.n	800cd60 <__swrite+0x1e>
 800cd54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd58:	2302      	movs	r3, #2
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f000 f868 	bl	800ce30 <_lseek_r>
 800cd60:	89a3      	ldrh	r3, [r4, #12]
 800cd62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd6a:	81a3      	strh	r3, [r4, #12]
 800cd6c:	4632      	mov	r2, r6
 800cd6e:	463b      	mov	r3, r7
 800cd70:	4628      	mov	r0, r5
 800cd72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd76:	f000 b817 	b.w	800cda8 <_write_r>

0800cd7a <__sseek>:
 800cd7a:	b510      	push	{r4, lr}
 800cd7c:	460c      	mov	r4, r1
 800cd7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd82:	f000 f855 	bl	800ce30 <_lseek_r>
 800cd86:	1c43      	adds	r3, r0, #1
 800cd88:	89a3      	ldrh	r3, [r4, #12]
 800cd8a:	bf15      	itete	ne
 800cd8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd96:	81a3      	strheq	r3, [r4, #12]
 800cd98:	bf18      	it	ne
 800cd9a:	81a3      	strhne	r3, [r4, #12]
 800cd9c:	bd10      	pop	{r4, pc}

0800cd9e <__sclose>:
 800cd9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda2:	f000 b813 	b.w	800cdcc <_close_r>
	...

0800cda8 <_write_r>:
 800cda8:	b538      	push	{r3, r4, r5, lr}
 800cdaa:	4d07      	ldr	r5, [pc, #28]	; (800cdc8 <_write_r+0x20>)
 800cdac:	4604      	mov	r4, r0
 800cdae:	4608      	mov	r0, r1
 800cdb0:	4611      	mov	r1, r2
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	602a      	str	r2, [r5, #0]
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	f7f4 fb87 	bl	80014ca <_write>
 800cdbc:	1c43      	adds	r3, r0, #1
 800cdbe:	d102      	bne.n	800cdc6 <_write_r+0x1e>
 800cdc0:	682b      	ldr	r3, [r5, #0]
 800cdc2:	b103      	cbz	r3, 800cdc6 <_write_r+0x1e>
 800cdc4:	6023      	str	r3, [r4, #0]
 800cdc6:	bd38      	pop	{r3, r4, r5, pc}
 800cdc8:	20001f98 	.word	0x20001f98

0800cdcc <_close_r>:
 800cdcc:	b538      	push	{r3, r4, r5, lr}
 800cdce:	4d06      	ldr	r5, [pc, #24]	; (800cde8 <_close_r+0x1c>)
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	4608      	mov	r0, r1
 800cdd6:	602b      	str	r3, [r5, #0]
 800cdd8:	f7f4 fb93 	bl	8001502 <_close>
 800cddc:	1c43      	adds	r3, r0, #1
 800cdde:	d102      	bne.n	800cde6 <_close_r+0x1a>
 800cde0:	682b      	ldr	r3, [r5, #0]
 800cde2:	b103      	cbz	r3, 800cde6 <_close_r+0x1a>
 800cde4:	6023      	str	r3, [r4, #0]
 800cde6:	bd38      	pop	{r3, r4, r5, pc}
 800cde8:	20001f98 	.word	0x20001f98

0800cdec <_fstat_r>:
 800cdec:	b538      	push	{r3, r4, r5, lr}
 800cdee:	4d07      	ldr	r5, [pc, #28]	; (800ce0c <_fstat_r+0x20>)
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	4604      	mov	r4, r0
 800cdf4:	4608      	mov	r0, r1
 800cdf6:	4611      	mov	r1, r2
 800cdf8:	602b      	str	r3, [r5, #0]
 800cdfa:	f7f4 fb8e 	bl	800151a <_fstat>
 800cdfe:	1c43      	adds	r3, r0, #1
 800ce00:	d102      	bne.n	800ce08 <_fstat_r+0x1c>
 800ce02:	682b      	ldr	r3, [r5, #0]
 800ce04:	b103      	cbz	r3, 800ce08 <_fstat_r+0x1c>
 800ce06:	6023      	str	r3, [r4, #0]
 800ce08:	bd38      	pop	{r3, r4, r5, pc}
 800ce0a:	bf00      	nop
 800ce0c:	20001f98 	.word	0x20001f98

0800ce10 <_isatty_r>:
 800ce10:	b538      	push	{r3, r4, r5, lr}
 800ce12:	4d06      	ldr	r5, [pc, #24]	; (800ce2c <_isatty_r+0x1c>)
 800ce14:	2300      	movs	r3, #0
 800ce16:	4604      	mov	r4, r0
 800ce18:	4608      	mov	r0, r1
 800ce1a:	602b      	str	r3, [r5, #0]
 800ce1c:	f7f4 fb8d 	bl	800153a <_isatty>
 800ce20:	1c43      	adds	r3, r0, #1
 800ce22:	d102      	bne.n	800ce2a <_isatty_r+0x1a>
 800ce24:	682b      	ldr	r3, [r5, #0]
 800ce26:	b103      	cbz	r3, 800ce2a <_isatty_r+0x1a>
 800ce28:	6023      	str	r3, [r4, #0]
 800ce2a:	bd38      	pop	{r3, r4, r5, pc}
 800ce2c:	20001f98 	.word	0x20001f98

0800ce30 <_lseek_r>:
 800ce30:	b538      	push	{r3, r4, r5, lr}
 800ce32:	4d07      	ldr	r5, [pc, #28]	; (800ce50 <_lseek_r+0x20>)
 800ce34:	4604      	mov	r4, r0
 800ce36:	4608      	mov	r0, r1
 800ce38:	4611      	mov	r1, r2
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	602a      	str	r2, [r5, #0]
 800ce3e:	461a      	mov	r2, r3
 800ce40:	f7f4 fb86 	bl	8001550 <_lseek>
 800ce44:	1c43      	adds	r3, r0, #1
 800ce46:	d102      	bne.n	800ce4e <_lseek_r+0x1e>
 800ce48:	682b      	ldr	r3, [r5, #0]
 800ce4a:	b103      	cbz	r3, 800ce4e <_lseek_r+0x1e>
 800ce4c:	6023      	str	r3, [r4, #0]
 800ce4e:	bd38      	pop	{r3, r4, r5, pc}
 800ce50:	20001f98 	.word	0x20001f98

0800ce54 <_read_r>:
 800ce54:	b538      	push	{r3, r4, r5, lr}
 800ce56:	4d07      	ldr	r5, [pc, #28]	; (800ce74 <_read_r+0x20>)
 800ce58:	4604      	mov	r4, r0
 800ce5a:	4608      	mov	r0, r1
 800ce5c:	4611      	mov	r1, r2
 800ce5e:	2200      	movs	r2, #0
 800ce60:	602a      	str	r2, [r5, #0]
 800ce62:	461a      	mov	r2, r3
 800ce64:	f7f4 fb14 	bl	8001490 <_read>
 800ce68:	1c43      	adds	r3, r0, #1
 800ce6a:	d102      	bne.n	800ce72 <_read_r+0x1e>
 800ce6c:	682b      	ldr	r3, [r5, #0]
 800ce6e:	b103      	cbz	r3, 800ce72 <_read_r+0x1e>
 800ce70:	6023      	str	r3, [r4, #0]
 800ce72:	bd38      	pop	{r3, r4, r5, pc}
 800ce74:	20001f98 	.word	0x20001f98

0800ce78 <_init>:
 800ce78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce7a:	bf00      	nop
 800ce7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce7e:	bc08      	pop	{r3}
 800ce80:	469e      	mov	lr, r3
 800ce82:	4770      	bx	lr

0800ce84 <_fini>:
 800ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce86:	bf00      	nop
 800ce88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce8a:	bc08      	pop	{r3}
 800ce8c:	469e      	mov	lr, r3
 800ce8e:	4770      	bx	lr
